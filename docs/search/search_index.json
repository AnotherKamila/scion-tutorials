{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to SCION Tutorials\n\n\nIntroduction\n\n\nThis website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication.\n\n\nTo get in touch:\n\n\n\n\nFor questions and general comments on SCION-related topics, visit our \nSCION community Google group\n\n\nFor bug reports, please post them on the \nscion-coord github site\n\n\nFor suggestion on these pages, please post them on the \nscion-tutorials github site\n\n\n\n\nGetting started\n\n\nThere are generally two ways of installing and running SCION infrastructure. The first way is by downloading and running a preconfigured Virtual Machine (VM), while the second way is manual installation on an Ubuntu 16.04 platform. We cover both approaches in this tutorial.\n\n\nAfter installation, we suggest exploring the tips and tricks section below to learn how to use the infrastructure.\n\n\nRunning SCION infrastructure in a VM\n\n\nThe easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps.\n\n\n\n\nRunning SCION VM over OpenVPN\n\n\nRunning SCION VM with static public IP\n\n\n\n\nConfiguring SCION infrastructure manually\n\n\nThe following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated Ubuntu 16.04 host (without a VM).\n\n\n1. Installing SCION on different platforms:\n\n\n\n\nInstalling SCION on Ubuntu 16.04 x86\n\n\nInstalling SCION on Ubuntu MATE 16.04 - Raspberry PI\n\n\nInstalling SCION on an Android device\n\n\n\n\n2. Setting up SCION topology\n\n\n\n\nConfiguring local topology\n\n\nConfiguring AS and connecting to SCION network for devices with public static IP\n\n\nConfiguring AS and connecting to SCION network for devices with public static IP behind a NAT\n\n\nConfiguring AS and connecting to SCION network using OpenVPN\n\n\nConfiguring SCION endhost\n\n\n\n\nUsing SCION in projects\n\n\n\n\nFetching sensor readings or time stamps\n\n\nFetching a camera image over the SCION network\n\n\nRunning the bandwidthtester application\n\n\nRunning AS Visualization\n\n\nBrowser AS Visualization\n\n\nCommand-line AS Visualization\n\n\n\n\nSCION tips and tricks\n\n\n\n\nVerifying the installation\n\n\nUpdating gen directory\n\n\nUpdating SCION to a new version\n\n\nAdding Wireshark or Tshark dissector plugin\n\n\n\n\nSCION box specifics\n\n\n\n\nSCION box first steps",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-scion-tutorials",
            "text": "",
            "title": "Welcome to SCION Tutorials"
        },
        {
            "location": "/#introduction",
            "text": "This website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication.  To get in touch:   For questions and general comments on SCION-related topics, visit our  SCION community Google group  For bug reports, please post them on the  scion-coord github site  For suggestion on these pages, please post them on the  scion-tutorials github site",
            "title": "Introduction"
        },
        {
            "location": "/#getting-started",
            "text": "There are generally two ways of installing and running SCION infrastructure. The first way is by downloading and running a preconfigured Virtual Machine (VM), while the second way is manual installation on an Ubuntu 16.04 platform. We cover both approaches in this tutorial.  After installation, we suggest exploring the tips and tricks section below to learn how to use the infrastructure.",
            "title": "Getting started"
        },
        {
            "location": "/#running-scion-infrastructure-in-a-vm",
            "text": "The easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps.   Running SCION VM over OpenVPN  Running SCION VM with static public IP",
            "title": "Running SCION infrastructure in a VM"
        },
        {
            "location": "/#configuring-scion-infrastructure-manually",
            "text": "The following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated Ubuntu 16.04 host (without a VM).",
            "title": "Configuring SCION infrastructure manually"
        },
        {
            "location": "/#1-installing-scion-on-different-platforms",
            "text": "Installing SCION on Ubuntu 16.04 x86  Installing SCION on Ubuntu MATE 16.04 - Raspberry PI  Installing SCION on an Android device",
            "title": "1. Installing SCION on different platforms:"
        },
        {
            "location": "/#2-setting-up-scion-topology",
            "text": "Configuring local topology  Configuring AS and connecting to SCION network for devices with public static IP  Configuring AS and connecting to SCION network for devices with public static IP behind a NAT  Configuring AS and connecting to SCION network using OpenVPN  Configuring SCION endhost",
            "title": "2. Setting up SCION topology"
        },
        {
            "location": "/#using-scion-in-projects",
            "text": "Fetching sensor readings or time stamps  Fetching a camera image over the SCION network  Running the bandwidthtester application  Running AS Visualization  Browser AS Visualization  Command-line AS Visualization",
            "title": "Using SCION in projects"
        },
        {
            "location": "/#scion-tips-and-tricks",
            "text": "Verifying the installation  Updating gen directory  Updating SCION to a new version  Adding Wireshark or Tshark dissector plugin",
            "title": "SCION tips and tricks"
        },
        {
            "location": "/#scion-box-specifics",
            "text": "SCION box first steps",
            "title": "SCION box specifics"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/",
            "text": "Running SCION in a virtual machine \n VPN approach\n\n\nIntroduction\n\n\nThis tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to connect to the neighboring AS border router.\n\n\n\n\nTip\n\n\nIf you have a static public IP address and you can receive traffic on UDP port 50000, you should consider \nrunning the VM without VPN\n.\n\n\n\n\nPrerequisites\n\n\nRunning SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system.\n\n\nStep One \n install VirtualBox\n\n\nTo install VirtualBox, follow the steps on the \nVirtualBox download page\n for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager:\n\n\nsudo apt-get install virtualbox\n\n\n\n\n\nStep Two \n install Vagrant\n\n\nTo install Vagrant, follow the steps on the \nVagrant download page\n for your system. Also, on Ubuntu you could install it via your package manager:\n\n\nsudo apt-get install vagrant\n\n\n\n\n\nRunning SCION\n\n\nRunning SCION consists of several steps: registering a SCION VM on \nSCIONLab Coordination Service\n, deploying the VM, and running the SCION infrastructure.\n\n\nStep One \n download a SCION VM\n\n\nIn order to download a VM, you must login to \nSCIONLab Coordination Service\n. In case you don't yet have an account, follow the registration process.\n\n\nAfter logging in, create a new AS by clicking on \nGenerate a new SCIONLab AS\n, select a desired attachment point, and choose \nInstall inside a virtual machine\n. Unless your VM has public IP address, choose \nUse an OpenVPN connection for this AS\n. Then download a VM configuration by clicking on \nCreate and Download SCIONLab VM Configuration\n. A screenshot of the user interface is shown below:\n\n\n\n\nStep Two \n create and run the VM\n\n\nCreate a directory that will host your SCIONLab content. For instance:\n\n\nmkdir ~/scionlab\n\n\n\n\n\nWhen the configuration finishes downloading, move the contents to your SCIONLab directory, for instance (adjust based on your setup and download directory):\n\n\ncd\n ~/scionlab\nmv ~/Download/scion_lab_*.tar* .\n\n\n\n\n\nNext, extract the archive content. On a Linux system, simply running \ntar\n command will extract the contents:\n\n\ntar -xvzf scion_lab_*.tar.gz\n\n\n\n\n\nIf your downloader automatically uncompressed the downloaded file, the \n.gz\n extension is missing, and you can extract the contents with:\n\n\ntar -xvf scion_lab_*.tar\n\n\n\n\n\nAfter extraction, the extracted directory has the following structure:\n\n\n\u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AS1029\n\u2502           \u2514 ...\n\u2502\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion-viz.service\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scionupgrade.service\n\u251c\u2500\u2500 scionupgrade.sh\n\u251c\u2500\u2500 scionupgrade.timer\n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\n\nVerifying the structure, you can begin the setup by running, replacing \n*\n according to the name of your extracted archive:\n\n\ncd\n scion_lab_*\nvagrant box add scion/ubuntu-16.04-64-scion\nvagrant box update\nvagrant up\n\n\n\n\n\nThe installation process will take around 10 minutes.\n\n\nStep Three \n run the SCION infrastructure\n\n\nAfter successful installation of the VM, you can ssh into your VM:\n\n\nvagrant ssh\n\n\n\n\n\nThe SCION infrastructure is automatically started at boot time of your VM. You can control it using the \nscion.sh\n script located at \n~/go/src/github.com/scionproto/scion/\n. You can easily get to that directory with \ncd $SC\n.\n\n\nTo shut the system down, you can type \nsudo shutdown now\n inside the VM, or \nvagrant halt\n in the host terminal.\n\n\nAfter the installation, to start the VM, you can use \nvagrant up\n, followed by \nvagrant ssh\n to start a VM shell.\n\n\nNext steps\n\n\nAfter running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial \nVerifying SCION Installation\n\n\nWhen the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the \nmain page\n under \"Using SCION in projects\".",
            "title": "Virtual machine with VPN"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#running-scion-in-a-virtual-machine-vpn-approach",
            "text": "",
            "title": "Running SCION in a virtual machine &ndash; VPN approach"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#introduction",
            "text": "This tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to connect to the neighboring AS border router.   Tip  If you have a static public IP address and you can receive traffic on UDP port 50000, you should consider  running the VM without VPN .",
            "title": "Introduction"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#prerequisites",
            "text": "Running SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system.",
            "title": "Prerequisites"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-one-install-virtualbox",
            "text": "To install VirtualBox, follow the steps on the  VirtualBox download page  for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager:  sudo apt-get install virtualbox",
            "title": "Step One &ndash; install VirtualBox"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-two-install-vagrant",
            "text": "To install Vagrant, follow the steps on the  Vagrant download page  for your system. Also, on Ubuntu you could install it via your package manager:  sudo apt-get install vagrant",
            "title": "Step Two &ndash; install Vagrant"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#running-scion",
            "text": "Running SCION consists of several steps: registering a SCION VM on  SCIONLab Coordination Service , deploying the VM, and running the SCION infrastructure.",
            "title": "Running SCION"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-one-download-a-scion-vm",
            "text": "In order to download a VM, you must login to  SCIONLab Coordination Service . In case you don't yet have an account, follow the registration process.  After logging in, create a new AS by clicking on  Generate a new SCIONLab AS , select a desired attachment point, and choose  Install inside a virtual machine . Unless your VM has public IP address, choose  Use an OpenVPN connection for this AS . Then download a VM configuration by clicking on  Create and Download SCIONLab VM Configuration . A screenshot of the user interface is shown below:",
            "title": "Step One &ndash; download a SCION VM"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-two-create-and-run-the-vm",
            "text": "Create a directory that will host your SCIONLab content. For instance:  mkdir ~/scionlab  When the configuration finishes downloading, move the contents to your SCIONLab directory, for instance (adjust based on your setup and download directory):  cd  ~/scionlab\nmv ~/Download/scion_lab_*.tar* .  Next, extract the archive content. On a Linux system, simply running  tar  command will extract the contents:  tar -xvzf scion_lab_*.tar.gz  If your downloader automatically uncompressed the downloaded file, the  .gz  extension is missing, and you can extract the contents with:  tar -xvf scion_lab_*.tar  After extraction, the extracted directory has the following structure:  \u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AS1029\n\u2502           \u2514 ...\n\u2502\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion-viz.service\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scionupgrade.service\n\u251c\u2500\u2500 scionupgrade.sh\n\u251c\u2500\u2500 scionupgrade.timer\n\u2514\u2500\u2500 Vagrantfile  Verifying the structure, you can begin the setup by running, replacing  *  according to the name of your extracted archive:  cd  scion_lab_*\nvagrant box add scion/ubuntu-16.04-64-scion\nvagrant box update\nvagrant up  The installation process will take around 10 minutes.",
            "title": "Step Two &ndash; create and run the VM"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-three-run-the-scion-infrastructure",
            "text": "After successful installation of the VM, you can ssh into your VM:  vagrant ssh  The SCION infrastructure is automatically started at boot time of your VM. You can control it using the  scion.sh  script located at  ~/go/src/github.com/scionproto/scion/ . You can easily get to that directory with  cd $SC .  To shut the system down, you can type  sudo shutdown now  inside the VM, or  vagrant halt  in the host terminal.  After the installation, to start the VM, you can use  vagrant up , followed by  vagrant ssh  to start a VM shell.",
            "title": "Step Three &ndash; run the SCION infrastructure"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#next-steps",
            "text": "After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial  Verifying SCION Installation  When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the  main page  under \"Using SCION in projects\".",
            "title": "Next steps"
        },
        {
            "location": "/virtual_machine_setup/static_ip/",
            "text": "Running SCION in a virtual machine \n static public IP address\n\n\n\n\nWarning\n\n\nIf you \ndo not\n have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead \nconnect to the SCION network via VPN\n.\n\n\n\n\nSimply follow all the steps under \nPrerequisites\n in the \ntutorial for a VPN-based setup\n until the end of \nStep One \n download a SCION VM\n.\n\n\nThere, instead of directly clicking on \nCreate and Download SCIONLab VM Configuration\n, unselect \nUse an OpenVPN connection for this AS\n and and enter your host's public IP address in the input field.\n\n\nAfterwards, follow all subsequent steps in the \ntutorial for a VPN-based setup\n.\n\n\n\n\nTroubleshooting\n\n\nMake sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running. If you have \ntshark\n installed, you can verify the arrival of the SCION beacon messages from the neighboring border router with \ntshark udp and port 50000\n.",
            "title": "Virtual machine with static public IP"
        },
        {
            "location": "/virtual_machine_setup/static_ip/#running-scion-in-a-virtual-machine-static-public-ip-address",
            "text": "Warning  If you  do not  have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead  connect to the SCION network via VPN .   Simply follow all the steps under  Prerequisites  in the  tutorial for a VPN-based setup  until the end of  Step One   download a SCION VM .  There, instead of directly clicking on  Create and Download SCIONLab VM Configuration , unselect  Use an OpenVPN connection for this AS  and and enter your host's public IP address in the input field.  Afterwards, follow all subsequent steps in the  tutorial for a VPN-based setup .   Troubleshooting  Make sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running. If you have  tshark  installed, you can verify the arrival of the SCION beacon messages from the neighboring border router with  tshark udp and port 50000 .",
            "title": "Running SCION in a virtual machine &ndash; static public IP address"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/",
            "text": "Building SCION on Ubuntu 16.04 x86-64\n\n\nIntroduction\n\n\nThis tutorial will guide you through the steps required to install SCION on an x86 system running Ubuntu 16.04. For details on how to build SCION on a Raspberry Pi, please take a look at \nhow to build SCION on a Raspberry Pi\n.\n\n\nEasy Way (using the SCION install script)\n\n\nThe easy way to install SCION is to use the SCION install script:\n\n\nwget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_install_script.sh\nchmod +x scion_install_script.sh\n\n\n\n\n\nThe SCION install script supports various ways to connect to SCION:\n\n\nRunning the SCION infrastructure on a local topology\n\n\nIf the SCION install script is executed without any arguments, SCION will be run on a local topology:\n\n\n./scion_install_script.sh\n\n\n\n\n\nFor more information, check out \nRunning the SCION infrastructure on a local topology\n.\n\n\nConnecting to SCIONLab\n\n\nInstalling a SCION AS and connecting it to SCIONLab requires that you have already downloaded the necessary configuration from the \nSCION Coordination Service\n. To do so, please follow one of the following options, depending on the network configuration of the system on which SCION will be installed:\n\n\n\n\nConnecting to SCIONLab with a static public IP address\n\n\nConnecting to SCIONLab with a static IP address, but behind a NAT\n\n\nConnecting to SCIONLab via VPN (without a static IP address)\n\n\n\n\nThe configuration downloaded from the \nSCION Coordination Service\n includes a \ngen\n folder that needs to be uploaded to the target system and provided as an argument to the install script:\n\n\nexport\n \nBIDIR\n=\n`\npwd\n`\n\n./scion_install_script.sh -g \n$BIDIR\n/gen/\n\n\n\n\n\nIn case of connecting to SCIONLab via VPN, the OpenVPN client configurationi (\nclient.conf\n), that is included in the configuration downloaded from the \nSCION Coordination Service\n needs to be provided as argument additionally:\n\n\nexport\n \nBIDIR\n=\n`\npwd\n`\n\n./scion_install_script.sh -g \n$BIDIR\n/gen/ -v \n$BIDIR\n/client.conf\n\n\n\n\n\nNext Steps\n\n\nThe \nscion_install_script.sh\n execution declares new variable definitions (e.g. \n$SC\n) in \n~/.profile\n. It is advised to log out and log in again for them to take effect.\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation\n.\n\n\nAdvanced Way (manual installation)\n\n\nThe following steps will guide you through the manual installation of the tools necessary for running SCION. \n\n\nStep One \n install Go\n\n\nIn order to run SCION, you must have Go version 1.9.x installed. The installation steps below will automatically install the correct GO version, but be aware that if you are running a different Go version or are using a different gopath, the following steps may break other Go software that you are running.\n\n\nStep Two \n configure your Go workspace\n\n\n\n\nTip\n\n\nYou can skip this step if you already have a Go workspace configured on your machine.\n\n\n\n\nIt is necessary to set up your \nGo workspace\n. The following commands will create a default workspace at \n~/go\n and export it as the \n$GOPATH\n environment variable:\n\n\necho\n \nexport GOPATH=\n$HOME/go\n \n ~/.profile\n\nsource\n ~/.profile\nmkdir -p \n$GOPATH\n/bin\n\n\necho\n \nPATH=$PATH:$GOPATH/bin\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nSCION installation\n\n\nStep One \n clone the SCION repository\n\n\nAfter the Go workspace has been configured, we can check out the SCION repository from github.com with all dependencies using the following commands:\n\n\nmkdir -p \n$GOPATH\n/src/github.com/scionproto/scion\n\n\ncd\n \n$GOPATH\n/src/github.com/scionproto/scion\n\ngit clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion .\n\n\n\n\n\n\n\nTroubleshooting\n\n\nIf your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error \nPermission denied (publickey)\n. There are two ways to resolve this problem:\n\n\n\n\nChanging the checkout using https instead of ssh:\n\ngit config --global url.https://github.com/.insteadOf git@github.com:\n\n\nAssign an SSH key to your Github account, detailed instructions can be found on \nGithub help\n.\n\n\n\n\n\n\nThis will clone the appropriate SCION directory into your Go workspace. We will create an environment variable \nSC\n that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:\n\n\necho\n \nexport SC=\n$GOPATH/src/github.com/scionproto/scion\n \n ~/.profile\n\nsource\n ~/.profile\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Two \n configure Python path variable\n\n\nSome SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the \nPYTHONPATH\n environment variable needs to be exported:\n\n\necho\n \nexport PYTHONPATH=\n$SC/python:$SC\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nStep Three \n finish installing the required packages\n\n\nIn order to install all the dependencies, simply issue the following command while in the root directory of the SCION installation:\n\n\nbash -c \nyes | GO_INSTALL=true ./env/deps\n\n\n\n\n\n\n\n\nNote\n\n\nYou might be asked for your sudo password after running the command\n\n\n\n\nThis will finish installing the required dependencies and system packages.\n\n\nStep Four \n configure the host Zookeeper instance\n\n\nReplacing \n/etc/zookeeper/conf/zoo.cfg\n with the file \ndocker/zoo.cfg\n is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).\n\n\ncp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg\n\n\n\n\n\nNext steps\n\n\nAfter finishing the installation of SCION, you can run the architecture on several different topologies. The following tutorials will cover this in further detail:\n\n\n\n\nConfigure SCION to run on system boot\n \n Use systemd to run SCION and SCION-viz when system is started.\n\n\nRunning a local network topology\n \n Generate a sample topology and run SCION locally\n\n\nConnecting to SCIONLab with a static public IP address\n \n Connect to the already running SCION topology.\n\n\nConnecting to SCIONLab with a static public IP address, but behind a NAT\n\n\nConnecting to SCIONLab without a static public IP address\n \n Connect to the already running SCION topology through an OpenVPN tunnel.",
            "title": "Ubuntu 16.04 x86-64"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#building-scion-on-ubuntu-1604-x86-64",
            "text": "",
            "title": "Building SCION on Ubuntu 16.04 x86-64"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#introduction",
            "text": "This tutorial will guide you through the steps required to install SCION on an x86 system running Ubuntu 16.04. For details on how to build SCION on a Raspberry Pi, please take a look at  how to build SCION on a Raspberry Pi .",
            "title": "Introduction"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#easy-way-using-the-scion-install-script",
            "text": "The easy way to install SCION is to use the SCION install script:  wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_install_script.sh\nchmod +x scion_install_script.sh  The SCION install script supports various ways to connect to SCION:",
            "title": "Easy Way (using the SCION install script)"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#running-the-scion-infrastructure-on-a-local-topology",
            "text": "If the SCION install script is executed without any arguments, SCION will be run on a local topology:  ./scion_install_script.sh  For more information, check out  Running the SCION infrastructure on a local topology .",
            "title": "Running the SCION infrastructure on a local topology"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#connecting-to-scionlab",
            "text": "Installing a SCION AS and connecting it to SCIONLab requires that you have already downloaded the necessary configuration from the  SCION Coordination Service . To do so, please follow one of the following options, depending on the network configuration of the system on which SCION will be installed:   Connecting to SCIONLab with a static public IP address  Connecting to SCIONLab with a static IP address, but behind a NAT  Connecting to SCIONLab via VPN (without a static IP address)   The configuration downloaded from the  SCION Coordination Service  includes a  gen  folder that needs to be uploaded to the target system and provided as an argument to the install script:  export   BIDIR = ` pwd ` \n./scion_install_script.sh -g  $BIDIR /gen/  In case of connecting to SCIONLab via VPN, the OpenVPN client configurationi ( client.conf ), that is included in the configuration downloaded from the  SCION Coordination Service  needs to be provided as argument additionally:  export   BIDIR = ` pwd ` \n./scion_install_script.sh -g  $BIDIR /gen/ -v  $BIDIR /client.conf",
            "title": "Connecting to SCIONLab"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#next-steps",
            "text": "The  scion_install_script.sh  execution declares new variable definitions (e.g.  $SC ) in  ~/.profile . It is advised to log out and log in again for them to take effect.  After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation .",
            "title": "Next Steps"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#advanced-way-manual-installation",
            "text": "The following steps will guide you through the manual installation of the tools necessary for running SCION.",
            "title": "Advanced Way (manual installation)"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-one-install-go",
            "text": "In order to run SCION, you must have Go version 1.9.x installed. The installation steps below will automatically install the correct GO version, but be aware that if you are running a different Go version or are using a different gopath, the following steps may break other Go software that you are running.",
            "title": "Step One &ndash; install Go"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-two-configure-your-go-workspace",
            "text": "Tip  You can skip this step if you already have a Go workspace configured on your machine.   It is necessary to set up your  Go workspace . The following commands will create a default workspace at  ~/go  and export it as the  $GOPATH  environment variable:  echo   export GOPATH= $HOME/go    ~/.profile source  ~/.profile\nmkdir -p  $GOPATH /bin  echo   PATH=$PATH:$GOPATH/bin    ~/.profile source  ~/.profile",
            "title": "Step Two &ndash; configure your Go workspace"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#scion-installation",
            "text": "",
            "title": "SCION installation"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-one-clone-the-scion-repository",
            "text": "After the Go workspace has been configured, we can check out the SCION repository from github.com with all dependencies using the following commands:  mkdir -p  $GOPATH /src/github.com/scionproto/scion  cd   $GOPATH /src/github.com/scionproto/scion \ngit clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion .   Troubleshooting  If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error  Permission denied (publickey) . There are two ways to resolve this problem:   Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com:  Assign an SSH key to your Github account, detailed instructions can be found on  Github help .    This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable  SC  that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:  echo   export SC= $GOPATH/src/github.com/scionproto/scion    ~/.profile source  ~/.profile cd   $SC",
            "title": "Step One &ndash; clone the SCION repository"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-two-configure-python-path-variable",
            "text": "Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the  PYTHONPATH  environment variable needs to be exported:  echo   export PYTHONPATH= $SC/python:$SC    ~/.profile source  ~/.profile",
            "title": "Step Two &ndash; configure Python path variable"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-three-finish-installing-the-required-packages",
            "text": "In order to install all the dependencies, simply issue the following command while in the root directory of the SCION installation:  bash -c  yes | GO_INSTALL=true ./env/deps    Note  You might be asked for your sudo password after running the command   This will finish installing the required dependencies and system packages.",
            "title": "Step Three &ndash; finish installing the required packages"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-four-configure-the-host-zookeeper-instance",
            "text": "Replacing  /etc/zookeeper/conf/zoo.cfg  with the file  docker/zoo.cfg  is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).  cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg",
            "title": "Step Four &ndash; configure the host Zookeeper instance"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#next-steps_1",
            "text": "After finishing the installation of SCION, you can run the architecture on several different topologies. The following tutorials will cover this in further detail:   Configure SCION to run on system boot    Use systemd to run SCION and SCION-viz when system is started.  Running a local network topology    Generate a sample topology and run SCION locally  Connecting to SCIONLab with a static public IP address    Connect to the already running SCION topology.  Connecting to SCIONLab with a static public IP address, but behind a NAT  Connecting to SCIONLab without a static public IP address    Connect to the already running SCION topology through an OpenVPN tunnel.",
            "title": "Next steps"
        },
        {
            "location": "/native_setup/rpi_ubuntu/",
            "text": "Building SCION for a Raspberry Pi \n Ubuntu MATE\n\n\nIntroduction\n\n\nThe SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the \nregular x86 build\n, although there are a few additional steps required to make everything work.\n\n\nPrerequisites\n\n\nIn this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the \ninstallation guide\n.\n\n\n\n\nUpdate packages to latest version\n\n\nIt is recommended to update all packages before starting the installation process of SCION:\n\n\nsudo apt update \n sudo apt upgrade\n\n\n\n\nInstall necessary tools\n\n\nInstall necessary packages\n\n\nsudo apt install git\n\n\n\n\n\nConfigure Go workspace\n\n\n\n\nTip\n\n\nYou can skip this step if you have Go workspaces already configured.\n\n\n\n\nIt is necessary to set up your \nGo workspace\n. The following commands will create a default workspace at \n~/go\n and export it as the \n$GOPATH\n environment variable:\n\n\necho\n \nexport GOPATH=\n$HOME/go\n \n ~/.profile\n\nsource\n ~/.profile\nmkdir -p \n$GOPATH\n/bin\n\n\necho\n \nPATH=$PATH:$GOPATH/bin\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nInstall SCION\n\n\nStep One \n clone the SCION repository\n\n\nAfter the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands:\n\n\nmkdir -p \n$GOPATH\n/src/github.com/scionproto/scion\n\n\ncd\n \n$GOPATH\n/src/github.com/scionproto/scion\n\ngit clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion .\n\n\n\n\n\n\n\nTroubleshooting\n\n\nIf your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error \nPermission denied (publickey)\n. There are two ways to resolve this problem:\n\n\n\n\nChanging the checkout using https instead of ssh:\n\ngit config --global url.https://github.com/.insteadOf git@github.com:\n\n\nAssign an SSH key to your Github account, detailed instructions can be found on \nGithub help\n.\n\n\n\n\n\n\nThis will clone the appropriate SCION directory into your Go workspace. We will create an environment variable \nSC\n that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:\n\n\necho\n \nexport SC=\n$GOPATH/src/github.com/scionproto/scion\n \n ~/.profile\n\nsource\n ~/.profile\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Two \n apply necessary patches\n\n\nOn ARM architectures, it is necessary to apply two patches as followings:\n\n\ncurl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/ab6578ed400885bb5ea7767cb10a2686f3e1db6d/arm.patch \n|\n patch -p1\n\n\n\n\n\nIn order to enable updating the system, we commit the patched changes into the local arm-modified branch:\n\n\ngit commit -am \nModified to compile on ARM systems\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\nIf your git identity is not configured, commits won't be possible. Configuring the user identity on a newly installed git can be done as follows:\n\n\n\n\ncd\n \n$SC\n\ngit config user.name \nJohn Doe\n\ngit config user.email johndoe@example.com\n\n\n\n\n\nStep Three \n configure Python path variable\n\n\nSome SCION components like SCIONviz require Python libraries which are located in the scion root directory. In order to make them accessible, exporting the \nPYTHONPATH\n environment variable is required:\n\n\necho\n \nexport PYTHONPATH=\n$SC/python:$SC\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nStep Four \n finish installing the required packages\n\n\nIn order to instal dependencies, simply issue the following command while in the root directory of the SCION installation:\n\n\nbash -c \nyes | GO_INSTALL=true ./env/deps\n\n\n\n\n\n\n\n\nNote\n\n\nYou might be asked to enter the sudo password after running the command\n\n\n\n\nThis will finish installing the required dependencies and system packages.\n\n\nStep Five \n configure the host Zookeeper instance\n\n\nReplacing \n/etc/zookeeper/conf/zoo.cfg\n with the file \ndocker/zoo.cfg\n is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).\n\n\ncp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg\n\n\n\n\n\nNext steps\n\n\nAfter finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:\n\n\n\n\nConfigure SCION to run on system boot\n \n Use systemd to run SCION and SCION-viz when system is started.\n\n\nRunning a local network topology\n \n Generate a sample topology and run SCION locally\n\n\nConnecting to SCIONLab with a static public IP address\n \n Connect to the already running SCION topology.\n\n\nConnecting to SCIONLab with a static public IP address, but behind a NAT\n\n\nConnecting to SCIONLab without a static public IP address\n \n Connect to the already running SCION topology through an OpenVPN tunnel.",
            "title": "Ubuntu MATE Raspberry PI"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#building-scion-for-a-raspberry-pi-ubuntu-mate",
            "text": "",
            "title": "Building SCION for a Raspberry Pi &ndash; Ubuntu MATE"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#introduction",
            "text": "The SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the  regular x86 build , although there are a few additional steps required to make everything work.",
            "title": "Introduction"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#prerequisites",
            "text": "In this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the  installation guide .   Update packages to latest version  It is recommended to update all packages before starting the installation process of SCION:  sudo apt update   sudo apt upgrade",
            "title": "Prerequisites"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#install-necessary-tools",
            "text": "",
            "title": "Install necessary tools"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#install-necessary-packages",
            "text": "sudo apt install git",
            "title": "Install necessary packages"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#configure-go-workspace",
            "text": "Tip  You can skip this step if you have Go workspaces already configured.   It is necessary to set up your  Go workspace . The following commands will create a default workspace at  ~/go  and export it as the  $GOPATH  environment variable:  echo   export GOPATH= $HOME/go    ~/.profile source  ~/.profile\nmkdir -p  $GOPATH /bin  echo   PATH=$PATH:$GOPATH/bin    ~/.profile source  ~/.profile",
            "title": "Configure Go workspace"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#install-scion",
            "text": "",
            "title": "Install SCION"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-one-clone-the-scion-repository",
            "text": "After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands:  mkdir -p  $GOPATH /src/github.com/scionproto/scion  cd   $GOPATH /src/github.com/scionproto/scion \ngit clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion .   Troubleshooting  If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error  Permission denied (publickey) . There are two ways to resolve this problem:   Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com:  Assign an SSH key to your Github account, detailed instructions can be found on  Github help .    This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable  SC  that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:  echo   export SC= $GOPATH/src/github.com/scionproto/scion    ~/.profile source  ~/.profile cd   $SC",
            "title": "Step One &ndash; clone the SCION repository"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-two-apply-necessary-patches",
            "text": "On ARM architectures, it is necessary to apply two patches as followings:  curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/ab6578ed400885bb5ea7767cb10a2686f3e1db6d/arm.patch  |  patch -p1  In order to enable updating the system, we commit the patched changes into the local arm-modified branch:  git commit -am  Modified to compile on ARM systems    Troubleshooting  If your git identity is not configured, commits won't be possible. Configuring the user identity on a newly installed git can be done as follows:   cd   $SC \ngit config user.name  John Doe \ngit config user.email johndoe@example.com",
            "title": "Step Two &ndash; apply necessary patches"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-three-configure-python-path-variable",
            "text": "Some SCION components like SCIONviz require Python libraries which are located in the scion root directory. In order to make them accessible, exporting the  PYTHONPATH  environment variable is required:  echo   export PYTHONPATH= $SC/python:$SC    ~/.profile source  ~/.profile",
            "title": "Step Three &ndash; configure Python path variable"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-four-finish-installing-the-required-packages",
            "text": "In order to instal dependencies, simply issue the following command while in the root directory of the SCION installation:  bash -c  yes | GO_INSTALL=true ./env/deps    Note  You might be asked to enter the sudo password after running the command   This will finish installing the required dependencies and system packages.",
            "title": "Step Four &ndash; finish installing the required packages"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-five-configure-the-host-zookeeper-instance",
            "text": "Replacing  /etc/zookeeper/conf/zoo.cfg  with the file  docker/zoo.cfg  is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).  cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg",
            "title": "Step Five &ndash; configure the host Zookeeper instance"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#next-steps",
            "text": "After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:   Configure SCION to run on system boot    Use systemd to run SCION and SCION-viz when system is started.  Running a local network topology    Generate a sample topology and run SCION locally  Connecting to SCIONLab with a static public IP address    Connect to the already running SCION topology.  Connecting to SCIONLab with a static public IP address, but behind a NAT  Connecting to SCIONLab without a static public IP address    Connect to the already running SCION topology through an OpenVPN tunnel.",
            "title": "Next steps"
        },
        {
            "location": "/native_setup/android/",
            "text": "Installing SCION on an Android device\n\n\nIntroduction\n\n\nIt is possible to run SCION on an Android device. The easiest way is to install \nSCION as an Android app\n. The other alternative is to \nmanually install SCION on your Android device\n. Both variants are based on \nTermux\n, which emulates a Terminal environment with the Linux base system that Android is based upon.\n\n\nThis tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described \nhere\n.\n\n\nPrerequisites\n\n\nIt is recommended to make yourself familiar with Termux by reading the \nWiki\n to learn how the app can be used comfortably.\n\n\nSCION App\n\n\n\n\nHint\n\n\nThe SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the \nmanual setup\n won't be necessary anymore.\n\n\n\n\nTo install the SCION app, please contact \nStefan Schwarz\n to get an invite to the App testing group.\n\n\nOnce you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done \nthrough the HockeyApp website\n (it is not available on the Google Play Store).\n\n\nInstall SCION with the SCION App\n\n\nOnce the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended):\n\n\n./install\n\n\n\n\n\nThat\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue.\n\n\n\n\nHint\n\n\nIf the folder selection doesn't show up, run the following script to trigger it manually:\n\n./import_folder\n\n\n\n\nThat means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB.\n\n\n\n\nWarning\n\n\nSCION for Android currently only supports a SCION endhost configuration, as described \nin this tutorial\n\n\n\n\n\n\nWarning\n\n\nSCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described \nhere\n\n\n\n\nManual setup\n\n\nTo setup SCION on Android manually, the \nTermux app\n needs to be installed from the Google Play Store.\n\n\nTo install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH.\n\n\nAccess Termux via SSH\n\n\nFirst install the \nopenssh\n package within Termux with \npkg install openssh\n, then start the server with \nsshd\n. Password authentication is not supported, so you need to add your public key to \n$HOME/.ssh/authorized_keys\n. The ssh server runs by default on port 8022, so connect to it with \nssh -p 8022 DEVICE_IP\n. You can find the device IP address with \nip addr list wlan0\n. \n\n\nFor more information:\n\nRun an SSH server on your Android with Termux\n\n\nAccess Termux via USB\n\n\nInstall necessary packages\n\n\nInstall the required packages from within Termux:\n\n\napt update \n apt upgrade\npkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl\n\n\n\n\n\nTo access the SD card from Termux, it is required to run \ntermux-setup-storage\n from the Termux console.\n\n\nConfigure Go workspace\n\n\nSCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 \n ARMv8/aarch64 architectures:\n\n\nFor ARMv7:\n\n\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb\ndpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb\n\n\n\n\n\nFor aarch64:\n\n\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb\ndpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb\n\n\n\n\n\nSetup the Go workspace and add it to your path:\n\n\necho\n \nexport GOPATH=\n$HOME/go\n \n ~/.profile\n\nsource\n ~/.profile\nmkdir -p \n$GOPATH\n/bin\n\n\necho\n \nPATH=$PATH:$GOPATH/bin\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nInstall SCION\n\n\nStep One \n clone the SCION repository\n\n\nAfter the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands:\n\n\nmkdir -p \n$GOPATH\n/src/github.com/scionproto/scion\n\n\ncd\n \n$GOPATH\n/src/github.com/scionproto/scion\n\ngit config --global url.https://github.com/.insteadOf git@github.com:\ngit clone --recursive -b termux-modifications git@github.com:stschwar/scion .\n\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch\npatch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch\nrm lwip-contrib.patch\n\n\n\n\n\nThis will clone the appropriate SCION directory into your Go workspace. We will create an environment variable \nSC\n that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:\n\n\necho\n \nexport SC=\n$GOPATH/src/github.com/scionproto/scion\n \n ~/.profile\n\nsource\n ~/.profile\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Two \n configure Python path variable\n\n\nSome SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the \nPYTHONPATH\n environment variable needs to be exported:\n\n\necho\n \nexport PYTHONPATH=\n$SC/python:$SC\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nStep Three \n install required packages/patches\n\n\nSCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually.\n\n\nCap'n Proto\n\n\nTo install \nCap'n Proto\n in Termux run the following commands in the \nhome/\n directory:\n\n\ncurl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz\ntar zxf capnproto-c++-0.6.1.tar.gz\n\ncd\n capnproto-c++-0.6.1\n\n\n\n\n\nOn Termux Cap'n Proto requires some patching to compile:\n\n\ncd\n src/kj/\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch\npatch debug.c++ debug.c++.patch\nrm debug.c++.patch\n\n\n\n\n\nBack in the \ncapnproto-c++-0.6.1/\n root directory run:\n\n\n./configure --prefix\n=\n$PREFIX\n \nTMPDIR\n=\n$PREFIX\n/tmp\nmake \nmake install\n\n\n\n\n\nzlog\n\n\nInstall \nzlog\n by following its install instructions mostly. It requires some more patching and the installation of \nlibandroid-glob-dev\n:\n\n\ncurl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz\ntar -zxf zlog-latest-stable.tar.gz\n\ncd\n zlog-latest-stable/\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch\npatch src/makefile zlog-makefile.patch\nrm zlog-makefile.patch\n\npkg install -y libandroid-glob-dev\nmake \nPREFIX\n=\n$PREFIX\n\nmake \nPREFIX\n=\n$PREFIX\n install\n\n\n\n\n\nuthash\n\n\nInstall the \nuthash\n library from your \nhome/\n directory:\n\n\ncurl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master\nunzip uthash-master.zip\ncp uthash-master/src/*.h \n$PREFIX\n/include\nrm -rf uthash-master/\n\n\n\n\n\nSCION Python dependencies\n\n\nMost of the Python dependencies can easily be installed through \npip\n:\n\n\ncd\n \n$SC\n\npip2 install -r env/pip2/requirements.txt\npip3 install -r env/pip3/requirements.txt\n\nTMPDIR\n=\n$PREFIX\n/tmp pip3 install lz4 PyNaCl PyYAML Pygments\n\n\n\n\n\n\n\nSupervisor\n\n\nIn case the pip installation of the package \"Supervisor\" fails, you can install it manually:\n\n\n\n\ncurl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz\ntar -xzf supervisor-3.3.4.tar.gz\n\ncd\n supervisor-3.3.4/\npython2 setup.py install\n\n\n\n\n\nSCION Go dependencies\n\n\nWith Go correctly installed it is easy to install the SCION dependencies as well:\n\n\ncd\n \n$SC\n/env/go\n./deps\n\n\n\n\n\nNext steps\n\n\nAfter finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:\n\n\n\n\nRunning a local network topology\n \n Generate a sample topology and run SCION locally\n\n\nConnecting to SCIONLab as an endhost\n \n Connect to the already running SCION topology as a mobile endhost through an existing SCION setup.\n\n\n\n\nChanges to gen folder\n\n\nNote that in \ngen/ISDx/AS10xx/supervisord.conf\n the path of the SCION Deamon socket needs to be changed as follows: \n\"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\"\n. \n\n\nVPN Connection to SCIONLab\n\n\nUnfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the \nOpen\nVPN app\n can be installed to connect to SCIONLab via VPN. The \nclient.conf\n file that is provided by the \nSCIONLab coordinator\n needs to be renamed to \nclient.ovpn\n before it can be imported into the app. Additionally, the line \nroute 10.0.8.0/24\n needs to be added to the file.\n\n\nEndhost configuration vs. full AS\n\n\nIt is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage.\n\n\nIf you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.",
            "title": "Android devices"
        },
        {
            "location": "/native_setup/android/#installing-scion-on-an-android-device",
            "text": "",
            "title": "Installing SCION on an Android device"
        },
        {
            "location": "/native_setup/android/#introduction",
            "text": "It is possible to run SCION on an Android device. The easiest way is to install  SCION as an Android app . The other alternative is to  manually install SCION on your Android device . Both variants are based on  Termux , which emulates a Terminal environment with the Linux base system that Android is based upon.  This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described  here .",
            "title": "Introduction"
        },
        {
            "location": "/native_setup/android/#prerequisites",
            "text": "It is recommended to make yourself familiar with Termux by reading the  Wiki  to learn how the app can be used comfortably.",
            "title": "Prerequisites"
        },
        {
            "location": "/native_setup/android/#scion-app",
            "text": "Hint  The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the  manual setup  won't be necessary anymore.   To install the SCION app, please contact  Stefan Schwarz  to get an invite to the App testing group.  Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done  through the HockeyApp website  (it is not available on the Google Play Store).",
            "title": "SCION App"
        },
        {
            "location": "/native_setup/android/#install-scion-with-the-scion-app",
            "text": "Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended):  ./install  That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue.   Hint  If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder   That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB.   Warning  SCION for Android currently only supports a SCION endhost configuration, as described  in this tutorial    Warning  SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described  here",
            "title": "Install SCION with the SCION App"
        },
        {
            "location": "/native_setup/android/#manual-setup",
            "text": "To setup SCION on Android manually, the  Termux app  needs to be installed from the Google Play Store.  To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH.",
            "title": "Manual setup"
        },
        {
            "location": "/native_setup/android/#access-termux-via-ssh",
            "text": "First install the  openssh  package within Termux with  pkg install openssh , then start the server with  sshd . Password authentication is not supported, so you need to add your public key to  $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with  ssh -p 8022 DEVICE_IP . You can find the device IP address with  ip addr list wlan0 .   For more information: Run an SSH server on your Android with Termux  Access Termux via USB",
            "title": "Access Termux via SSH"
        },
        {
            "location": "/native_setup/android/#install-necessary-packages",
            "text": "Install the required packages from within Termux:  apt update   apt upgrade\npkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl  To access the SD card from Termux, it is required to run  termux-setup-storage  from the Termux console.",
            "title": "Install necessary packages"
        },
        {
            "location": "/native_setup/android/#configure-go-workspace",
            "text": "SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7   ARMv8/aarch64 architectures:  For ARMv7:  curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb\ndpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb  For aarch64:  curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb\ndpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb  Setup the Go workspace and add it to your path:  echo   export GOPATH= $HOME/go    ~/.profile source  ~/.profile\nmkdir -p  $GOPATH /bin  echo   PATH=$PATH:$GOPATH/bin    ~/.profile source  ~/.profile",
            "title": "Configure Go workspace"
        },
        {
            "location": "/native_setup/android/#install-scion",
            "text": "",
            "title": "Install SCION"
        },
        {
            "location": "/native_setup/android/#step-one-clone-the-scion-repository",
            "text": "After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands:  mkdir -p  $GOPATH /src/github.com/scionproto/scion  cd   $GOPATH /src/github.com/scionproto/scion \ngit config --global url.https://github.com/.insteadOf git@github.com:\ngit clone --recursive -b termux-modifications git@github.com:stschwar/scion .\n\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch\npatch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch\nrm lwip-contrib.patch  This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable  SC  that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:  echo   export SC= $GOPATH/src/github.com/scionproto/scion    ~/.profile source  ~/.profile cd   $SC",
            "title": "Step One &ndash; clone the SCION repository"
        },
        {
            "location": "/native_setup/android/#step-two-configure-python-path-variable",
            "text": "Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the  PYTHONPATH  environment variable needs to be exported:  echo   export PYTHONPATH= $SC/python:$SC    ~/.profile source  ~/.profile",
            "title": "Step Two &ndash; configure Python path variable"
        },
        {
            "location": "/native_setup/android/#step-three-install-required-packagespatches",
            "text": "SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually.",
            "title": "Step Three &ndash; install required packages/patches"
        },
        {
            "location": "/native_setup/android/#capn-proto",
            "text": "To install  Cap'n Proto  in Termux run the following commands in the  home/  directory:  curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz\ntar zxf capnproto-c++-0.6.1.tar.gz cd  capnproto-c++-0.6.1  On Termux Cap'n Proto requires some patching to compile:  cd  src/kj/\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch\npatch debug.c++ debug.c++.patch\nrm debug.c++.patch  Back in the  capnproto-c++-0.6.1/  root directory run:  ./configure --prefix = $PREFIX   TMPDIR = $PREFIX /tmp\nmake \nmake install",
            "title": "Cap'n Proto"
        },
        {
            "location": "/native_setup/android/#zlog",
            "text": "Install  zlog  by following its install instructions mostly. It requires some more patching and the installation of  libandroid-glob-dev :  curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz\ntar -zxf zlog-latest-stable.tar.gz cd  zlog-latest-stable/\ncurl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch\npatch src/makefile zlog-makefile.patch\nrm zlog-makefile.patch\n\npkg install -y libandroid-glob-dev\nmake  PREFIX = $PREFIX \nmake  PREFIX = $PREFIX  install",
            "title": "zlog"
        },
        {
            "location": "/native_setup/android/#uthash",
            "text": "Install the  uthash  library from your  home/  directory:  curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master\nunzip uthash-master.zip\ncp uthash-master/src/*.h  $PREFIX /include\nrm -rf uthash-master/",
            "title": "uthash"
        },
        {
            "location": "/native_setup/android/#scion-python-dependencies",
            "text": "Most of the Python dependencies can easily be installed through  pip :  cd   $SC \npip2 install -r env/pip2/requirements.txt\npip3 install -r env/pip3/requirements.txt TMPDIR = $PREFIX /tmp pip3 install lz4 PyNaCl PyYAML Pygments   Supervisor  In case the pip installation of the package \"Supervisor\" fails, you can install it manually:   curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz\ntar -xzf supervisor-3.3.4.tar.gz cd  supervisor-3.3.4/\npython2 setup.py install",
            "title": "SCION Python dependencies"
        },
        {
            "location": "/native_setup/android/#scion-go-dependencies",
            "text": "With Go correctly installed it is easy to install the SCION dependencies as well:  cd   $SC /env/go\n./deps",
            "title": "SCION Go dependencies"
        },
        {
            "location": "/native_setup/android/#next-steps",
            "text": "After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:   Running a local network topology    Generate a sample topology and run SCION locally  Connecting to SCIONLab as an endhost    Connect to the already running SCION topology as a mobile endhost through an existing SCION setup.",
            "title": "Next steps"
        },
        {
            "location": "/native_setup/android/#changes-to-gen-folder",
            "text": "Note that in  gen/ISDx/AS10xx/supervisord.conf  the path of the SCION Deamon socket needs to be changed as follows:  \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" .",
            "title": "Changes to gen folder"
        },
        {
            "location": "/native_setup/android/#vpn-connection-to-scionlab",
            "text": "Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the  Open\nVPN app  can be installed to connect to SCIONLab via VPN. The  client.conf  file that is provided by the  SCIONLab coordinator  needs to be renamed to  client.ovpn  before it can be imported into the app. Additionally, the line  route 10.0.8.0/24  needs to be added to the file.",
            "title": "VPN Connection to SCIONLab"
        },
        {
            "location": "/native_setup/android/#endhost-configuration-vs-full-as",
            "text": "It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage.  If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.",
            "title": "Endhost configuration vs. full AS"
        },
        {
            "location": "/general_scion_configuration/local_top/",
            "text": "Running the SCION infrastructure on a local topology\n\n\nIntroduction\n\n\nThis tutorial will guide you through the steps required to generate a local topology and run a SCION network locally on your system.\n\n\nPrerequisites\n\n\nThis tutorial assumes that SCION is already installed on your system. If this is not the case, please follow \nHow to build SCION on Ubuntu 16.04 x86-64\n or \nHow to build SCION on Raspberry PI\n.\n\n\nGenerating topology\n\n\nBefore continuing with the following steps, you should first navigate to the SCION root directory:\n\n\ncd\n \n$SC\n\n\n\n\n\n\nThe SCION installation comes with a command to generate the local topology from 'topo' configuration files. A default topology is defined in \ntopology/Default.topo\n and it is depicted in the following figure:\n\n\n\n\n\n\nCreating a topology overwrites the existing installation\n\n\nWhen running the topology command deletes the current topology, which is stored in the gen folder. We thus advise to back up the current gen directory \nbefore\n calling the topology creation command.\n\n\nIn case the gen folder was accidentally overwritten, you need to re-establish it after running the local topology if you want to get back to your previous installation. In case of re-creating the SCIONLab topology running in a VM, re-establishing is easy:\n\nshell\ncd $SC\nrm -rf gen\ncp -r /vagrant/gen .\n\n\n\n\n\n\nReset runtime environment after topology changes\n\n\nEvery time a new topology is instantiated, the SCION runtime environment needs to be reset as described \nhere\n.\n\n\n\n\nTo generate the default topology, you can run\n\n\n./scion.sh topology\n\n\n\n\n\nThis command will generate the topology information in the \ngen\n directory. The structure of the \ngen\n directory will be:\n\n\n ./gen/ISD{X}/AS{Y}/\n     {elem}{X}-{Y}-{Z}/\n         as.yml\n         path_policy.yml\n         supervisord.conf\n         topology.yml\n         certs/\n             ISD{X}-AS{Y}-V0.crt\n             ISD{X}-V0.trc\n         keys/\n             as-sig.key\n\n\n\n\n\n\n\nRunning large topology\n\n\nRunning the default SCION topology \nrequires significant amount of system resources\n. This might not be possible on IoT devices like Raspberry PI or on a resource-limited virtual machine. For this reason, using a smaller topology is recommended. To generate a small topology with only a single ISD and 3 ASes, you can use the predefined definition of tiny topology as follows:\n\n\n./scion.sh topology -c topology/Tiny.topo\n\n\n\n\nSome notes about the topology definition in \ntopology/Default.topo\n\n\n\n\n\n\ndefaults.subnet\n (optional): override the default subnet of \n127.0.0.0/8\n.\n\n\n\n\n\n\ncore\n (optional): specify if this is a core AS or not (defaults to 'false').\n\n\n\n\n\n\nbeacon_servers\n, \ncertificate_servers\n, \npath_servers\n, (all optional):\n  number of such servers in a specific AS (override the default value 1).\n\n\n\n\n\n\nlinks\n: keys are \nISD_ID-AS_ID\n (format also used for the keys of the JSON\n  file itself) and values can either be \nPARENT\n, \nCHILD\n, \nPEER\n, or\n  \nCORE\n.\n\n\n\n\n\n\nRunning SCION\n\n\nRunning the SCION infrastructure:\n\n\n./scion.sh run\n\n\n\n\n\nStopping the SCION infrastructure:\n\n\n./scion.sh stop\n\n\n\n\n\nTesting the infrastructure:\n\n\n./scion.sh \ntest\n\n\n\n\n\n\nNext steps\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation\n.",
            "title": "Running SCION on a local topology"
        },
        {
            "location": "/general_scion_configuration/local_top/#running-the-scion-infrastructure-on-a-local-topology",
            "text": "",
            "title": "Running the SCION infrastructure on a local topology"
        },
        {
            "location": "/general_scion_configuration/local_top/#introduction",
            "text": "This tutorial will guide you through the steps required to generate a local topology and run a SCION network locally on your system.",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/local_top/#prerequisites",
            "text": "This tutorial assumes that SCION is already installed on your system. If this is not the case, please follow  How to build SCION on Ubuntu 16.04 x86-64  or  How to build SCION on Raspberry PI .",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/local_top/#generating-topology",
            "text": "Before continuing with the following steps, you should first navigate to the SCION root directory:  cd   $SC   The SCION installation comes with a command to generate the local topology from 'topo' configuration files. A default topology is defined in  topology/Default.topo  and it is depicted in the following figure:    Creating a topology overwrites the existing installation  When running the topology command deletes the current topology, which is stored in the gen folder. We thus advise to back up the current gen directory  before  calling the topology creation command.  In case the gen folder was accidentally overwritten, you need to re-establish it after running the local topology if you want to get back to your previous installation. In case of re-creating the SCIONLab topology running in a VM, re-establishing is easy: shell\ncd $SC\nrm -rf gen\ncp -r /vagrant/gen .    Reset runtime environment after topology changes  Every time a new topology is instantiated, the SCION runtime environment needs to be reset as described  here .   To generate the default topology, you can run  ./scion.sh topology  This command will generate the topology information in the  gen  directory. The structure of the  gen  directory will be:   ./gen/ISD{X}/AS{Y}/\n     {elem}{X}-{Y}-{Z}/\n         as.yml\n         path_policy.yml\n         supervisord.conf\n         topology.yml\n         certs/\n             ISD{X}-AS{Y}-V0.crt\n             ISD{X}-V0.trc\n         keys/\n             as-sig.key   Running large topology  Running the default SCION topology  requires significant amount of system resources . This might not be possible on IoT devices like Raspberry PI or on a resource-limited virtual machine. For this reason, using a smaller topology is recommended. To generate a small topology with only a single ISD and 3 ASes, you can use the predefined definition of tiny topology as follows:  ./scion.sh topology -c topology/Tiny.topo   Some notes about the topology definition in  topology/Default.topo    defaults.subnet  (optional): override the default subnet of  127.0.0.0/8 .    core  (optional): specify if this is a core AS or not (defaults to 'false').    beacon_servers ,  certificate_servers ,  path_servers , (all optional):\n  number of such servers in a specific AS (override the default value 1).    links : keys are  ISD_ID-AS_ID  (format also used for the keys of the JSON\n  file itself) and values can either be  PARENT ,  CHILD ,  PEER , or\n   CORE .",
            "title": "Generating topology"
        },
        {
            "location": "/general_scion_configuration/local_top/#running-scion",
            "text": "Running the SCION infrastructure:  ./scion.sh run  Stopping the SCION infrastructure:  ./scion.sh stop  Testing the infrastructure:  ./scion.sh  test",
            "title": "Running SCION"
        },
        {
            "location": "/general_scion_configuration/local_top/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation .",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/public_ip/",
            "text": "Connecting to SCIONLab with a static public IP address\n\n\n\n\nNote\n\n\nThis page needs to be updated. Use with care.\n\n\n\n\nIntroduction\n\n\nThis tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network.\n\n\nFor the purpose of this tutorial, we assume that you \nhave\n a static public IP address and that your machine can receive UDP traffic from the Internet on port 50000. If this is not the case, please follow \nConnecting to SCION Lab over OpenVPN\n\n\n\n\nHint\n\n\nSometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the \nOpenVPN connection tutorial\n.\n\n\n\n\nPrerequisites\n\n\nIn order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to \nrun a local topology\n.\n\n\n\n\nHint\n\n\nIf you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.\n\n\n\n\nStep One - downloading SCION Lab configuration\n\n\nIn order to download necessary configuration you must login to \nSCION Coordination Service\n. In case you don't yet have an account, follow the registration process.\n\n\n\n\nSince the current version of the \nCoordination Service\n only generates VM configuration scripts, we will use them in the following steps to configure running a SCION infrastructure on a native system.\n\n\n\n\nAfter logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on \nCreate and Download SCIONLab VM Configuration\n as presented in the image below:\n\n\n\n\nNavigate to the download directory and extract the archived content:\n\n\ncd\n ~/Downloads\ntar -xvzf scion_lab_\nuser_email\n.tar.gz\n\ncd\n \nuser_email\n\n\n\n\n\n\nThe extracted content should have the following file structure:\n\n\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\n\nFor the purpose of this tutorial we will just need the directory \ngen\n, which contains the SCION infrastructure configuration.\n\n\nStep Two - copying SCION Lab configuration\n\n\nBefore copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.\n\n\nrm -rf \n$SC\n/gen\n\n\n\n\n\nCopy new configuration and navigate to SCION root directory:\n\n\ncp -r gen \n$SC\n/\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Three - Restarting SCION infrastructure\n\n\nAfter the new configuration is copied, you need to restart the infrastructure in the following way:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation\n.",
            "title": "Set up an AS and connect to the SCION network"
        },
        {
            "location": "/general_scion_configuration/public_ip/#connecting-to-scionlab-with-a-static-public-ip-address",
            "text": "Note  This page needs to be updated. Use with care.",
            "title": "Connecting to SCIONLab with a static public IP address"
        },
        {
            "location": "/general_scion_configuration/public_ip/#introduction",
            "text": "This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network.  For the purpose of this tutorial, we assume that you  have  a static public IP address and that your machine can receive UDP traffic from the Internet on port 50000. If this is not the case, please follow  Connecting to SCION Lab over OpenVPN   Hint  Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the  OpenVPN connection tutorial .",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/public_ip/#prerequisites",
            "text": "In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to  run a local topology .   Hint  If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/public_ip/#step-one-downloading-scion-lab-configuration",
            "text": "In order to download necessary configuration you must login to  SCION Coordination Service . In case you don't yet have an account, follow the registration process.   Since the current version of the  Coordination Service  only generates VM configuration scripts, we will use them in the following steps to configure running a SCION infrastructure on a native system.   After logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on  Create and Download SCIONLab VM Configuration  as presented in the image below:   Navigate to the download directory and extract the archived content:  cd  ~/Downloads\ntar -xvzf scion_lab_ user_email .tar.gz cd   user_email   The extracted content should have the following file structure:  \u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile  For the purpose of this tutorial we will just need the directory  gen , which contains the SCION infrastructure configuration.",
            "title": "Step One - downloading SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/public_ip/#step-two-copying-scion-lab-configuration",
            "text": "Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.  rm -rf  $SC /gen  Copy new configuration and navigate to SCION root directory:  cp -r gen  $SC / cd   $SC",
            "title": "Step Two - copying SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/public_ip/#step-three-restarting-scion-infrastructure",
            "text": "After the new configuration is copied, you need to restart the infrastructure in the following way:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Step Three - Restarting SCION infrastructure"
        },
        {
            "location": "/general_scion_configuration/public_ip/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation .",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/",
            "text": "Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a Network Address Translation (NAT) device\n\n\nIntroduction\n\n\nThe machine should be set up as described in the \ntutorial of the host with a public IP address\n. Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made.\n\n\n\n\nHint\n\n\nSometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the \nOpenVPN connection tutorial\n.\n\n\n\n\nSetup\n\n\nThe first step is to find out the internal IP address of your host, as well as the external IP address outside the NAT.\n\n\nSeveral web sites offer a service that displays the external IP address of a host, for instance \nwhatismyip\n. You will need to provide the displayed IPv4 address on the SCIONLab web site in the second step.\n\n\nThe internal IPv4 address can be found with \nifconfig\n and spotting the address of the main network connection.\n\n\nThe second step is to complete Steps 1 and 2 of the installation of the basic system as explained in the earlier \ntutorial of the host with a public IP address\n, using the external IP address found in the previous step.\n\n\nThe third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the \ntopology.json\n file in your gen folder, for instance at this location: \ngen/ISD1/AS1026/br1-1026-1/\n, adjusting the ISD and AS numbers to your case. In that file, search for the term \nRemote\n, which specifies the IP address and UDP port from which the connecting packets originate.\n\n\n\n\nHint\n\n\nSome networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device).\n\n\n\n\nThe fourth step re-maps the IP address of the SCION infrastructure devices to the internal address of your host.\n\n\nFor this, you can execute the following three commands from your main SCION directory (\ncd $SC\n to get there), replacing \n192.168.1.111\n with the internal IPv4 address of your host:\n\n\nexport\n \nHOST_IP\n=\n192.168.1.111\nfind ./gen/ -name \n*.json\n -exec sed -i \ns/10.0.2.15/\n${\nHOST_IP\n}\n/g\n \n{}\n \n\\;\n\nfind ./gen/ -name \n*.yml\n -exec sed -i \ns/10.0.2.15/\n${\nHOST_IP\n}\n/g\n \n{}\n \n\\;\n\nfind ./gen/ -name \n*.conf\n -exec sed -i \ns/10.0.2.15/\n${\nHOST_IP\n}\n/g\n \n{}\n \n\\;\n\n\n\n\n\n\nThis completes the installation! You can restart the infrastructure in the following way:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation\n.",
            "title": "Set up an AS and connect to the SCION network behind a NAT"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#connecting-to-scionlab-where-the-network-has-a-static-public-ip-address-but-the-machine-itself-is-behind-a-network-address-translation-nat-device",
            "text": "",
            "title": "Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a Network Address Translation (NAT) device"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#introduction",
            "text": "The machine should be set up as described in the  tutorial of the host with a public IP address . Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made.   Hint  Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the  OpenVPN connection tutorial .",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#setup",
            "text": "The first step is to find out the internal IP address of your host, as well as the external IP address outside the NAT.  Several web sites offer a service that displays the external IP address of a host, for instance  whatismyip . You will need to provide the displayed IPv4 address on the SCIONLab web site in the second step.  The internal IPv4 address can be found with  ifconfig  and spotting the address of the main network connection.  The second step is to complete Steps 1 and 2 of the installation of the basic system as explained in the earlier  tutorial of the host with a public IP address , using the external IP address found in the previous step.  The third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the  topology.json  file in your gen folder, for instance at this location:  gen/ISD1/AS1026/br1-1026-1/ , adjusting the ISD and AS numbers to your case. In that file, search for the term  Remote , which specifies the IP address and UDP port from which the connecting packets originate.   Hint  Some networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device).   The fourth step re-maps the IP address of the SCION infrastructure devices to the internal address of your host.  For this, you can execute the following three commands from your main SCION directory ( cd $SC  to get there), replacing  192.168.1.111  with the internal IPv4 address of your host:  export   HOST_IP = 192.168.1.111\nfind ./gen/ -name  *.json  -exec sed -i  s/10.0.2.15/ ${ HOST_IP } /g   {}   \\; \nfind ./gen/ -name  *.yml  -exec sed -i  s/10.0.2.15/ ${ HOST_IP } /g   {}   \\; \nfind ./gen/ -name  *.conf  -exec sed -i  s/10.0.2.15/ ${ HOST_IP } /g   {}   \\;   This completes the installation! You can restart the infrastructure in the following way:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Setup"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation .",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/",
            "text": "Connecting to SCIONLab via VPN\n\n\n\n\nNote\n\n\nThis page needs to be updated. Use with care.\n\n\n\n\nIntroduction\n\n\nThis tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network.\n\n\nFor the purpose of this tutorial, we assume that you do not have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from the Internet. If this is not the case, you should consider the tutorial \nConnecting to SCION Lab with public IP\n or \nConnecting to SCION Lab with public IP behind a NAT\n.\n\n\nPrerequisites\n\n\nIn order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to \nrun a local topology\n.\n\n\n\n\nHint\n\n\nIf you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.\n\n\n\n\nStep One - installing OpenVPN\n\n\nIn order to circumvent the problem of not having a publicly accessible IP address, we create an OpenVPN tunnel to carry the SCION traffic between the two SCION border routers.\n\n\nIn order to install the openvpn client, you can simply run:\n\n\nsudo apt install openvpn\n\n\n\n\n\nStep Two - downloading SCION Lab configuration\n\n\nIn order to download the necessary configuration you must login to \nSCION Coordination Service\n. In case you don't yet have an account, follow the registration process.\n\n\n\n\nSince the current version of the \nCoordination Service\n only generates VM configuration scripts, we will use them in the following steps to configure the running SCION infrastructure.\n\n\n\n\nAfter logging in, download a VM configuration by clicking on \nCreate and Download SCIONLab VM Configuration\n as presented in the image below:\n\n\n\n\nNavigate to the download directory and extract the archive content:\n\n\ncd\n ~/Downloads\ntar -vxzf scion_lab_\nuser_email\n.tar.gz\n\ncd\n \nuser_email\n\n\n\n\n\n\nThe extracted content should have the following file structure:\n\n\n\u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\n\nFor the purpose of this tutorial we will just need:\n\n\n\n\nfile \nclient.conf\n - client OpenVPN configuration\n\n\ndirectory \ngen\n - SCION infrastructure configuration\n\n\n\n\nStep Three - Connecting to OpenVPN server\n\n\nAdding the OpenVPN configuration is accomplished by copying files to the openvpn directory:\n\n\nsudo cp client.conf /etc/openvpn\nsudo chmod \n600\n /etc/openvpn/client.conf\n\n\n\n\n\nNext, we need to automatically launch the OpenVPN service on startup of the system:\n\n\nsystemctl start openvpn@client\nsystemctl \nenable\n openvpn@client\n\n\n\n\n\nAfter this, you should verify that new \ntun\n interface is added. The command:\n\n\nip a\n\n\n\n\n\nshould display the newly added interface, in this case \ntun0\n as in this example:\n\n\n9\n:\n \ntun0\n:\n \nPOINTOPOINT\n,\nMULTICAST\n,\nNOARP\n,\nUP\n,\nLOWER_UP\n \nmtu\n \n1500\n \nqdisc\n \npfifo_fast\n \nstate\n \nUNKNOWN\n \ngroup\n \ndefault\n \nqlen\n \n100\n\n    \nlink\n/\nnone\n \n    \ninet\n \n10.0\n.\n8.40\n/\n24\n \nbrd\n \n10.0\n.\n8.255\n \nscope\n \nglobal\n \ntun0\n\n       \nvalid_lft\n \nforever\n \npreferred_lft\n \nforever\n\n    \ninet6\n \nfe80\n::\n2337\n:\na0c4\n:\n7\nfa7\n:\n78\nb3\n/\n64\n \nscope\n \nlink\n \nflags\n \n800\n \n       \nvalid_lft\n \nforever\n \npreferred_lft\n \nforever\n\n\n\n\n\n\nIn this case, the client's OpenVPN IP address is: \n10.0.8.40\n.\n\n\nStep Four - copying SCION Lab configuration\n\n\nBefore copying the new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.\n\n\nrm -rf \n$SC\n/gen\n\n\n\n\n\nCopy new configuration and navigate to SCION root directory:\n\n\ncp -r gen \n$SC\n/\n\ncd\n \n$SC\n\n\n\n\n\n\nBecause the \ngen\n directory downloaded from the Coordination Service is customized for VM IP addresses (\n10.0.2.15\n), we need to replace every occurrence of that IP with the actual IP address of our system.\n\n\nFinding out the actual IP address of our system can be done by running the following command:\n\n\nip a\n\n\n\n\n\nand using the IP address of the appropriate physical interface that is used for connecting to the network. \n\n\nIn following steps we will assume that IP address is \n10.42.0.180\n, but you should replace it accordingly with value acquired in the previous step.\n\n\nfind ./gen/ -name \n*.json\n -exec sed -i \ns/10.0.2.15/10.42.0.180/g\n \n{}\n \n\\;\n\nfind ./gen/ -name \n*.yml\n -exec sed -i \ns/10.0.2.15/10.42.0.180/g\n \n{}\n \n\\;\n\nfind ./gen/ -name \n*.conf\n -exec sed -i \ns/10.0.2.15/10.42.0.180/g\n \n{}\n \n\\;\n\n\n\n\n\n\nStep Five - Restarting SCION Infrastructure\n\n\nAfter the OpenVPN connection is established and the new configuration is copied, you need to restart the infrastructure as follows:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation\n.",
            "title": "Set up an AS and connect to the SCION network via VPN"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#connecting-to-scionlab-via-vpn",
            "text": "Note  This page needs to be updated. Use with care.",
            "title": "Connecting to SCIONLab via VPN"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#introduction",
            "text": "This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network.  For the purpose of this tutorial, we assume that you do not have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from the Internet. If this is not the case, you should consider the tutorial  Connecting to SCION Lab with public IP  or  Connecting to SCION Lab with public IP behind a NAT .",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#prerequisites",
            "text": "In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to  run a local topology .   Hint  If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-one-installing-openvpn",
            "text": "In order to circumvent the problem of not having a publicly accessible IP address, we create an OpenVPN tunnel to carry the SCION traffic between the two SCION border routers.  In order to install the openvpn client, you can simply run:  sudo apt install openvpn",
            "title": "Step One - installing OpenVPN"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-two-downloading-scion-lab-configuration",
            "text": "In order to download the necessary configuration you must login to  SCION Coordination Service . In case you don't yet have an account, follow the registration process.   Since the current version of the  Coordination Service  only generates VM configuration scripts, we will use them in the following steps to configure the running SCION infrastructure.   After logging in, download a VM configuration by clicking on  Create and Download SCIONLab VM Configuration  as presented in the image below:   Navigate to the download directory and extract the archive content:  cd  ~/Downloads\ntar -vxzf scion_lab_ user_email .tar.gz cd   user_email   The extracted content should have the following file structure:  \u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile  For the purpose of this tutorial we will just need:   file  client.conf  - client OpenVPN configuration  directory  gen  - SCION infrastructure configuration",
            "title": "Step Two - downloading SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-three-connecting-to-openvpn-server",
            "text": "Adding the OpenVPN configuration is accomplished by copying files to the openvpn directory:  sudo cp client.conf /etc/openvpn\nsudo chmod  600  /etc/openvpn/client.conf  Next, we need to automatically launch the OpenVPN service on startup of the system:  systemctl start openvpn@client\nsystemctl  enable  openvpn@client  After this, you should verify that new  tun  interface is added. The command:  ip a  should display the newly added interface, in this case  tun0  as in this example:  9 :   tun0 :   POINTOPOINT , MULTICAST , NOARP , UP , LOWER_UP   mtu   1500   qdisc   pfifo_fast   state   UNKNOWN   group   default   qlen   100 \n     link / none  \n     inet   10.0 . 8.40 / 24   brd   10.0 . 8.255   scope   global   tun0 \n        valid_lft   forever   preferred_lft   forever \n     inet6   fe80 :: 2337 : a0c4 : 7 fa7 : 78 b3 / 64   scope   link   flags   800  \n        valid_lft   forever   preferred_lft   forever   In this case, the client's OpenVPN IP address is:  10.0.8.40 .",
            "title": "Step Three - Connecting to OpenVPN server"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-four-copying-scion-lab-configuration",
            "text": "Before copying the new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.  rm -rf  $SC /gen  Copy new configuration and navigate to SCION root directory:  cp -r gen  $SC / cd   $SC   Because the  gen  directory downloaded from the Coordination Service is customized for VM IP addresses ( 10.0.2.15 ), we need to replace every occurrence of that IP with the actual IP address of our system.  Finding out the actual IP address of our system can be done by running the following command:  ip a  and using the IP address of the appropriate physical interface that is used for connecting to the network.   In following steps we will assume that IP address is  10.42.0.180 , but you should replace it accordingly with value acquired in the previous step.  find ./gen/ -name  *.json  -exec sed -i  s/10.0.2.15/10.42.0.180/g   {}   \\; \nfind ./gen/ -name  *.yml  -exec sed -i  s/10.0.2.15/10.42.0.180/g   {}   \\; \nfind ./gen/ -name  *.conf  -exec sed -i  s/10.0.2.15/10.42.0.180/g   {}   \\;",
            "title": "Step Four - copying SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-five-restarting-scion-infrastructure",
            "text": "After the OpenVPN connection is established and the new configuration is copied, you need to restart the infrastructure as follows:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Step Five - Restarting SCION Infrastructure"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation .",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/",
            "text": "Set up SCION endhost and connect to local AS infrastructure\n\n\nIntroduction\n\n\nIn this tutorial we will cover the steps necessary to configure a SCION endhost that will connect to an already running SCION AS. \nThis is useful in situations where your host can take advantage of an existing local SCION infrastructure.\n\n\nDepending on how the SCION AS is set up, the steps for configuring the endhost will slightly differ.\n\n\nRunning AS infrastructure executes in a VM\n\n\nIn the first way, the SCION AS runs inside a virtual machine (VM). The following figure depicts this scenario.\n\n\n\n\nThe installation steps of the AS are covered in the following tutorials:\n\n\n\n\nRunning SCION VM with dynamic IP\n\n\nRunning SCION VM with static IP\n\n\n\n\nRunning AS infrastructure natively on a system\n\n\nIn the second way, the SCION AS is executing natively on a host machine. The following figure depicts this scenario.\n\n\n\n\nThe installation steps for this setup is described in the following tutorial pages:\n\n\n\n\nInstalling SCION on Ubuntu 16.04 x86 machine\n\n\nInstalling SCION on Ubuntu MATE 16.04 - Raspberry PI\n\n\nConfiguring AS and connecting to SCION network for devices with public static IP\n\n\nConfiguring AS and connecting to SCION network for devices with public static IP behind a NAT\n\n\nConfiguring AS and connecting to SCION network using OpenVPN\n\n\n\n\nPrerequisites\n\n\nThroughout this setup we will use host and endhost IP addresses on both machines. In order to make everything easier to follow it is necessary to create two environment variables \nHOST_IP\n and \nENDHOST_IP\n with respective addresses on \nboth machines\n as they will be used throughout this setup. Execute following commands replacing correct IP addresses with correct ones:\n\n\nexport\n \nHOST_IP\n=\n10.42.0.1\n\n\nexport\n \nENDHOST_IP\n=\n10.42.0.180\n\n\n\n\n\n\nStep One - Installing SCION on endhost\n\n\nAny platform that runs SCION can be used as an endhost. To install SCION on different platforms you can follow one of the tutorials:\n\n\n\n\nInstalling SCION on Ubuntu 16.04 x86 machine\n\n\nInstalling SCION on Ubuntu MATE 16.04 - Raspberry PI\n\n\n\n\nAlso, SCION VMs can be configured to be used as endhost.\n\n\nStep Two - Copy initial configuration\n\n\nAfter the SCION environment is successfully installed on your endhost device, we can start the configuration process. First of all, we need to stop the currently running SCION environment and remove the old \ngen\n directory.\n\n\ncd\n \n$SC\n\n./scion.sh stop\nrm -rf gen\n\n\n\n\n\nThe next step is to make sure both endhost and SCION AS share the same AS configuration, i.e., the same \ngen\n directory. This can be done in several ways, but the easiest is to copy it directly from the AS system. \n\n\nExecuting the following command from \nSCION AS\n copies the complete \ngen\n directory to endhost. Note that you will need to replace \nendhost_user\n with appropriate user name on the endhost.\n\n\nscp -r \n${\nSC\n}\n/gen endhost_user@\n${\nENDHOST_IP\n}\n:/home/endhost_user/go/src/github.com/scionproto/scion/gen\n\n\n\n\n\nStep Three - Remove unnecessary services\n\n\nThe next step is to disable unnecessary SCION services, like the border router, beacon server, etc., on the endhost device. This can be done by editing configuration file on the \nendhost's system\n:\n\n\nvim \n$\nSC\n/gen/ISD\n{\nISD_NUMBER}/AS\n{\nAS_NUMBER}/supervisord.conf\n\n\n\n\n\n\nIt is sufficient to remove last 2 lines that look similar to this:\n\n\n[group:as1-1029]\n\n\nprograms\n \n=\n \nbr1-1029-1,bs1-1029-1,cs1-1029-1,ps1-1029-1,sd1-1029\n\n\n\n\n\n\nIn the same file edit following line:\n\n\ncommand = bash -c \nexec bin/sciond \n--api-addr\n \n/run/shm/sciond/....\n\n\n\n\n\nBy adding additional \naddr\n argument to look like this:\n\n\ncommand = bash -c \nexec bin/sciond \n--addr\n \n10.42.0.180\n \n--api-addr\n \n/run/shm/sciond/\n\n\n\n\n\nMake sure you replace \n10.42.0.180\n to correct endhost's IP address.\n\n\nNext we need to remove all directories except \nendhost\n from \n$SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/\n directory. \n\n\ncd\n \n$SC\n/gen/ISD\n{\nISD_NUMBER\n}\n/AS\n{\nAS_NUMBER\n}\n\nrm -rf *-*\n\n\n\n\n\nStep Four - Iptable rules\n\n\n\n\nWarning\n\n\nThis step is only necessary if you are running the AS SCION infrastructure inside a Virtual Machine\n. If this is not the case, proceed to step five.\n\n\n\n\nConfiguration files we copied from VM in first step contain address \n10.0.2.15\n. This address is not accessible outside the VM and we need to rewrite it to the host's IP address, so that packets get routed correctly. This can be done with iptables.\n\n\nsudo apt install netfilter-persistent iptables-persistent\n\nsudo iptables -t nat -A OUTPUT -m udp -p udp -d 10.0.2.15 -j DNAT --to-destination \n${\nHOST_IP\n}\n\n\nsudo netfilter-persistent save\n\n\n\n\n\nStep Five - Restart SCION\n\n\nLast step is to reload configuration and restart SCION on your endhost system.\n\n\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\n\nThe best way to verify endhost configuration is by running properly is by running some demo applications:\n\n\n\n\nFetching sensor readings or time stamps\n\n\nFetching a camera image over the SCION network\n\n\nRunning the bandwidthtester application",
            "title": "Set up SCION endhost and connect to local AS"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#set-up-scion-endhost-and-connect-to-local-as-infrastructure",
            "text": "",
            "title": "Set up SCION endhost and connect to local AS infrastructure"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#introduction",
            "text": "In this tutorial we will cover the steps necessary to configure a SCION endhost that will connect to an already running SCION AS. \nThis is useful in situations where your host can take advantage of an existing local SCION infrastructure.  Depending on how the SCION AS is set up, the steps for configuring the endhost will slightly differ.",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#running-as-infrastructure-executes-in-a-vm",
            "text": "In the first way, the SCION AS runs inside a virtual machine (VM). The following figure depicts this scenario.   The installation steps of the AS are covered in the following tutorials:   Running SCION VM with dynamic IP  Running SCION VM with static IP",
            "title": "Running AS infrastructure executes in a VM"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#running-as-infrastructure-natively-on-a-system",
            "text": "In the second way, the SCION AS is executing natively on a host machine. The following figure depicts this scenario.   The installation steps for this setup is described in the following tutorial pages:   Installing SCION on Ubuntu 16.04 x86 machine  Installing SCION on Ubuntu MATE 16.04 - Raspberry PI  Configuring AS and connecting to SCION network for devices with public static IP  Configuring AS and connecting to SCION network for devices with public static IP behind a NAT  Configuring AS and connecting to SCION network using OpenVPN",
            "title": "Running AS infrastructure natively on a system"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#prerequisites",
            "text": "Throughout this setup we will use host and endhost IP addresses on both machines. In order to make everything easier to follow it is necessary to create two environment variables  HOST_IP  and  ENDHOST_IP  with respective addresses on  both machines  as they will be used throughout this setup. Execute following commands replacing correct IP addresses with correct ones:  export   HOST_IP = 10.42.0.1  export   ENDHOST_IP = 10.42.0.180",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#step-one-installing-scion-on-endhost",
            "text": "Any platform that runs SCION can be used as an endhost. To install SCION on different platforms you can follow one of the tutorials:   Installing SCION on Ubuntu 16.04 x86 machine  Installing SCION on Ubuntu MATE 16.04 - Raspberry PI   Also, SCION VMs can be configured to be used as endhost.",
            "title": "Step One - Installing SCION on endhost"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#step-two-copy-initial-configuration",
            "text": "After the SCION environment is successfully installed on your endhost device, we can start the configuration process. First of all, we need to stop the currently running SCION environment and remove the old  gen  directory.  cd   $SC \n./scion.sh stop\nrm -rf gen  The next step is to make sure both endhost and SCION AS share the same AS configuration, i.e., the same  gen  directory. This can be done in several ways, but the easiest is to copy it directly from the AS system.   Executing the following command from  SCION AS  copies the complete  gen  directory to endhost. Note that you will need to replace  endhost_user  with appropriate user name on the endhost.  scp -r  ${ SC } /gen endhost_user@ ${ ENDHOST_IP } :/home/endhost_user/go/src/github.com/scionproto/scion/gen",
            "title": "Step Two - Copy initial configuration"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#step-three-remove-unnecessary-services",
            "text": "The next step is to disable unnecessary SCION services, like the border router, beacon server, etc., on the endhost device. This can be done by editing configuration file on the  endhost's system :  vim  $ SC /gen/ISD { ISD_NUMBER}/AS { AS_NUMBER}/supervisord.conf   It is sufficient to remove last 2 lines that look similar to this:  [group:as1-1029]  programs   =   br1-1029-1,bs1-1029-1,cs1-1029-1,ps1-1029-1,sd1-1029   In the same file edit following line:  command = bash -c  exec bin/sciond  --api-addr   /run/shm/sciond/....  By adding additional  addr  argument to look like this:  command = bash -c  exec bin/sciond  --addr   10.42.0.180   --api-addr   /run/shm/sciond/  Make sure you replace  10.42.0.180  to correct endhost's IP address.  Next we need to remove all directories except  endhost  from  $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/  directory.   cd   $SC /gen/ISD { ISD_NUMBER } /AS { AS_NUMBER } \nrm -rf *-*",
            "title": "Step Three - Remove unnecessary services"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#step-four-iptable-rules",
            "text": "Warning  This step is only necessary if you are running the AS SCION infrastructure inside a Virtual Machine . If this is not the case, proceed to step five.   Configuration files we copied from VM in first step contain address  10.0.2.15 . This address is not accessible outside the VM and we need to rewrite it to the host's IP address, so that packets get routed correctly. This can be done with iptables.  sudo apt install netfilter-persistent iptables-persistent\n\nsudo iptables -t nat -A OUTPUT -m udp -p udp -d 10.0.2.15 -j DNAT --to-destination  ${ HOST_IP } \n\nsudo netfilter-persistent save",
            "title": "Step Four - Iptable rules"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#step-five-restart-scion",
            "text": "Last step is to reload configuration and restart SCION on your endhost system.  ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Step Five - Restart SCION"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#next-steps",
            "text": "The best way to verify endhost configuration is by running properly is by running some demo applications:   Fetching sensor readings or time stamps  Fetching a camera image over the SCION network  Running the bandwidthtester application",
            "title": "Next steps"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/",
            "text": "Read sensor readings over SCION network\n\n\nThe \nsensorapp application\n contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response containing the readings.\n\n\nsensorfetcher\n\n\nTo install sensorfetcher:\n\n\ngo get github.com/perrig/scionlab/sensorapp/sensorfetcher\n\n\n\n\n\nThe \nsensorfetcher\n application sends a 0-length SCION UDP packet to the \nsensorserver\n application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try.\n\n\nTo run the \nsensorfetcher\n application, you will need to express your local host's address as a SCION address (in the format \nISD-AS,[IPv4]:port\n) and specify the address of a sensor server, for instance \n1-12,[192.33.93.173]:42003\n. The local ISD and AS number can be seen for instance from files in the logs directory: \nbr1-1006-1.log\n indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles \nISD1\n, which contains a subdirectory \nAS1006\n. The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port.\n\n\nSome sample servers are at:\n\n\n\n\n1-12,[192.33.93.173]:42003\n\n\n1-1019,[192.168.1.111]:42003\n\n\n\n\nTheir readings can be fetched as follows (need to replace client address with actual client address, with an arbitrary free port):\n\n\nsensorfetcher -s 1-12,\n[\n192.33.93.173\n]\n:42003 -c 1-1006,\n[\n10.0.2.15\n]\n:42001\n\n\n\n\n\nsensorserver\n\n\nTo install sensorserver:\n\n\ngo get github.com/perrig/scionlab/sensorapp/sensorserver\n\n\n\n\n\nWe use sensors from Tinkerforge, and the \nsensorreader.py\n Python application fetches the sensor values and writes them to \nstdout\n. The \nsensorserver\n application collects the readings, and serves them as a string to client requests. To start, we use the following command:\n\n\npython3 \n${\nGOPATH\n}\n/src/github.com/perrig/scionlab/sensorapp/sensorserver/sensorreader.py \n|\n sensorserver -s 1-12,\n[\n192.33.93.173\n]\n:42003 \n\n\n\n\n\n\nIf you do not have any sensor information available, then you can use a simple time application that reports the current time on your system:\n\n\npython3 \n${\nGOPATH\n}\n/src/github.com/perrig/scionlab/sensorapp/sensorserver/timereader.py \n|\n sensorserver -s 1-12,\n[\n192.33.93.173\n]\n:42003",
            "title": "Read a temperature sensor over the SCION network"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/#read-sensor-readings-over-scion-network",
            "text": "The  sensorapp application  contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response containing the readings.",
            "title": "Read sensor readings over SCION network"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/#sensorfetcher",
            "text": "To install sensorfetcher:  go get github.com/perrig/scionlab/sensorapp/sensorfetcher  The  sensorfetcher  application sends a 0-length SCION UDP packet to the  sensorserver  application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try.  To run the  sensorfetcher  application, you will need to express your local host's address as a SCION address (in the format  ISD-AS,[IPv4]:port ) and specify the address of a sensor server, for instance  1-12,[192.33.93.173]:42003 . The local ISD and AS number can be seen for instance from files in the logs directory:  br1-1006-1.log  indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles  ISD1 , which contains a subdirectory  AS1006 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port.  Some sample servers are at:   1-12,[192.33.93.173]:42003  1-1019,[192.168.1.111]:42003   Their readings can be fetched as follows (need to replace client address with actual client address, with an arbitrary free port):  sensorfetcher -s 1-12, [ 192.33.93.173 ] :42003 -c 1-1006, [ 10.0.2.15 ] :42001",
            "title": "sensorfetcher"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/#sensorserver",
            "text": "To install sensorserver:  go get github.com/perrig/scionlab/sensorapp/sensorserver  We use sensors from Tinkerforge, and the  sensorreader.py  Python application fetches the sensor values and writes them to  stdout . The  sensorserver  application collects the readings, and serves them as a string to client requests. To start, we use the following command:  python3  ${ GOPATH } /src/github.com/perrig/scionlab/sensorapp/sensorserver/sensorreader.py  |  sensorserver -s 1-12, [ 192.33.93.173 ] :42003    If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system:  python3  ${ GOPATH } /src/github.com/perrig/scionlab/sensorapp/sensorserver/timereader.py  |  sensorserver -s 1-12, [ 192.33.93.173 ] :42003",
            "title": "sensorserver"
        },
        {
            "location": "/sample_projects/access_camera/",
            "text": "Access camera images over SCION network\n\n\nThe \ncamerapp application\n contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the \nREADME.md\n.\n\n\nimagefetcher\n\n\nTo install imagefetcher:\n\n\ngo get github.com/perrig/scionlab/camerapp/imagefetcher\n\n\n\n\n\nTo use the image fetcher, you will need to pass your local host's address as a SCION address (in the format \nISD-AS,[IPv4]:port\n) and specify the address of an image server, for instance \n1-12,[192.33.93.166]:42002\n. The local ISD and AS number can be seen for instance from files in the logs directory: \nbr1-1006-1.log\n indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles \nISD1\n, which contains a subdirectory \nAS1006\n. The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port.\n\n\nA sample image server that can be contacted by any client is set up at \n1-12,[192.33.93.166]:42002\n.\n\n\nThe client address is passed with \n-c\n and the server address with \n-s\n:\n\n\nimagefetcher -s 1-12,\n[\n192.33.93.166\n]\n:42002 -c 1-1006,\n[\n10.0.2.15\n]\n:42001\n\n\n\n\n\nThe fetched image is then saved in the local directory. A sample image is shown below:\n\n\n\nimageserver\n\n\nTo install imageserver:\n\n\ngo get github.com/perrig/scionlab/camerapp/imageserver\n\n\n\n\n\nThe \nimageserver\n application keeps looking for \n.jpg\n files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used.\n\n\nIncluded is a simple \npaparazzi.py\n application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows:\n\n\npython3 \n${\nGOPATH\n}\n/src/github.com/perrig/scionlab/camerapp/imageserver/paparazzi.py \n\nimageserver -s 1-12,\n[\n192.33.93.166\n]\n:42002",
            "title": "Access a video camera over the SCION network"
        },
        {
            "location": "/sample_projects/access_camera/#access-camera-images-over-scion-network",
            "text": "The  camerapp application  contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the  README.md .",
            "title": "Access camera images over SCION network"
        },
        {
            "location": "/sample_projects/access_camera/#imagefetcher",
            "text": "To install imagefetcher:  go get github.com/perrig/scionlab/camerapp/imagefetcher  To use the image fetcher, you will need to pass your local host's address as a SCION address (in the format  ISD-AS,[IPv4]:port ) and specify the address of an image server, for instance  1-12,[192.33.93.166]:42002 . The local ISD and AS number can be seen for instance from files in the logs directory:  br1-1006-1.log  indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles  ISD1 , which contains a subdirectory  AS1006 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port.  A sample image server that can be contacted by any client is set up at  1-12,[192.33.93.166]:42002 .  The client address is passed with  -c  and the server address with  -s :  imagefetcher -s 1-12, [ 192.33.93.166 ] :42002 -c 1-1006, [ 10.0.2.15 ] :42001  The fetched image is then saved in the local directory. A sample image is shown below:",
            "title": "imagefetcher"
        },
        {
            "location": "/sample_projects/access_camera/#imageserver",
            "text": "To install imageserver:  go get github.com/perrig/scionlab/camerapp/imageserver  The  imageserver  application keeps looking for  .jpg  files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used.  Included is a simple  paparazzi.py  application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows:  python3  ${ GOPATH } /src/github.com/perrig/scionlab/camerapp/imageserver/paparazzi.py  \nimageserver -s 1-12, [ 192.33.93.166 ] :42002",
            "title": "imageserver"
        },
        {
            "location": "/sample_projects/bwtester/",
            "text": "The bwtester application\n\n\nThe \nbandwidth testing application \nbwtester\n enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the \nbwtester README\n.\n\n\nbwtestclient\n\n\nTo install bwtestclient and get dependencies as listed in vendor file:\n\n\ngo get github.com/perrig/scionlab/bwtester/bwtestclient\n\ncd\n \n$GOPATH\n/src/github.com/perrig/scionlab/\ngovendor sync\n\n\n\n\n\nFor govendor, see note [1].\n\n\nSample servers are installed at the following locations:\n\n\n\n\n1-12,[192.33.93.173]:30100\n\n\n1-1015,[10.0.2.15]:30100\n\n\n1-1019,[192.168.1.111]:30100\n\n\n3-1034,[141.44.25.146]:30100\n\n\n\n\nYou can test the application as follows, replacing the client address with your own address after the \n-c\n option (you can select any available port number for the client):\n\n\nbwtestclient -s 1-12,\n[\n192.33.93.173\n]\n:30100 -c 1-1006,\n[\n10.0.2.15\n]\n:30102\n\n\n\n\n\nThe application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), and the total number of packets that will be sent. For instance, \n5,100,10\n specifies that 10 packets of size 100 bytes will be sent over 5 seconds. The parameters for the test in the client-to-server direction are specified with \n-cs\n, and the server-to-client direction with \n-sc\n. So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command:\n\n\nbwtestclient -s 1-12,\n[\n192.33.93.173\n]\n:30100 -c 1-1006,\n[\n10.0.2.15\n]\n:30102 -cs 10,1000,1250 -sc 10,1000,12500\n\n\n\n\n\nbwtestserver\n\n\nTo install bwtestserver and get dependencies as listed in vendor file:\n\n\ngo get github.com/perrig/scionlab/bwtester/bwtestserver\n\ncd\n \n$GOPATH\n/src/github.com/perrig/scionlab/\ngovendor sync\n\n\n\n\n\nFor govendor, see note [1].\n\n\nThe server is started as follows, where the address needs to be adjusted as for other applications:\n\n\nbwtestserver -s 1-12,\n[\n192.33.93.173\n]\n:30100 \n\n\n\n\n\n\n\n\n[1] govendor: govendor is already installed by the main SCION installation with the supported version. If you don't have govendor installed, you can do so using the following steps:\n\n\nmkdir \n$GOPATH\n/kardianos\n;\n \ncd\n \n$GOPATH\n/kardianos/\ngit clone https://github.com/kardianos/govendor.git\n\ncd\n ./govendor/\ngit fetch\n;\n git checkout fbbc78e8d1b533dfcf81c2a4be2cec2617a926f7\ngo install -v",
            "title": "Bandwidth tester application"
        },
        {
            "location": "/sample_projects/bwtester/#the-bwtester-application",
            "text": "The  bandwidth testing application  bwtester  enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the  bwtester README .",
            "title": "The bwtester application"
        },
        {
            "location": "/sample_projects/bwtester/#bwtestclient",
            "text": "To install bwtestclient and get dependencies as listed in vendor file:  go get github.com/perrig/scionlab/bwtester/bwtestclient cd   $GOPATH /src/github.com/perrig/scionlab/\ngovendor sync  For govendor, see note [1].  Sample servers are installed at the following locations:   1-12,[192.33.93.173]:30100  1-1015,[10.0.2.15]:30100  1-1019,[192.168.1.111]:30100  3-1034,[141.44.25.146]:30100   You can test the application as follows, replacing the client address with your own address after the  -c  option (you can select any available port number for the client):  bwtestclient -s 1-12, [ 192.33.93.173 ] :30100 -c 1-1006, [ 10.0.2.15 ] :30102  The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), and the total number of packets that will be sent. For instance,  5,100,10  specifies that 10 packets of size 100 bytes will be sent over 5 seconds. The parameters for the test in the client-to-server direction are specified with  -cs , and the server-to-client direction with  -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command:  bwtestclient -s 1-12, [ 192.33.93.173 ] :30100 -c 1-1006, [ 10.0.2.15 ] :30102 -cs 10,1000,1250 -sc 10,1000,12500",
            "title": "bwtestclient"
        },
        {
            "location": "/sample_projects/bwtester/#bwtestserver",
            "text": "To install bwtestserver and get dependencies as listed in vendor file:  go get github.com/perrig/scionlab/bwtester/bwtestserver cd   $GOPATH /src/github.com/perrig/scionlab/\ngovendor sync  For govendor, see note [1].  The server is started as follows, where the address needs to be adjusted as for other applications:  bwtestserver -s 1-12, [ 192.33.93.173 ] :30100     [1] govendor: govendor is already installed by the main SCION installation with the supported version. If you don't have govendor installed, you can do so using the following steps:  mkdir  $GOPATH /kardianos ;   cd   $GOPATH /kardianos/\ngit clone https://github.com/kardianos/govendor.git cd  ./govendor/\ngit fetch ;  git checkout fbbc78e8d1b533dfcf81c2a4be2cec2617a926f7\ngo install -v",
            "title": "bwtestserver"
        },
        {
            "location": "/as_visualization/running_asviz/",
            "text": "Setup and Run AS Visualizations\n\n\nIntroduction\n\n\nSCION-viz is a web-based visualization tool of the SCION topology. Connecting to a running AS infrastructure, it reads and displays information about the network topology.\n\n\n1. Setup on a local system\n\n\nIf you are using the SCIONLab VM distribution you can skip this step, as SCION-viz is already installed.\n\n\nFirst, check if PYTHONPATH is set: \necho $PYTHONPATH\n. If it is set, ensure that the scion directory and scion/python directories are both included. If they are missing, you can set PYTHONPATH as follows:\n\n\necho\n \nexport PYTHONPATH=\n$SC/python:$SC\n \n ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nNext, you will need to clone the repository as follows:\n\n\ncd\n \n$SC\n/sub\ngit clone git@github.com:netsec-ethz/scion-viz\n\ncd\n scion-viz/python/web\npip3 install --user --require-hashes -r requirements.txt\npython3 ./manage.py migrate\n\n\n\n\n\n2. Source Update\n\n\nThis step applies to all uses Local and SCIONLab VM. Update the source for the \nscion\n and \nscion-viz\n repositories.\n\n\n./scion.sh stop\n./scion.sh clean\n\ncd\n \n$SC\n\ngit pull\n./scion.sh run\n\ncd\n sub/scion-viz\ngit pull\n\n\n\n\n\n3. Running\n\n\nTo start SCION-viz, you need to provide the local IP address and port number. Note that SCION-viz is automatically started in the SCIONLab VM environment.\n\n\ncd\n \n$SC\n/sub/scion-viz/python/web\npython3 ./manage.py runserver 10.0.2.15:8000\n\n\n\n\n\n4. Using\n\n\nThe AS Visualization can be used from the \nbrowser\n or from the \ncommand line\n.",
            "title": "Running AS Visualizations"
        },
        {
            "location": "/as_visualization/running_asviz/#setup-and-run-as-visualizations",
            "text": "",
            "title": "Setup and Run AS Visualizations"
        },
        {
            "location": "/as_visualization/running_asviz/#introduction",
            "text": "SCION-viz is a web-based visualization tool of the SCION topology. Connecting to a running AS infrastructure, it reads and displays information about the network topology.",
            "title": "Introduction"
        },
        {
            "location": "/as_visualization/running_asviz/#1-setup-on-a-local-system",
            "text": "If you are using the SCIONLab VM distribution you can skip this step, as SCION-viz is already installed.  First, check if PYTHONPATH is set:  echo $PYTHONPATH . If it is set, ensure that the scion directory and scion/python directories are both included. If they are missing, you can set PYTHONPATH as follows:  echo   export PYTHONPATH= $SC/python:$SC    ~/.profile source  ~/.profile  Next, you will need to clone the repository as follows:  cd   $SC /sub\ngit clone git@github.com:netsec-ethz/scion-viz cd  scion-viz/python/web\npip3 install --user --require-hashes -r requirements.txt\npython3 ./manage.py migrate",
            "title": "1. Setup on a local system"
        },
        {
            "location": "/as_visualization/running_asviz/#2-source-update",
            "text": "This step applies to all uses Local and SCIONLab VM. Update the source for the  scion  and  scion-viz  repositories.  ./scion.sh stop\n./scion.sh clean cd   $SC \ngit pull\n./scion.sh run cd  sub/scion-viz\ngit pull",
            "title": "2. Source Update"
        },
        {
            "location": "/as_visualization/running_asviz/#3-running",
            "text": "To start SCION-viz, you need to provide the local IP address and port number. Note that SCION-viz is automatically started in the SCIONLab VM environment.  cd   $SC /sub/scion-viz/python/web\npython3 ./manage.py runserver 10.0.2.15:8000",
            "title": "3. Running"
        },
        {
            "location": "/as_visualization/running_asviz/#4-using",
            "text": "The AS Visualization can be used from the  browser  or from the  command line .",
            "title": "4. Using"
        },
        {
            "location": "/as_visualization/browser_asviz/",
            "text": "Browser AS Visualizations\n\n\nStarting the Visualization\n\n\nAfter \nupdating the latest source code and starting the server\n, point your browser to \nhttp://127.0.0.1:8000\n to launch the AS Visualization. Even if you run SCION-viz within a VM, you can use the regular browser on your host operating system (Mac or Windows).\n\n\nThen, enter the \"Source AS\" ISD-AS pair of your AS. You can find out your ISD and AS number as described in the tutorial \nFetching sensor readings or time stamps\n. Press \"Request Data\" to fetch updated data.\n\n\nViewing the SCION Daemon\n\n\nThe \"Data\" pull-down menu option \"sciond socket\" will bind to a socket to communicate with the SCION Daemon. Alternately, you can override the default IP address of the Daemon, buy entering the address you wish to bind to in the \"SCIOND IP Address\" text box.\n\n\nSCIOND Paths\n\n\nEnter the \"Destination AS\" ISD-AS pair and the maximum number of paths to retrieve in \"Max Paths\" and press \"Update Paths\" to view all announced paths to the destination from the source.\nThe announced paths will be displayed in a combined topology in the window.\nTo view the details of a specific path expand the path's data by clicking on the path number in the window on right side.\n\n\n\nSCION AS Topology\n\n\nThe composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router.\n\n\n\n\nTip\n\n\nThe big circle can be clicked on as well to view details of the Source AS.\n\n\n\n\n\n\nViewing the SCION Local AS\n\n\nThe \"Data\" pull-down menu option \"local gen dir\" will display data from the local gen directory.\n\n\nLocal AS Topology\n\n\n\n\nLocal ISD Trust Root Configuration\n\n\n\n\nLocal AS Certificate",
            "title": "Browser AS Visualization"
        },
        {
            "location": "/as_visualization/browser_asviz/#browser-as-visualizations",
            "text": "",
            "title": "Browser AS Visualizations"
        },
        {
            "location": "/as_visualization/browser_asviz/#starting-the-visualization",
            "text": "After  updating the latest source code and starting the server , point your browser to  http://127.0.0.1:8000  to launch the AS Visualization. Even if you run SCION-viz within a VM, you can use the regular browser on your host operating system (Mac or Windows).  Then, enter the \"Source AS\" ISD-AS pair of your AS. You can find out your ISD and AS number as described in the tutorial  Fetching sensor readings or time stamps . Press \"Request Data\" to fetch updated data.",
            "title": "Starting the Visualization"
        },
        {
            "location": "/as_visualization/browser_asviz/#viewing-the-scion-daemon",
            "text": "The \"Data\" pull-down menu option \"sciond socket\" will bind to a socket to communicate with the SCION Daemon. Alternately, you can override the default IP address of the Daemon, buy entering the address you wish to bind to in the \"SCIOND IP Address\" text box.",
            "title": "Viewing the SCION Daemon"
        },
        {
            "location": "/as_visualization/browser_asviz/#sciond-paths",
            "text": "Enter the \"Destination AS\" ISD-AS pair and the maximum number of paths to retrieve in \"Max Paths\" and press \"Update Paths\" to view all announced paths to the destination from the source.\nThe announced paths will be displayed in a combined topology in the window.\nTo view the details of a specific path expand the path's data by clicking on the path number in the window on right side.",
            "title": "SCIOND Paths"
        },
        {
            "location": "/as_visualization/browser_asviz/#scion-as-topology",
            "text": "The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router.   Tip  The big circle can be clicked on as well to view details of the Source AS.",
            "title": "SCION AS Topology"
        },
        {
            "location": "/as_visualization/browser_asviz/#viewing-the-scion-local-as",
            "text": "The \"Data\" pull-down menu option \"local gen dir\" will display data from the local gen directory.",
            "title": "Viewing the SCION Local AS"
        },
        {
            "location": "/as_visualization/browser_asviz/#local-as-topology",
            "text": "",
            "title": "Local AS Topology"
        },
        {
            "location": "/as_visualization/browser_asviz/#local-isd-trust-root-configuration",
            "text": "",
            "title": "Local ISD Trust Root Configuration"
        },
        {
            "location": "/as_visualization/browser_asviz/#local-as-certificate",
            "text": "",
            "title": "Local AS Certificate"
        },
        {
            "location": "/as_visualization/command_asviz/",
            "text": "Command-line AS Visualization\n\n\ncd\n ~/go/src/github.com/scionproto/scion/\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py\nusage: as_viewer.py \n[\n-h\n]\n \n[\n--addr ADDR\n]\n \n[\n-t\n]\n \n[\n-p\n]\n \n[\n-trc\n]\n \n[\n-crt\n]\n \n[\n-c\n]\n \n[\n-pp\n]\n\n                    src_isdas \n[\ndst_isdas\n]\n\nas_viewer.py: error: the following arguments are required: src_isdas\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py -h\nusage: as_viewer.py \n[\n-h\n]\n \n[\n--addr ADDR\n]\n \n[\n-t\n]\n \n[\n-p\n]\n \n[\n-trc\n]\n \n[\n-crt\n]\n \n[\n-c\n]\n \n[\n-pp\n]\n\n                    src_isdas \n[\ndst_isdas\n]\n\n\nSCION AS Path Viewer requires \nsource\n and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this \nhelp\n message and \nexit\n\n  --addr ADDR  ip address to \nbind\n to \nif\n not localhost\n  -t           display \nsource\n AS topology\n  -p           display announced paths to destination\n  -trc         display \nsource\n TRC\n  -crt         display \nsource\n certificate chain\n  -c           display \nsource\n AS configuration\n  -pp          display \nsource\n path policy\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 -t\n\nSCION AS Viewer\n\n(\nsrc\n)\n 1-1045 \n=======================\n None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- AS TOPOLOGY: 1-1045\nis_core_as: False\nmtu: 1472\n----------------- PATH SERVER:\nAddress: 10.0.2.15\nName: ps-1\nPort: 31044\nTTL: 0\n----------------- CERTIFICATE SERVER:\nAddress: 10.0.2.15\nName: cs-1\nPort: 31043\nTTL: 0\n----------------- BEACON SERVER:\nAddress: 10.0.2.15\nName: bs-1\nPort: 31041\nTTL: 0\n----------------- SIBRA SERVER:\nAddress: 10.0.2.15\nName: sb-1\nPort: 31045\nTTL: 0\n----------------- BORDER ROUTER:\nAddress: 10.0.2.15\nName: br-1\nPort: 31042\nInterface ID: 1\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 2-24 -p\n\nSCION AS Viewer\n\n(\nsrc\n)\n 1-1045 \n=======================\n 2-24 \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- PATH 1\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 16\n2-24 \n(\n1\n)\n\n2-22 \n(\n4\n)\n\n2-22 \n(\n1\n)\n\n2-21 \n(\n2\n)\n\n2-21 \n(\n1\n)\n\n1-1 \n(\n4\n)\n\n1-1 \n(\n3\n)\n\n1-3 \n(\n1\n)\n\n1-3 \n(\n2\n)\n\n1-2 \n(\n1\n)\n\n1-2 \n(\n4\n)\n\n1-6 \n(\n1\n)\n\n1-6 \n(\n2\n)\n\n1-7 \n(\n1\n)\n\n1-7 \n(\n39\n)\n\n1-1045 \n(\n1\n)\n\n----------------- PATH 2\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 16\n2-24 \n(\n1\n)\n\n2-22 \n(\n4\n)\n\n2-22 \n(\n3\n)\n\n4-41 \n(\n2\n)\n\n4-41 \n(\n1\n)\n\n1-1 \n(\n6\n)\n\n1-1 \n(\n3\n)\n\n1-3 \n(\n1\n)\n\n1-3 \n(\n2\n)\n\n1-2 \n(\n1\n)\n\n1-2 \n(\n4\n)\n\n1-6 \n(\n1\n)\n\n1-6 \n(\n2\n)\n\n1-7 \n(\n1\n)\n\n1-7 \n(\n39\n)\n\n1-1045 \n(\n1\n)\n\n----------------- PATH 3\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 18\n2-24 \n(\n1\n)\n\n2-22 \n(\n4\n)\n\n2-22 \n(\n2\n)\n\n2-23 \n(\n2\n)\n\n2-23 \n(\n3\n)\n\n3-31 \n(\n3\n)\n\n3-31 \n(\n1\n)\n\n1-1 \n(\n5\n)\n\n1-1 \n(\n3\n)\n\n1-3 \n(\n1\n)\n\n1-3 \n(\n2\n)\n\n1-2 \n(\n1\n)\n\n1-2 \n(\n4\n)\n\n1-6 \n(\n1\n)\n\n1-6 \n(\n2\n)\n\n1-7 \n(\n1\n)\n\n1-7 \n(\n39\n)\n\n1-1045 \n(\n1\n)\n\n----------------- PATH 4\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 18\n2-24 \n(\n1\n)\n\n2-22 \n(\n4\n)\n\n2-22 \n(\n2\n)\n\n2-23 \n(\n2\n)\n\n2-23 \n(\n1\n)\n\n2-21 \n(\n3\n)\n\n2-21 \n(\n1\n)\n\n1-1 \n(\n4\n)\n\n1-1 \n(\n3\n)\n\n1-3 \n(\n1\n)\n\n1-3 \n(\n2\n)\n\n1-2 \n(\n1\n)\n\n1-2 \n(\n4\n)\n\n1-6 \n(\n1\n)\n\n1-6 \n(\n2\n)\n\n1-7 \n(\n1\n)\n\n1-7 \n(\n39\n)\n\n1-1045 \n(\n1\n)\n\n----------------- PATH 5\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 20\n2-24 \n(\n1\n)\n\n2-22 \n(\n4\n)\n\n2-22 \n(\n1\n)\n\n2-21 \n(\n2\n)\n\n2-21 \n(\n3\n)\n\n2-23 \n(\n1\n)\n\n2-23 \n(\n3\n)\n\n3-31 \n(\n3\n)\n\n3-31 \n(\n1\n)\n\n1-1 \n(\n5\n)\n\n1-1 \n(\n3\n)\n\n1-3 \n(\n1\n)\n\n1-3 \n(\n2\n)\n\n1-2 \n(\n1\n)\n\n1-2 \n(\n4\n)\n\n1-6 \n(\n1\n)\n\n1-6 \n(\n2\n)\n\n1-7 \n(\n1\n)\n\n1-7 \n(\n39\n)\n\n1-1045 \n(\n1\n)\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 -h\nusage: as_viewer.py \n[\n-h\n]\n \n[\n--addr ADDR\n]\n \n[\n-t\n]\n \n[\n-p\n]\n \n[\n-trc\n]\n \n[\n-crt\n]\n \n[\n-c\n]\n \n[\n-pp\n]\n\n                    src_isdas \n[\ndst_isdas\n]\n\n\nSCION AS Path Viewer requires \nsource\n and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this \nhelp\n message and \nexit\n\n  --addr ADDR  ip address to \nbind\n to \nif\n not localhost\n  -t           display \nsource\n AS topology\n  -p           display announced paths to destination\n  -trc         display \nsource\n TRC\n  -crt         display \nsource\n certificate chain\n  -c           display \nsource\n AS configuration\n  -pp          display \nsource\n path policy\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 -pp\n\nSCION AS Viewer\n\n(\nsrc\n)\n 1-1045 \n=======================\n None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/path_policy.yml\n---\nBestSetSize: 5\nCandidatesSetSize: 20\nHistoryLimit: 20\nPropertyRanges:\n  AvailableBandwidth: 0-100\n  DelayTime: 0-60\n  GuaranteedBandwidth: 0-100\n  HopsLength: 1-10\n  PeerLinks: 0-100\n  TotalBandwidth: 0-100\nPropertyWeights:\n  AvailableBandwidth: 0\n  DelayTime: 3\n  Disjointness: 4\n  ExpirationTime: 3\n  GuaranteedBandwidth: 0\n  HopsLength: 5\n  LastSeenTime: 3\n  LastSentTime: 3\n  PeerLinks: 7\n  TotalBandwidth: 0\nUnwantedASes: 0-888,0-999\nUpdateAfterNumber: 10\nUpdateAfterTime: 3600\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 -c\n\nSCION AS Viewer\n\n(\nsrc\n)\n 1-1045 \n=======================\n None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/as.yml\nCertChainVersion: 0\nMasterASKey: \nVrMpfgsWBxZZuhhSQoIUlg\n==\n\nPropagateTime: 5\nRegisterPath: \ntrue\n\nRegisterTime: 5\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 -crt\n\nSCION AS Viewer\n\n(\nsrc\n)\n 1-1045 \n=======================\n None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-AS1045-V0.crt\n\n{\n\n    \n0\n: \n{\n\n        \nEncAlgorithm\n: \ncurve25519xsalsa20poly1305\n,\n        \nSignature\n: \nVlJptnORObEmVQDvofOcN/2i83w2/j5vk/DKFMY508IC+fkWiyMZ/XQCp4sOWMc8cMiJHObdiI99GWz/wZXGDQ==\n,\n        \nIssuingTime\n: 1511289459,\n        \nSubjectSigKey\n: \nUshs6XHb/uypmGzcmHLA3Xay4FpsrSbrKJTWU0JeesQ=\n,\n        \nSignAlgorithm\n: \ned25519\n,\n        \nSubject\n: \n1-1045\n,\n        \nTRCVersion\n: 0,\n        \nExpirationTime\n: 1542825459,\n        \nSubjectEncKey\n: \n4rQyFxRCx+eR7ygPYG96WQV9rKLl7RFY0lzXm1r2wg4=\n,\n        \nComment\n: \nAS Certificate\n,\n        \nIssuer\n: \n1-1\n,\n        \nCanIssue\n: false,\n        \nVersion\n: 0\n    \n}\n,\n    \n1\n: \n{\n\n        \nEncAlgorithm\n: \ncurve25519xsalsa20poly1305\n,\n        \nSignature\n: \nG4K+h8C8flqOaGR6Upt483vm4agQeoY57XvK2Ljo7uI/7u3yUcd3rlONG/7YfrHGlYSrlcLcpzPFvu9knyMFDQ==\n,\n        \nIssuingTime\n: 1499177015,\n        \nSubjectSigKey\n: \nrRfaiQA8CIPWpRD5pH6rDeadutCTB+Hi+6YRh2zPS1c=\n,\n        \nSignAlgorithm\n: \ned25519\n,\n        \nSubject\n: \n1-1\n,\n        \nTRCVersion\n: 0,\n        \nExpirationTime\n: 1530713015,\n        \nSubjectEncKey\n: \n448SpoiC4OApC2UxyL8x9yFunPZ9n9Ms/AzQLMXQMmM=\n,\n        \nComment\n: \nCore AS Certificate\n,\n        \nIssuer\n: \n1-1\n,\n        \nCanIssue\n: true,\n        \nVersion\n: 0\n    \n}\n\n\n}\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py 1-1045 -trc\n\nSCION AS Viewer\n\n(\nsrc\n)\n 1-1045 \n=======================\n None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-V0.trc\n\n{\n\n    \nQuorumCAs\n: 3,\n    \nSignatures\n: \n{\n\n        \n1-1\n: \nB89Z3cWTzW3j4r02b/zLMuAn1/PiF0meEa9/6/AITiyN3YGRpNNer5aD/uTziMX9IfPcUP9rEXlXKs8PCdVlBg==\n\n    \n}\n,\n    \nGracePeriod\n: 18000,\n    \nRootRainsKey\n: \ndns_srv_addr\n,\n    \nCreationTime\n: 1499177015,\n    \nPKILogs\n: \n{}\n,\n    \nISDID\n: 1,\n    \nCoreCAs\n: \n{\n\n        \n1-1\n: \n{\n\n            \nOfflineKey\n: \nAX0kRbqJfdnfNcpC0XMSiQuLCqQJabp8HRi6BiAKPXo=\n,\n            \nOfflineKeyAlg\n: \nEd25519\n,\n            \nOnlineKey\n: \nVJvKbgHOsYbHlr6SGGssszGQvAtu+zXCTAJkYOCPr38=\n,\n            \nOnlineKeyAlg\n: \nEd25519\n\n        \n}\n\n    \n}\n,\n    \nQuarantine\n: true,\n    \nDescription\n: \nISD 1\n,\n    \nQuorumOwnTRC\n: 2,\n    \nRootCAs\n: \n{\n\n        \nCA1-1\n: \nMIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrPtywDofkLN4So+AhCDRsn0xeUtAp3zoa4onULpsSbdo5lj8p0nfafKplOJ7uP4txMbn8FtTcyau5W7BbQodXl/Xa6Elu4u9nyb6UgNpzmiUyCp/5TGRicv3MKSLpVZQukuj6weHLL2GGwz58qnygqoRzvsNMugwP46PZHKLmx7hg3IOR10MDDax7dtAMlzvJJWjLeMGytf75U6b5JFK2366oaDroQhhGh2TL228+3rcvMMcB/TVxHBrzGKE+uTI8XnspMGo42lN3ZzaOOvbacXH5s/Cdf3l6j6x1GdE0OHFLB2vRaKFpBN/BdW7HhDHqy/u+9/Vjh6eiOoDODMBQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUchmrQ0w9YIrX1VjicXPcqVrouWswDQYJKoZIhvcNAQELBQADggEBAGCK0U5GFftXaRfaqgY7/dEeW3qk4zXPyCERd5la2KW8I1A4jUJ5yYZJTOovFe9Mi2NgyUG62NxN52mODNSRazZ+HxwmXVZtgUx9PEYMQVvFKoirsBbpxnx7Bnt1h9Fo0QVe1VGk0kYQ1sj/1/J4wperRDgy8bDBFB/JznY7z9S9HxfFNUgkmnMI53u/La4Yl18wB6sFNIqTeNwXNihzNWO1f3N9J9OMTjG0bjUMximNPDhUF7kCwIAXz3+C6besEqqCYq6mvcGchCL9H/zpw8vGJjwXPLbqpx0ewHlyPzEbCZqhy4kmHAodl5XU2ghuwCV/e7mSetuMlvSQPVtBXEY=\n,\n        \nCA1-3\n: \nMIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoVanBcuF4ypz1U9aCMgVLLbTMI356RlmK1g2njfvfvq1ElEt1WRyWRNPNSMx6xamD5OFedODgRdbpdYvcFK89cK4BbRLSSAZ13RpAmld0RnlRAxDvUKqUcfeqz5uiuQ5lVJ+zyyKJoSea/quooAyehGVEb0qo0g1EyffWGf/E4awkDXT+w6y14cGO9r4vrPiD+re5Ufs+ht5z/AwQ9xkK6Md5uaHoHRMd0GUkxy74ef9w5AoiysB+1/ZLoFKZyl1N+q+jUwx9C79zqicYDpBQWB3gFd19sq69ZlIyX76p6od2GSV8fvlsSD+MEdChfvPy1GFsoFE7zOBLYCXXXxkqwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU91ybA6o68Yd/bd4wRe92F08xq7MwDQYJKoZIhvcNAQELBQADggEBADByHaGbqrI3Z9cO11xzBPzJwyS2AkFOFZ+bWPtGUwvdxoO/kFw3JTIjxD1GPM/5HQB86tjOBLKCCgwCQG/i/ZlwNU61v9aleFbJjFa5HnfuKxHxe5jtnspXjx6TBLV6KZUE82nNMnQYczlrUURmJ4gJ+9U4tLQVkmAERhq8HbCnO5wNeKkgPfKT1L3lRZP17Rh6WNQsOlUksJG6m/e8xR/BkZ0yHQuZPDUlcl7c94pL84CW1qJ7PcH3Mbi+AK/MnSDE4qjz1xCyoXvlklAOe6QrzYYLV9uvBpNJAldfr4vKHHdmWACWj03y+1pbHUB9edXZhv+skmQfpWBh4wxC/dQ=\n,\n        \nCA1-2\n: \nMIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArS4eanUAEhbTtFi2zxo1YJYFG0IU/A7CD0WKyQL3TMK5HmAJY0rOth5MniTcx7OHCo4zcoMCTGXwtcfTHNnNyL3DKWoPpmjE0W8NbQpycgbcg8Wf/wBPXQ9eUKIlU7OUbIgWCOoxldr98A97N6sqxoo1u5EeNSUORYMiaEsbsgmKMxKj+jqwwJejTYL9sQLwktcXyW/sT27wBoiFeLWMpKEPp81qziub0dN42fSMgh0ZSBE68uAcwVAM3i6uT+4s+/5KoGehZ6KVjNT07TddSEcmc84Bb83oiKEThhc9xWyUOLVoIhQV/4PT6PA8fmpc1a6YfFRPSMj/Kzpl9clc9QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUVRLUZoMbGkH6PXwIFgv578NwXi8wDQYJKoZIhvcNAQELBQADggEBAJ4oYQOIR4RLsHUGGYI9IOaki0Pvfg9DvD61wTBfkypsIc4wYI0TVeggzloxSG9DVSMuV3UYXYF5xCV24oY4CTzIazZXKsg200g/vICDdxO4hpQDgihzdUkGRRCT+zR2zi5lnWS1TZ59F0fdaGH8jEySjU8YdGv7NPKshtTFN2tx02ZoyJBa0S239L46eT7dJeJeAo3MSvNJDrwP+IE3gjL+nOLjMUreZzz94Ueqzgg7dlpFeyKJFvQvv2tUQ+SUQCUJkWZIlaOKEdMExxSKmEyI+grbLPqXtl9yVAr5WzjQQCNqRFEf/XucKLXFWV5sC+BaoWPJCcmpwbhidHAhmZo=\n\n    \n}\n,\n    \nVersion\n: 0,\n    \nQuorumEEPKI\n: 2\n\n}",
            "title": "Command-line AS Visualization"
        },
        {
            "location": "/as_visualization/command_asviz/#command-line-as-visualization",
            "text": "cd  ~/go/src/github.com/scionproto/scion/  python3 sub/scion-viz/python/as_viewer.py\nusage: as_viewer.py  [ -h ]   [ --addr ADDR ]   [ -t ]   [ -p ]   [ -trc ]   [ -crt ]   [ -c ]   [ -pp ] \n                    src_isdas  [ dst_isdas ] \nas_viewer.py: error: the following arguments are required: src_isdas  python3 sub/scion-viz/python/as_viewer.py -h\nusage: as_viewer.py  [ -h ]   [ --addr ADDR ]   [ -t ]   [ -p ]   [ -trc ]   [ -crt ]   [ -c ]   [ -pp ] \n                    src_isdas  [ dst_isdas ] \n\nSCION AS Path Viewer requires  source  and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this  help  message and  exit \n  --addr ADDR  ip address to  bind  to  if  not localhost\n  -t           display  source  AS topology\n  -p           display announced paths to destination\n  -trc         display  source  TRC\n  -crt         display  source  certificate chain\n  -c           display  source  AS configuration\n  -pp          display  source  path policy  python3 sub/scion-viz/python/as_viewer.py 1-1045 -t\n\nSCION AS Viewer ( src )  1-1045  =======================  None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- AS TOPOLOGY: 1-1045\nis_core_as: False\nmtu: 1472\n----------------- PATH SERVER:\nAddress: 10.0.2.15\nName: ps-1\nPort: 31044\nTTL: 0\n----------------- CERTIFICATE SERVER:\nAddress: 10.0.2.15\nName: cs-1\nPort: 31043\nTTL: 0\n----------------- BEACON SERVER:\nAddress: 10.0.2.15\nName: bs-1\nPort: 31041\nTTL: 0\n----------------- SIBRA SERVER:\nAddress: 10.0.2.15\nName: sb-1\nPort: 31045\nTTL: 0\n----------------- BORDER ROUTER:\nAddress: 10.0.2.15\nName: br-1\nPort: 31042\nInterface ID: 1  python3 sub/scion-viz/python/as_viewer.py 1-1045 2-24 -p\n\nSCION AS Viewer ( src )  1-1045  =======================  2-24  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- PATH 1\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 16\n2-24  ( 1 ) \n2-22  ( 4 ) \n2-22  ( 1 ) \n2-21  ( 2 ) \n2-21  ( 1 ) \n1-1  ( 4 ) \n1-1  ( 3 ) \n1-3  ( 1 ) \n1-3  ( 2 ) \n1-2  ( 1 ) \n1-2  ( 4 ) \n1-6  ( 1 ) \n1-6  ( 2 ) \n1-7  ( 1 ) \n1-7  ( 39 ) \n1-1045  ( 1 ) \n----------------- PATH 2\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 16\n2-24  ( 1 ) \n2-22  ( 4 ) \n2-22  ( 3 ) \n4-41  ( 2 ) \n4-41  ( 1 ) \n1-1  ( 6 ) \n1-1  ( 3 ) \n1-3  ( 1 ) \n1-3  ( 2 ) \n1-2  ( 1 ) \n1-2  ( 4 ) \n1-6  ( 1 ) \n1-6  ( 2 ) \n1-7  ( 1 ) \n1-7  ( 39 ) \n1-1045  ( 1 ) \n----------------- PATH 3\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 18\n2-24  ( 1 ) \n2-22  ( 4 ) \n2-22  ( 2 ) \n2-23  ( 2 ) \n2-23  ( 3 ) \n3-31  ( 3 ) \n3-31  ( 1 ) \n1-1  ( 5 ) \n1-1  ( 3 ) \n1-3  ( 1 ) \n1-3  ( 2 ) \n1-2  ( 1 ) \n1-2  ( 4 ) \n1-6  ( 1 ) \n1-6  ( 2 ) \n1-7  ( 1 ) \n1-7  ( 39 ) \n1-1045  ( 1 ) \n----------------- PATH 4\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 18\n2-24  ( 1 ) \n2-22  ( 4 ) \n2-22  ( 2 ) \n2-23  ( 2 ) \n2-23  ( 1 ) \n2-21  ( 3 ) \n2-21  ( 1 ) \n1-1  ( 4 ) \n1-1  ( 3 ) \n1-3  ( 1 ) \n1-3  ( 2 ) \n1-2  ( 1 ) \n1-2  ( 4 ) \n1-6  ( 1 ) \n1-6  ( 2 ) \n1-7  ( 1 ) \n1-7  ( 39 ) \n1-1045  ( 1 ) \n----------------- PATH 5\nMTU: 1472\nIPV4: 10.0.2.15\nPort: 31042\nInterfaces Len: 20\n2-24  ( 1 ) \n2-22  ( 4 ) \n2-22  ( 1 ) \n2-21  ( 2 ) \n2-21  ( 3 ) \n2-23  ( 1 ) \n2-23  ( 3 ) \n3-31  ( 3 ) \n3-31  ( 1 ) \n1-1  ( 5 ) \n1-1  ( 3 ) \n1-3  ( 1 ) \n1-3  ( 2 ) \n1-2  ( 1 ) \n1-2  ( 4 ) \n1-6  ( 1 ) \n1-6  ( 2 ) \n1-7  ( 1 ) \n1-7  ( 39 ) \n1-1045  ( 1 )   python3 sub/scion-viz/python/as_viewer.py 1-1045 -h\nusage: as_viewer.py  [ -h ]   [ --addr ADDR ]   [ -t ]   [ -p ]   [ -trc ]   [ -crt ]   [ -c ]   [ -pp ] \n                    src_isdas  [ dst_isdas ] \n\nSCION AS Path Viewer requires  source  and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this  help  message and  exit \n  --addr ADDR  ip address to  bind  to  if  not localhost\n  -t           display  source  AS topology\n  -p           display announced paths to destination\n  -trc         display  source  TRC\n  -crt         display  source  certificate chain\n  -c           display  source  AS configuration\n  -pp          display  source  path policy  python3 sub/scion-viz/python/as_viewer.py 1-1045 -pp\n\nSCION AS Viewer ( src )  1-1045  =======================  None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/path_policy.yml\n---\nBestSetSize: 5\nCandidatesSetSize: 20\nHistoryLimit: 20\nPropertyRanges:\n  AvailableBandwidth: 0-100\n  DelayTime: 0-60\n  GuaranteedBandwidth: 0-100\n  HopsLength: 1-10\n  PeerLinks: 0-100\n  TotalBandwidth: 0-100\nPropertyWeights:\n  AvailableBandwidth: 0\n  DelayTime: 3\n  Disjointness: 4\n  ExpirationTime: 3\n  GuaranteedBandwidth: 0\n  HopsLength: 5\n  LastSeenTime: 3\n  LastSentTime: 3\n  PeerLinks: 7\n  TotalBandwidth: 0\nUnwantedASes: 0-888,0-999\nUpdateAfterNumber: 10\nUpdateAfterTime: 3600  python3 sub/scion-viz/python/as_viewer.py 1-1045 -c\n\nSCION AS Viewer ( src )  1-1045  =======================  None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/as.yml\nCertChainVersion: 0\nMasterASKey:  VrMpfgsWBxZZuhhSQoIUlg == \nPropagateTime: 5\nRegisterPath:  true \nRegisterTime: 5  python3 sub/scion-viz/python/as_viewer.py 1-1045 -crt\n\nSCION AS Viewer ( src )  1-1045  =======================  None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-AS1045-V0.crt { \n     0 :  { \n         EncAlgorithm :  curve25519xsalsa20poly1305 ,\n         Signature :  VlJptnORObEmVQDvofOcN/2i83w2/j5vk/DKFMY508IC+fkWiyMZ/XQCp4sOWMc8cMiJHObdiI99GWz/wZXGDQ== ,\n         IssuingTime : 1511289459,\n         SubjectSigKey :  Ushs6XHb/uypmGzcmHLA3Xay4FpsrSbrKJTWU0JeesQ= ,\n         SignAlgorithm :  ed25519 ,\n         Subject :  1-1045 ,\n         TRCVersion : 0,\n         ExpirationTime : 1542825459,\n         SubjectEncKey :  4rQyFxRCx+eR7ygPYG96WQV9rKLl7RFY0lzXm1r2wg4= ,\n         Comment :  AS Certificate ,\n         Issuer :  1-1 ,\n         CanIssue : false,\n         Version : 0\n     } ,\n     1 :  { \n         EncAlgorithm :  curve25519xsalsa20poly1305 ,\n         Signature :  G4K+h8C8flqOaGR6Upt483vm4agQeoY57XvK2Ljo7uI/7u3yUcd3rlONG/7YfrHGlYSrlcLcpzPFvu9knyMFDQ== ,\n         IssuingTime : 1499177015,\n         SubjectSigKey :  rRfaiQA8CIPWpRD5pH6rDeadutCTB+Hi+6YRh2zPS1c= ,\n         SignAlgorithm :  ed25519 ,\n         Subject :  1-1 ,\n         TRCVersion : 0,\n         ExpirationTime : 1530713015,\n         SubjectEncKey :  448SpoiC4OApC2UxyL8x9yFunPZ9n9Ms/AzQLMXQMmM= ,\n         Comment :  Core AS Certificate ,\n         Issuer :  1-1 ,\n         CanIssue : true,\n         Version : 0\n     }  }   python3 sub/scion-viz/python/as_viewer.py 1-1045 -trc\n\nSCION AS Viewer ( src )  1-1045  =======================  None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-V0.trc { \n     QuorumCAs : 3,\n     Signatures :  { \n         1-1 :  B89Z3cWTzW3j4r02b/zLMuAn1/PiF0meEa9/6/AITiyN3YGRpNNer5aD/uTziMX9IfPcUP9rEXlXKs8PCdVlBg== \n     } ,\n     GracePeriod : 18000,\n     RootRainsKey :  dns_srv_addr ,\n     CreationTime : 1499177015,\n     PKILogs :  {} ,\n     ISDID : 1,\n     CoreCAs :  { \n         1-1 :  { \n             OfflineKey :  AX0kRbqJfdnfNcpC0XMSiQuLCqQJabp8HRi6BiAKPXo= ,\n             OfflineKeyAlg :  Ed25519 ,\n             OnlineKey :  VJvKbgHOsYbHlr6SGGssszGQvAtu+zXCTAJkYOCPr38= ,\n             OnlineKeyAlg :  Ed25519 \n         } \n     } ,\n     Quarantine : true,\n     Description :  ISD 1 ,\n     QuorumOwnTRC : 2,\n     RootCAs :  { \n         CA1-1 :  MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrPtywDofkLN4So+AhCDRsn0xeUtAp3zoa4onULpsSbdo5lj8p0nfafKplOJ7uP4txMbn8FtTcyau5W7BbQodXl/Xa6Elu4u9nyb6UgNpzmiUyCp/5TGRicv3MKSLpVZQukuj6weHLL2GGwz58qnygqoRzvsNMugwP46PZHKLmx7hg3IOR10MDDax7dtAMlzvJJWjLeMGytf75U6b5JFK2366oaDroQhhGh2TL228+3rcvMMcB/TVxHBrzGKE+uTI8XnspMGo42lN3ZzaOOvbacXH5s/Cdf3l6j6x1GdE0OHFLB2vRaKFpBN/BdW7HhDHqy/u+9/Vjh6eiOoDODMBQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUchmrQ0w9YIrX1VjicXPcqVrouWswDQYJKoZIhvcNAQELBQADggEBAGCK0U5GFftXaRfaqgY7/dEeW3qk4zXPyCERd5la2KW8I1A4jUJ5yYZJTOovFe9Mi2NgyUG62NxN52mODNSRazZ+HxwmXVZtgUx9PEYMQVvFKoirsBbpxnx7Bnt1h9Fo0QVe1VGk0kYQ1sj/1/J4wperRDgy8bDBFB/JznY7z9S9HxfFNUgkmnMI53u/La4Yl18wB6sFNIqTeNwXNihzNWO1f3N9J9OMTjG0bjUMximNPDhUF7kCwIAXz3+C6besEqqCYq6mvcGchCL9H/zpw8vGJjwXPLbqpx0ewHlyPzEbCZqhy4kmHAodl5XU2ghuwCV/e7mSetuMlvSQPVtBXEY= ,\n         CA1-3 :  MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoVanBcuF4ypz1U9aCMgVLLbTMI356RlmK1g2njfvfvq1ElEt1WRyWRNPNSMx6xamD5OFedODgRdbpdYvcFK89cK4BbRLSSAZ13RpAmld0RnlRAxDvUKqUcfeqz5uiuQ5lVJ+zyyKJoSea/quooAyehGVEb0qo0g1EyffWGf/E4awkDXT+w6y14cGO9r4vrPiD+re5Ufs+ht5z/AwQ9xkK6Md5uaHoHRMd0GUkxy74ef9w5AoiysB+1/ZLoFKZyl1N+q+jUwx9C79zqicYDpBQWB3gFd19sq69ZlIyX76p6od2GSV8fvlsSD+MEdChfvPy1GFsoFE7zOBLYCXXXxkqwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU91ybA6o68Yd/bd4wRe92F08xq7MwDQYJKoZIhvcNAQELBQADggEBADByHaGbqrI3Z9cO11xzBPzJwyS2AkFOFZ+bWPtGUwvdxoO/kFw3JTIjxD1GPM/5HQB86tjOBLKCCgwCQG/i/ZlwNU61v9aleFbJjFa5HnfuKxHxe5jtnspXjx6TBLV6KZUE82nNMnQYczlrUURmJ4gJ+9U4tLQVkmAERhq8HbCnO5wNeKkgPfKT1L3lRZP17Rh6WNQsOlUksJG6m/e8xR/BkZ0yHQuZPDUlcl7c94pL84CW1qJ7PcH3Mbi+AK/MnSDE4qjz1xCyoXvlklAOe6QrzYYLV9uvBpNJAldfr4vKHHdmWACWj03y+1pbHUB9edXZhv+skmQfpWBh4wxC/dQ= ,\n         CA1-2 :  MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArS4eanUAEhbTtFi2zxo1YJYFG0IU/A7CD0WKyQL3TMK5HmAJY0rOth5MniTcx7OHCo4zcoMCTGXwtcfTHNnNyL3DKWoPpmjE0W8NbQpycgbcg8Wf/wBPXQ9eUKIlU7OUbIgWCOoxldr98A97N6sqxoo1u5EeNSUORYMiaEsbsgmKMxKj+jqwwJejTYL9sQLwktcXyW/sT27wBoiFeLWMpKEPp81qziub0dN42fSMgh0ZSBE68uAcwVAM3i6uT+4s+/5KoGehZ6KVjNT07TddSEcmc84Bb83oiKEThhc9xWyUOLVoIhQV/4PT6PA8fmpc1a6YfFRPSMj/Kzpl9clc9QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUVRLUZoMbGkH6PXwIFgv578NwXi8wDQYJKoZIhvcNAQELBQADggEBAJ4oYQOIR4RLsHUGGYI9IOaki0Pvfg9DvD61wTBfkypsIc4wYI0TVeggzloxSG9DVSMuV3UYXYF5xCV24oY4CTzIazZXKsg200g/vICDdxO4hpQDgihzdUkGRRCT+zR2zi5lnWS1TZ59F0fdaGH8jEySjU8YdGv7NPKshtTFN2tx02ZoyJBa0S239L46eT7dJeJeAo3MSvNJDrwP+IE3gjL+nOLjMUreZzz94Ueqzgg7dlpFeyKJFvQvv2tUQ+SUQCUJkWZIlaOKEdMExxSKmEyI+grbLPqXtl9yVAr5WzjQQCNqRFEf/XucKLXFWV5sC+BaoWPJCcmpwbhidHAhmZo= \n     } ,\n     Version : 0,\n     QuorumEEPKI : 2 }",
            "title": "Command-line AS Visualization"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/",
            "text": "Verifying SCION installation\n\n\nIntroduction\n\n\nAfter running your SCION infrastructure, it is necessary to verify tha it is working correctly.\n\n\nThere are several methods of doing this. Some of them are described in this post.\n\n\nRunning SCION-viz\n\n\nThe recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool \nSCION-viz\n\n\nInspecting log files\n\n\nThe SCION log files can be accessed with the following command:\n\n\ntail -f \n$SC\n/logs/bs*.DEBUG\n\n\n\n\n\nWhat to look for?\n\n\nTBA\n\n\n\n\nTip\n\n\nIf you are running the SCION virtual machine image, you can display the logs by running:\n\n\ncheckbeacons\n\n\nfrom any directory",
            "title": "Verifying the installation"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#verifying-scion-installation",
            "text": "",
            "title": "Verifying SCION installation"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#introduction",
            "text": "After running your SCION infrastructure, it is necessary to verify tha it is working correctly.  There are several methods of doing this. Some of them are described in this post.",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#running-scion-viz",
            "text": "The recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool  SCION-viz",
            "title": "Running SCION-viz"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#inspecting-log-files",
            "text": "The SCION log files can be accessed with the following command:  tail -f  $SC /logs/bs*.DEBUG",
            "title": "Inspecting log files"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#what-to-look-for",
            "text": "TBA   Tip  If you are running the SCION virtual machine image, you can display the logs by running:  checkbeacons  from any directory",
            "title": "What to look for?"
        },
        {
            "location": "/scion_tricks/setup_startup/",
            "text": "Run SCION and SCION-viz automatically on boot\n\n\nPrerequisites\n\n\nIt is necessary to have SCION successfully installed on your system before proceeding with this tutorial. Necessary steps for installing SCION can be found on following pages:\n\n\n\n\nInstalling SCION on Ubuntu x86-64\n\n\nInstalling SCION on Raspberry PI Ubuntu\n\n\n\n\n\n\nTip\n\n\nIf you are using SCION VM, SCION is already running on system boot so following steps are not required to be done manually.\n\n\n\n\nInstallation\n\n\nWe will create \nsystemd\n service that will be configured to run SCION infrastructure on system boot.\n\n\nStep One - Get template service files\n\n\nTo avoid creating service files from scratch, we can download templates from \nSCION Lab\n repository and customize them for current system. Downloaded template files have value \n_USER_\n instead of real system user so we will have to adjust it. Complete process can be finished with following commands:\n\n\nmkdir -p /tmp/scion_services\n\ncd\n /tmp/scion_services\n\nwget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion.service\nwget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion-viz.service\n\nsed -i \ns/_USER_/\n$USER\n/g\n *.service\n\n\n\n\n\nStep Two - Register services with systemd\n\n\nWe need to copy newly created services to systemd directory and enable them. This can be done with following commands:\n\n\nsudo cp *.service /etc/systemd/system/\n\nsudo systemctl \nenable\n scion.service\nsudo systemctl \nenable\n scion-viz.service\n\n\n\n\n\nConclusion\n\n\nThese steps should be sufficient to make SCION run on your system boot. Reboot the system and verify that everything works as expected.",
            "title": "Running SCION on system boot"
        },
        {
            "location": "/scion_tricks/setup_startup/#run-scion-and-scion-viz-automatically-on-boot",
            "text": "",
            "title": "Run SCION and SCION-viz automatically on boot"
        },
        {
            "location": "/scion_tricks/setup_startup/#prerequisites",
            "text": "It is necessary to have SCION successfully installed on your system before proceeding with this tutorial. Necessary steps for installing SCION can be found on following pages:   Installing SCION on Ubuntu x86-64  Installing SCION on Raspberry PI Ubuntu    Tip  If you are using SCION VM, SCION is already running on system boot so following steps are not required to be done manually.",
            "title": "Prerequisites"
        },
        {
            "location": "/scion_tricks/setup_startup/#installation",
            "text": "We will create  systemd  service that will be configured to run SCION infrastructure on system boot.",
            "title": "Installation"
        },
        {
            "location": "/scion_tricks/setup_startup/#step-one-get-template-service-files",
            "text": "To avoid creating service files from scratch, we can download templates from  SCION Lab  repository and customize them for current system. Downloaded template files have value  _USER_  instead of real system user so we will have to adjust it. Complete process can be finished with following commands:  mkdir -p /tmp/scion_services cd  /tmp/scion_services\n\nwget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion.service\nwget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion-viz.service\n\nsed -i  s/_USER_/ $USER /g  *.service",
            "title": "Step One - Get template service files"
        },
        {
            "location": "/scion_tricks/setup_startup/#step-two-register-services-with-systemd",
            "text": "We need to copy newly created services to systemd directory and enable them. This can be done with following commands:  sudo cp *.service /etc/systemd/system/\n\nsudo systemctl  enable  scion.service\nsudo systemctl  enable  scion-viz.service",
            "title": "Step Two - Register services with systemd"
        },
        {
            "location": "/scion_tricks/setup_startup/#conclusion",
            "text": "These steps should be sufficient to make SCION run on your system boot. Reboot the system and verify that everything works as expected.",
            "title": "Conclusion"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/",
            "text": "Updating gen directory\n\n\nIntroduction\n\n\nComplete configuration for SCION infrastructure is stored in \ngen\n directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data. \n\n\nContent for this directory can be created in several ways:\n\n\n\n\nUsing topology definition from \ntopology\n directory. \nDescribed in \nRunning SCION on local topology\n\n\nDownloading from \nSCIONLab Coordination Service\n. \nDescribed in \nConfiguring SCION Lab with OpenVPN\n.\n\n\nManually creating topology\n\n\n\n\nRestarting SCION infrastructure\n\n\nEvery time \ngen\n directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands:\n\n\ncd\n \n$SC\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\n\nAfter topology has been updated it is recommended to \nverify that its working correctly",
            "title": "Updating gen directory"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#updating-gen-directory",
            "text": "",
            "title": "Updating gen directory"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#introduction",
            "text": "Complete configuration for SCION infrastructure is stored in  gen  directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data.   Content for this directory can be created in several ways:   Using topology definition from  topology  directory.  Described in  Running SCION on local topology  Downloading from  SCIONLab Coordination Service .  Described in  Configuring SCION Lab with OpenVPN .  Manually creating topology",
            "title": "Introduction"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#restarting-scion-infrastructure",
            "text": "Every time  gen  directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands:  cd   $SC \n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Restarting SCION infrastructure"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#next-steps",
            "text": "After topology has been updated it is recommended to  verify that its working correctly",
            "title": "Next steps"
        },
        {
            "location": "/scion_tricks/updating_scion/",
            "text": "Updating SCION to newest version\n\n\nIntroduction\n\n\nOur implementation of SCION is still under development, and ScionLab sometimes upgrades the services to use new features from new versions.\nSome of these changes will break compatibility with past releases. In these cases, we will send an email notifying all the users of such changes.\n\n\nRunning SCION in a VM\n\n\nIf you run SCION inside a VM, SCION should be kept up to date automatically. With this automatic process you don't have to worry about the updates. Still, if you are interested in knowing how we do it, read the next subsection.\n\n\nHow is my SCION VM kept up to date?\n\n\nYou can always check that is the case by listing the running timers and looking for the one upgrading SCION:\n\n\nsudo systemctl list-timers\nNEXT                         LEFT        LAST                         PASSED       UNIT                         ACTIVATES\nWed 2018-04-18 16:35:24 UTC  8min left   Wed 2018-04-18 16:25:23 UTC  1min 36s ago scionupgrade.timer           scionupgrade.service\n\n\n\n\n\nThis indicates we have the upgrade service installed. The upgrade service is checking every day that the local git repository is up to date with the \nscionlab\n branch. This is done by \nrebasing\n the local copy on top of the branch:\n\n\ncd\n \n$SC\n\ngit fetch origin scionlab\ngit rebase origin/scionlab\n\n\n\n\n\nWe do it this to maximize the changes of successfully updating even if you had local changes done on top.\nThe automatic process will restart SCION if it detected that we downloaded a new version.\n\n\nRunning SCION in a dedicated machine\n\n\nThis type of installations need manual update. If you received an email from us saying that we are going to update the infrastructure, and that the update contains \nbreaking changes\n, you will need to follow these steps if you want to continue using SCION in ScionLab.\n\n\nManual steps to update\n\n\nWe can do manually what we automatically do inside the SCION VMs, and these simple steps will update your installation of SCION.\nAs our SCION implementation is hosted on git, updating to the latest version is as simple as \npull\n-ing changes or \nrebase\n-ing.\nTo download the newest version first navigate to SCION root directory:\n\n\ncd\n \n$SC\n\n\n\n\n\n\nthen fetch newest changes from remote \nscionlab\n branch and rebase:\n\n\ngit fetch origin scionlab\ngit rebase origin/scionlab\n\n\n\n\n\nARM devices\n\n\nIf this is an ARM devices and we have the sources previously patched (probably they are if this is ARM), we will need to apply another patch\nas explained in \nInstalling SCION on Ubuntu MATE 16.04 - Raspberry PI\n\n\ncurl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/ab6578ed400885bb5ea7767cb10a2686f3e1db6d/arm.patch \n|\n patch -p1\n\n\n\n\n\nYou may find some some output informing that some hunks failed to patch. This is typically okay, as it represents portions of code that we had patched before the update and don't need to be patched again. As an example of such output we have:\n\n\npatching file c/dispatcher/dispatcher.c\nHunk \n#1 FAILED at 837.\n\n\n1\n out of \n1\n hunk FAILED -- saving rejects to file c/dispatcher/dispatcher.c.rej\npatching file c/lib/scion/address.h\npatching file c/lib/scion/checksum_bench.c\nHunk \n#1 FAILED at 40.\n\nHunk \n#2 FAILED at 57.\n\n\n2\n out of \n2\n hunks FAILED -- saving rejects to file c/lib/scion/checksum_bench.c.rej\n\n\n\n\n\nRebuild SCION\n\n\nIf git reports that new modifications were downloaded when we rebased, it is necessary to restart scion infrastructure:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh clean\n./env/deps\n./scion.sh run\n\n\n\n\n\nYour SCION installation should be now up to date.\n\n\nLast step to finish the update\n\n\nAfter the update, the applications that are not delivered directly with SCION (e.g. \nbwtester\n or your own applications) will need to be rebuilt. You will have to follow the appropriate steps for each one of them reading their own documentation. E.g. \nbwtester\n has its own tutorial on how to build it.",
            "title": "Updating SCION"
        },
        {
            "location": "/scion_tricks/updating_scion/#updating-scion-to-newest-version",
            "text": "",
            "title": "Updating SCION to newest version"
        },
        {
            "location": "/scion_tricks/updating_scion/#introduction",
            "text": "Our implementation of SCION is still under development, and ScionLab sometimes upgrades the services to use new features from new versions.\nSome of these changes will break compatibility with past releases. In these cases, we will send an email notifying all the users of such changes.",
            "title": "Introduction"
        },
        {
            "location": "/scion_tricks/updating_scion/#running-scion-in-a-vm",
            "text": "If you run SCION inside a VM, SCION should be kept up to date automatically. With this automatic process you don't have to worry about the updates. Still, if you are interested in knowing how we do it, read the next subsection.",
            "title": "Running SCION in a VM"
        },
        {
            "location": "/scion_tricks/updating_scion/#how-is-my-scion-vm-kept-up-to-date",
            "text": "You can always check that is the case by listing the running timers and looking for the one upgrading SCION:  sudo systemctl list-timers\nNEXT                         LEFT        LAST                         PASSED       UNIT                         ACTIVATES\nWed 2018-04-18 16:35:24 UTC  8min left   Wed 2018-04-18 16:25:23 UTC  1min 36s ago scionupgrade.timer           scionupgrade.service  This indicates we have the upgrade service installed. The upgrade service is checking every day that the local git repository is up to date with the  scionlab  branch. This is done by  rebasing  the local copy on top of the branch:  cd   $SC \ngit fetch origin scionlab\ngit rebase origin/scionlab  We do it this to maximize the changes of successfully updating even if you had local changes done on top.\nThe automatic process will restart SCION if it detected that we downloaded a new version.",
            "title": "How is my SCION VM kept up to date?"
        },
        {
            "location": "/scion_tricks/updating_scion/#running-scion-in-a-dedicated-machine",
            "text": "This type of installations need manual update. If you received an email from us saying that we are going to update the infrastructure, and that the update contains  breaking changes , you will need to follow these steps if you want to continue using SCION in ScionLab.",
            "title": "Running SCION in a dedicated machine"
        },
        {
            "location": "/scion_tricks/updating_scion/#manual-steps-to-update",
            "text": "We can do manually what we automatically do inside the SCION VMs, and these simple steps will update your installation of SCION.\nAs our SCION implementation is hosted on git, updating to the latest version is as simple as  pull -ing changes or  rebase -ing.\nTo download the newest version first navigate to SCION root directory:  cd   $SC   then fetch newest changes from remote  scionlab  branch and rebase:  git fetch origin scionlab\ngit rebase origin/scionlab",
            "title": "Manual steps to update"
        },
        {
            "location": "/scion_tricks/updating_scion/#arm-devices",
            "text": "If this is an ARM devices and we have the sources previously patched (probably they are if this is ARM), we will need to apply another patch\nas explained in  Installing SCION on Ubuntu MATE 16.04 - Raspberry PI  curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/ab6578ed400885bb5ea7767cb10a2686f3e1db6d/arm.patch  |  patch -p1  You may find some some output informing that some hunks failed to patch. This is typically okay, as it represents portions of code that we had patched before the update and don't need to be patched again. As an example of such output we have:  patching file c/dispatcher/dispatcher.c\nHunk  #1 FAILED at 837.  1  out of  1  hunk FAILED -- saving rejects to file c/dispatcher/dispatcher.c.rej\npatching file c/lib/scion/address.h\npatching file c/lib/scion/checksum_bench.c\nHunk  #1 FAILED at 40. \nHunk  #2 FAILED at 57.  2  out of  2  hunks FAILED -- saving rejects to file c/lib/scion/checksum_bench.c.rej",
            "title": "ARM devices"
        },
        {
            "location": "/scion_tricks/updating_scion/#rebuild-scion",
            "text": "If git reports that new modifications were downloaded when we rebased, it is necessary to restart scion infrastructure:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh clean\n./env/deps\n./scion.sh run  Your SCION installation should be now up to date.",
            "title": "Rebuild SCION"
        },
        {
            "location": "/scion_tricks/updating_scion/#last-step-to-finish-the-update",
            "text": "After the update, the applications that are not delivered directly with SCION (e.g.  bwtester  or your own applications) will need to be rebuilt. You will have to follow the appropriate steps for each one of them reading their own documentation. E.g.  bwtester  has its own tutorial on how to build it.",
            "title": "Last step to finish the update"
        },
        {
            "location": "/scion_tricks/wireshark/",
            "text": "Adding Wireshark and Tshark SCION protocol dissector\n\n\nIntroduction\n\n\nIn this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging\nof SCION protocol. You can read more on what protocol dissector does on \nWireshark docs\n\n\nPrerequisites\n\n\nIn order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system.\n\n\n\n\nTip\n\n\nRunning Wireshark is recommended on machines with graphical interface. \n\n\n\n\nInstall Wireshark\n\n\nIn order to install Wireshark, follow installation guide on \nWireshark website\n for your platform. \nAlternatively on Ubuntu system you can run following commands:\n\n\nsudo add-apt-repository ppa:wireshark-dev/stable\nsudo apt-get update\nsudo apt-get install wireshark\n\n\n\n\n\nInstall Tshark\n\n\nIn case you want to install Tshark on Ubuntu simply run:\n\n\nsudo apt install tshark\n\n\n\n\n\nStep One - Finding plugin directory\n\n\nWe need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.\n\n\nWireshark\n\n\nFrom \nHelp\n menu select \nAbout Wireshark\n and in newly opened window select \nFolders\n tab. \nThere are paths to global and local plugin directory.\n\n\nIn this tutorial we will use global plugin directory which is usually:\n\n\n/usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6\n\n\n\n\n\nPlugins from global plugin directory are available to all users, while local is only for currently running user.\n\n\nTshark\n\n\nIn order to find the directory where Tshark is loading plugins from we can run following command:\n\n\ntshark -G plugins\n\n\n\n\n\nOutput will look something like this:\n\n\nopcua.so    1.1.0   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so\nirda.so 0.0.6   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so\nmate.so 1.0.0a  dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so\n...\n\n\n\n\n\nExamining output we can conclude that plugins are being loaded from \n\n\n/usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/\n\n\n\n\n\nSo we will use that for our plugin directory.\n\n\nStep Two - Adding plugin\n\n\nWireshark/Tshark plugin is located in SCION project at \ntools/wireshark/scion.lua\n.\n\n\nIt is necessary to download \nscion.lua\n file and place it in plugin directory acquired in previous step.\n\n\nIn Ubuntu system this can be done with following command:\n\n\nsudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua",
            "title": "Adding Wireshark dissector"
        },
        {
            "location": "/scion_tricks/wireshark/#adding-wireshark-and-tshark-scion-protocol-dissector",
            "text": "",
            "title": "Adding Wireshark and Tshark SCION protocol dissector"
        },
        {
            "location": "/scion_tricks/wireshark/#introduction",
            "text": "In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging\nof SCION protocol. You can read more on what protocol dissector does on  Wireshark docs",
            "title": "Introduction"
        },
        {
            "location": "/scion_tricks/wireshark/#prerequisites",
            "text": "In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system.   Tip  Running Wireshark is recommended on machines with graphical interface.",
            "title": "Prerequisites"
        },
        {
            "location": "/scion_tricks/wireshark/#install-wireshark",
            "text": "In order to install Wireshark, follow installation guide on  Wireshark website  for your platform. \nAlternatively on Ubuntu system you can run following commands:  sudo add-apt-repository ppa:wireshark-dev/stable\nsudo apt-get update\nsudo apt-get install wireshark",
            "title": "Install Wireshark"
        },
        {
            "location": "/scion_tricks/wireshark/#install-tshark",
            "text": "In case you want to install Tshark on Ubuntu simply run:  sudo apt install tshark",
            "title": "Install Tshark"
        },
        {
            "location": "/scion_tricks/wireshark/#step-one-finding-plugin-directory",
            "text": "We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.",
            "title": "Step One - Finding plugin directory"
        },
        {
            "location": "/scion_tricks/wireshark/#wireshark",
            "text": "From  Help  menu select  About Wireshark  and in newly opened window select  Folders  tab. \nThere are paths to global and local plugin directory.  In this tutorial we will use global plugin directory which is usually:  /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6  Plugins from global plugin directory are available to all users, while local is only for currently running user.",
            "title": "Wireshark"
        },
        {
            "location": "/scion_tricks/wireshark/#tshark",
            "text": "In order to find the directory where Tshark is loading plugins from we can run following command:  tshark -G plugins  Output will look something like this:  opcua.so    1.1.0   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so\nirda.so 0.0.6   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so\nmate.so 1.0.0a  dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so\n...  Examining output we can conclude that plugins are being loaded from   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/  So we will use that for our plugin directory.",
            "title": "Tshark"
        },
        {
            "location": "/scion_tricks/wireshark/#step-two-adding-plugin",
            "text": "Wireshark/Tshark plugin is located in SCION project at  tools/wireshark/scion.lua .  It is necessary to download  scion.lua  file and place it in plugin directory acquired in previous step.  In Ubuntu system this can be done with following command:  sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua",
            "title": "Step Two - Adding plugin"
        },
        {
            "location": "/scionbox/scionbox/",
            "text": "SCION Box\n\n\n\n\nNote\n\n\nThe SCION box feature is currently not operational. Please come back later.\n\n\n\n\nIntroduction\n\n\nThis tutorial introduces you to SCION box, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request \nhere\n in particular.\n\n\nSetting up the PCEngines device\n\n\nYou received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface).\nYou can then check on the scion-coordinator on your \nuser page\n that you device status is online.\n\n\n\n\nHint\n\n\nIn case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface.\n\n\nThe SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it.\n\n\n\n\nMake user of the device\n\n\nThe SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the \nSCION book\n.\nIn addition, SCION boxes also run ithe SCIONviz server which allows you to visualize the paths you AS knows about. You can connect to SCIONviz by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use SCIONviz, please see the \nSCIONviz tutorial\n (but make sure to use the address mentioned here).\n\n\nSetup an endhost and connect it via the SCION box\n\n\nSetup an endhost and configure it as described in \nConfiguring SCION endhost topology\n.\nThen connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address.\n\n\nNext steps\n\n\nCheck out the \nSCION code base\n and start contributing.",
            "title": "SCION box first steps"
        },
        {
            "location": "/scionbox/scionbox/#scion-box",
            "text": "Note  The SCION box feature is currently not operational. Please come back later.",
            "title": "SCION Box"
        },
        {
            "location": "/scionbox/scionbox/#introduction",
            "text": "This tutorial introduces you to SCION box, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request  here  in particular.",
            "title": "Introduction"
        },
        {
            "location": "/scionbox/scionbox/#setting-up-the-pcengines-device",
            "text": "You received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface).\nYou can then check on the scion-coordinator on your  user page  that you device status is online.   Hint  In case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface.  The SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it.",
            "title": "Setting up the PCEngines device"
        },
        {
            "location": "/scionbox/scionbox/#make-user-of-the-device",
            "text": "The SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the  SCION book .\nIn addition, SCION boxes also run ithe SCIONviz server which allows you to visualize the paths you AS knows about. You can connect to SCIONviz by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use SCIONviz, please see the  SCIONviz tutorial  (but make sure to use the address mentioned here).",
            "title": "Make user of the device"
        },
        {
            "location": "/scionbox/scionbox/#setup-an-endhost-and-connect-it-via-the-scion-box",
            "text": "Setup an endhost and configure it as described in  Configuring SCION endhost topology .\nThen connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address.",
            "title": "Setup an endhost and connect it via the SCION box"
        },
        {
            "location": "/scionbox/scionbox/#next-steps",
            "text": "Check out the  SCION code base  and start contributing.",
            "title": "Next steps"
        }
    ]
}