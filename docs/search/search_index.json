{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to SCION Tutorials\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication.\n\n\nGetting started\n\u00b6\n\n\nThere are generally two ways of installing and running SCION infrastructure. The first way is by downloading and running a preconfigured Virtual Machine (VM), while the second way is manual installation on an Ubuntu 16.04 platform. We cover both approaches in this tutorial.\n\n\nWe suggest exploring the tips and tricks section below to learn how to use the infrastructure.\n\n\nRunning SCION infrastructure in a VM\n\u00b6\n\n\nThe easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps.\n\n\n\n\nRunning SCION VM over OpenVPN\n\n\nRunning SCION VM with static public IP\n\n\n\n\nConfiguring SCION infrastructure manually\n\u00b6\n\n\nThe following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated Ubuntu 16.04 host (without a VM).\n\n\n1. Installing SCION on different platforms:\n\u00b6\n\n\n\n\nInstalling SCION on Ubuntu 16.04 x86 machine\n\n\nInstalling SCION on Ubuntu MATE 16.04 - Raspberry PI\n\n\n\n\n2. Setting up SCION topology\n\u00b6\n\n\n\n\nConfiguring local topology\n\n\nConfiguring AS and connecting to SCION network for devices with public static IP\n\n\nConfiguring AS and connecting to SCION network for devices with public static IP behind a NAT\n\n\nConfiguring AS and connecting to SCION network using OpenVPN\n\n\nConfiguring SCION endhost\n\n\n\n\nUsing SCION in projects\n\u00b6\n\n\n\n\nFetching sensor readings or time stamps\n\n\nFetching a camera image over the SCION network\n\n\nRunning the bandwidthtester application\n\n\nRunning AS Visualization\n\n\nBrowser AS Visualization\n\n\nCommand-line AS Visualization\n\n\n\n\nSCION tips and tricks\n\u00b6\n\n\n\n\nVerifying the installation\n\n\nUpdating gen directory\n\n\nUpdating SCION to a new version\n\n\nAdding Wireshark or Tshark dissector plugin\n\n\n\n\nSCIONLab specifics\n\u00b6\n\n\n\n\nSCION box first steps",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-scion-tutorials",
            "text": "",
            "title": "Welcome to SCION Tutorials"
        },
        {
            "location": "/#introduction",
            "text": "This website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication.",
            "title": "Introduction"
        },
        {
            "location": "/#getting-started",
            "text": "There are generally two ways of installing and running SCION infrastructure. The first way is by downloading and running a preconfigured Virtual Machine (VM), while the second way is manual installation on an Ubuntu 16.04 platform. We cover both approaches in this tutorial.  We suggest exploring the tips and tricks section below to learn how to use the infrastructure.",
            "title": "Getting started"
        },
        {
            "location": "/#running-scion-infrastructure-in-a-vm",
            "text": "The easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps.   Running SCION VM over OpenVPN  Running SCION VM with static public IP",
            "title": "Running SCION infrastructure in a VM"
        },
        {
            "location": "/#configuring-scion-infrastructure-manually",
            "text": "The following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated Ubuntu 16.04 host (without a VM).",
            "title": "Configuring SCION infrastructure manually"
        },
        {
            "location": "/#1-installing-scion-on-different-platforms",
            "text": "Installing SCION on Ubuntu 16.04 x86 machine  Installing SCION on Ubuntu MATE 16.04 - Raspberry PI",
            "title": "1. Installing SCION on different platforms:"
        },
        {
            "location": "/#2-setting-up-scion-topology",
            "text": "Configuring local topology  Configuring AS and connecting to SCION network for devices with public static IP  Configuring AS and connecting to SCION network for devices with public static IP behind a NAT  Configuring AS and connecting to SCION network using OpenVPN  Configuring SCION endhost",
            "title": "2. Setting up SCION topology"
        },
        {
            "location": "/#using-scion-in-projects",
            "text": "Fetching sensor readings or time stamps  Fetching a camera image over the SCION network  Running the bandwidthtester application  Running AS Visualization  Browser AS Visualization  Command-line AS Visualization",
            "title": "Using SCION in projects"
        },
        {
            "location": "/#scion-tips-and-tricks",
            "text": "Verifying the installation  Updating gen directory  Updating SCION to a new version  Adding Wireshark or Tshark dissector plugin",
            "title": "SCION tips and tricks"
        },
        {
            "location": "/#scionlab-specifics",
            "text": "SCION box first steps",
            "title": "SCIONLab specifics"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/",
            "text": "Running SCION in a virtual machine \u2013 VPN approach\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to proxy traffic.\n\n\n\n\nTip\n\n\nIf you have a static public IP address and you can receive traffic on UDP port 50000, you should consider \nrunning the VM without VPN\n.\n\n\n\n\nPrerequisites\n\u00b6\n\n\nRunning SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system.\n\n\nStep One \u2013 install VirtualBox\n\u00b6\n\n\nTo install VirtualBox, follow the steps on the \nVirtualBox download page\n for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager:\n\n\napt-get install virtualbox\n\n\n\n\n\nStep Two \u2013 install Vagrant\n\u00b6\n\n\nTo install Vagrant, follow the steps on the \nVagrant download page\n for your system. Also, on Ubuntu you could install it via your package manager:\n\n\napt-get install vagrant\n\n\n\n\n\nRunning SCION\n\u00b6\n\n\nRunning SCION consists of several steps, registering a SCION VM on \nSCIONLab Coordination Service\n, deploying the VM, and running the SCION infrastructure.\n\n\nStep One \u2013 download a SCION VM\n\u00b6\n\n\nIn order to download a VM, you must login to \nSCIONLab Coordination Service\n. In case you don't yet have an account, follow the registration process.\n\n\nAfter logging in, download a VM configuration by clicking on \nCreate and Download SCIONLab VM Configuration\n as presented in the image below:\n\n\n\n\nStep Two \u2013 create and run the VM\n\u00b6\n\n\nWhen the configuration finishes downloading, extract the archive content in a separate directory. On a Linux system, simply running \ntar\n command will extract the contents in a separate subdirectory named as your email:\n\n\ntar -xvf scion_lab_*.tar.gz\n\n\n\n\n\nAfter extracting the newly downloaded content, navigate to the extracted directory. It should have the following structure:\n\n\n\u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AS1029\n\u2502           \u2514 ...\n\u2502\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 run.sh\n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\n\nVerifying that the structure is the same, you can begin the setup by running:\n\n\nvagrant box add scion/ubuntu-16.04-64-scion\nvagrant box update\nvagrant up\n\n\n\n\n\nYou will be asked for your password. The installation process will take around 10 minutes.\n\n\nStep Three \u2013 run the SCION infrastructure\n\u00b6\n\n\nAfter successful installation of VM, you will be automatically ssh'ed into machine.\n\n\nTo run SCION you can navigate to the source directory and start the infrastructure with following commands:\n\n\nvagrant ssh\n\n\n\n\n\nThe SCION infrastructure is automatically started at boot time of your VM. You can control it using the \nscion.sh\n script located at \n~/go/src/github.com/netsec-ethz/scion/\n. You can easily get to that directory with \ncd $SC\n.\n\n\nNext steps\n\u00b6\n\n\nAfter running SCION infrastructure it is necessary to verify that its running properly. This is covered in tutorial \nVerifying SCION Installation",
            "title": "Virtual machine with VPN"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#running-scion-in-a-virtual-machine-vpn-approach",
            "text": "",
            "title": "Running SCION in a virtual machine &ndash; VPN approach"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#introduction",
            "text": "This tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to proxy traffic.   Tip  If you have a static public IP address and you can receive traffic on UDP port 50000, you should consider  running the VM without VPN .",
            "title": "Introduction"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#prerequisites",
            "text": "Running SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system.",
            "title": "Prerequisites"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-one-install-virtualbox",
            "text": "To install VirtualBox, follow the steps on the  VirtualBox download page  for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager:  apt-get install virtualbox",
            "title": "Step One &ndash; install VirtualBox"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-two-install-vagrant",
            "text": "To install Vagrant, follow the steps on the  Vagrant download page  for your system. Also, on Ubuntu you could install it via your package manager:  apt-get install vagrant",
            "title": "Step Two &ndash; install Vagrant"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#running-scion",
            "text": "Running SCION consists of several steps, registering a SCION VM on  SCIONLab Coordination Service , deploying the VM, and running the SCION infrastructure.",
            "title": "Running SCION"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-one-download-a-scion-vm",
            "text": "In order to download a VM, you must login to  SCIONLab Coordination Service . In case you don't yet have an account, follow the registration process.  After logging in, download a VM configuration by clicking on  Create and Download SCIONLab VM Configuration  as presented in the image below:",
            "title": "Step One &ndash; download a SCION VM"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-two-create-and-run-the-vm",
            "text": "When the configuration finishes downloading, extract the archive content in a separate directory. On a Linux system, simply running  tar  command will extract the contents in a separate subdirectory named as your email:  tar -xvf scion_lab_*.tar.gz  After extracting the newly downloaded content, navigate to the extracted directory. It should have the following structure:  \u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AS1029\n\u2502           \u2514 ...\n\u2502\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 run.sh\n\u2514\u2500\u2500 Vagrantfile  Verifying that the structure is the same, you can begin the setup by running:  vagrant box add scion/ubuntu-16.04-64-scion\nvagrant box update\nvagrant up  You will be asked for your password. The installation process will take around 10 minutes.",
            "title": "Step Two &ndash; create and run the VM"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#step-three-run-the-scion-infrastructure",
            "text": "After successful installation of VM, you will be automatically ssh'ed into machine.  To run SCION you can navigate to the source directory and start the infrastructure with following commands:  vagrant ssh  The SCION infrastructure is automatically started at boot time of your VM. You can control it using the  scion.sh  script located at  ~/go/src/github.com/netsec-ethz/scion/ . You can easily get to that directory with  cd $SC .",
            "title": "Step Three &ndash; run the SCION infrastructure"
        },
        {
            "location": "/virtual_machine_setup/dynamic_ip/#next-steps",
            "text": "After running SCION infrastructure it is necessary to verify that its running properly. This is covered in tutorial  Verifying SCION Installation",
            "title": "Next steps"
        },
        {
            "location": "/virtual_machine_setup/static_ip/",
            "text": "Running SCION in a virtual machine \u2013 static public IP address\n\u00b6\n\n\n\n\nWarning\n\n\nIf you \ndo not\n have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead \nconnect to the SCION network via VPN\n.\n\n\n\n\nSimply follow all the steps in the \ntutorial for a vpn-based setup\n until \nStep One \u2013 download a SCION VM\n\n\nThere, instead of directly clicking on \nCreate and Download SCIONLab VM Configuration\n, first select \nMy host has a static public IP address and can receive traffic at port 50000.\n and enter your host's public IP address in the input field.\n\n\nAfterwards, follow all subsequent steps in the \ntutorial for a vpn-based setup\n.\n\n\n\n\nTroubleshooting\n\n\nMake sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running.",
            "title": "Virtual machine with static public IP"
        },
        {
            "location": "/virtual_machine_setup/static_ip/#running-scion-in-a-virtual-machine-static-public-ip-address",
            "text": "Warning  If you  do not  have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead  connect to the SCION network via VPN .   Simply follow all the steps in the  tutorial for a vpn-based setup  until  Step One \u2013 download a SCION VM  There, instead of directly clicking on  Create and Download SCIONLab VM Configuration , first select  My host has a static public IP address and can receive traffic at port 50000.  and enter your host's public IP address in the input field.  Afterwards, follow all subsequent steps in the  tutorial for a vpn-based setup .   Troubleshooting  Make sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running.",
            "title": "Running SCION in a virtual machine &ndash; static public IP address"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/",
            "text": "Building SCION on Ubuntu 16.04 x86-64\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis tutorial will guide you through the steps required to install SCION on Ubuntu 16.04. This also includes the steps required to install the necessary packages. For details on how to build SCION on a Raspberry Pi, please take a look at \nhow to build SCION on a Raspberry Pi\n.\n\n\nPrerequisites\n\u00b6\n\n\nThe following steps will guide you through the installation of the tools necessary for running SCION.\n\n\nStep One \u2013 install Go\n\u00b6\n\n\nIn order to run SCION, you must have Go version 1.8.x installed. Installation will automatically install right GO version, but that might break other Go software that you are running.\n\n\nStep Two \u2013 configure your Go workspace\n\u00b6\n\n\n\n\nTip\n\n\nYou can skip this step if you have Go workspaces already configured on your machine.\n\n\n\n\nIt is necessary to set up your \nGo workspace\n. The following commands will create a default workspace at \n~/go\n and export it as the \n$GOPATH\n environment variable:\n\n\necho\n \n'export GOPATH=\"$HOME/go\"'\n >> ~/.profile\n\nsource\n ~/.profile\nmkdir -p \n\"\n$GOPATH\n/bin\"\n\n\necho\n \n'PATH=$PATH:$GOPATH/bin'\n >> ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nSCION installation\n\u00b6\n\n\nStep One \u2013 clone the SCION repository\n\u00b6\n\n\nAfter the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands:\n\n\nmkdir -p \n\"\n$GOPATH\n/src/github.com/netsec-ethz\"\n\n\ncd\n \n\"\n$GOPATH\n/src/github.com/netsec-ethz\"\n\ngit clone --recursive -b scionlab git@github.com:netsec-ethz/scion\n\n\n\n\n\n\n\nTroubleshooting\n\n\nIf the machine doesn't have generated SSH keys or the SSH keys are not assigned to the github account, the checkout will fail with the error \nPermission denied (publickey)\n. There are two ways to resolve this problem:\n\n\n\n\nChanging the checkout using ssh to https:\n\ngit config --global url.https://github.com/.insteadOf git@github.com:\n\n\nAssign SSH keys to Github account, detailed instruction can be found on \nGithub help\n\n\n\n\n\n\nThis will clone SCION appropriate directory in the Go workspace. We will create export environment variable \nSP\n that will point to SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:\n\n\necho\n \n'export SC=\"$GOPATH/src/github.com/netsec-ethz/scion\"'\n >> ~/.profile\n\nsource\n ~/.profile\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Two \u2013 configure python path variable\n\u00b6\n\n\nSome SCION components like SCIONviz require Python libraries which are located in scion root directory. In order to make them accessible, exporting \nPYTHONPATH\n environment variable is required:\n\n\necho\n \n'export PYTHONPATH=\"$SC/python:$SC\"'\n >> ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nStep Three \u2013 finish installing the required packages\n\u00b6\n\n\nIn order to instal dependencies, simply issue the following command while in the root directory of the SCION installation:\n\n\nbash -c \n'yes | GO_INSTALL=true ./env/deps'\n\n\n\n\n\n\n\n\nNote\n\n\nYou might be asked for sudo password after running the command\n\n\n\n\nThis will finish installing the required dependencies and system packages.\n\n\nStep Four \u2013 configure the host Zookeeper instance\n\u00b6\n\n\nReplacing \n/etc/zookeeper/conf/zoo.cfg\n with the file \ndocker/zoo.cfg\n is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).\n\n\ncp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg\n\n\n\n\n\nNext steps\n\u00b6\n\n\nAfter finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:\n\n\n\n\nRunning a local network topology\n \u2013 Generate a sample topology and run SCION locally\n\n\nConnecting to SCIONLab with a static public IP address\n \u2013 Connect to the already running SCION topology\n\n\nConnecting to SCIONLab without a static public IP address\n \u2013 Connect to the already running SCION topology through an OpenVPN tunnel",
            "title": "Ubuntu 16.04 x86-64"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#building-scion-on-ubuntu-1604-x86-64",
            "text": "",
            "title": "Building SCION on Ubuntu 16.04 x86-64"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#introduction",
            "text": "This tutorial will guide you through the steps required to install SCION on Ubuntu 16.04. This also includes the steps required to install the necessary packages. For details on how to build SCION on a Raspberry Pi, please take a look at  how to build SCION on a Raspberry Pi .",
            "title": "Introduction"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#prerequisites",
            "text": "The following steps will guide you through the installation of the tools necessary for running SCION.",
            "title": "Prerequisites"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-one-install-go",
            "text": "In order to run SCION, you must have Go version 1.8.x installed. Installation will automatically install right GO version, but that might break other Go software that you are running.",
            "title": "Step One &ndash; install Go"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-two-configure-your-go-workspace",
            "text": "Tip  You can skip this step if you have Go workspaces already configured on your machine.   It is necessary to set up your  Go workspace . The following commands will create a default workspace at  ~/go  and export it as the  $GOPATH  environment variable:  echo   'export GOPATH=\"$HOME/go\"'  >> ~/.profile source  ~/.profile\nmkdir -p  \" $GOPATH /bin\"  echo   'PATH=$PATH:$GOPATH/bin'  >> ~/.profile source  ~/.profile",
            "title": "Step Two &ndash; configure your Go workspace"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#scion-installation",
            "text": "",
            "title": "SCION installation"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-one-clone-the-scion-repository",
            "text": "After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands:  mkdir -p  \" $GOPATH /src/github.com/netsec-ethz\"  cd   \" $GOPATH /src/github.com/netsec-ethz\" \ngit clone --recursive -b scionlab git@github.com:netsec-ethz/scion   Troubleshooting  If the machine doesn't have generated SSH keys or the SSH keys are not assigned to the github account, the checkout will fail with the error  Permission denied (publickey) . There are two ways to resolve this problem:   Changing the checkout using ssh to https: git config --global url.https://github.com/.insteadOf git@github.com:  Assign SSH keys to Github account, detailed instruction can be found on  Github help    This will clone SCION appropriate directory in the Go workspace. We will create export environment variable  SP  that will point to SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration:  echo   'export SC=\"$GOPATH/src/github.com/netsec-ethz/scion\"'  >> ~/.profile source  ~/.profile cd   $SC",
            "title": "Step One &ndash; clone the SCION repository"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-two-configure-python-path-variable",
            "text": "Some SCION components like SCIONviz require Python libraries which are located in scion root directory. In order to make them accessible, exporting  PYTHONPATH  environment variable is required:  echo   'export PYTHONPATH=\"$SC/python:$SC\"'  >> ~/.profile source  ~/.profile",
            "title": "Step Two &ndash; configure python path variable"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-three-finish-installing-the-required-packages",
            "text": "In order to instal dependencies, simply issue the following command while in the root directory of the SCION installation:  bash -c  'yes | GO_INSTALL=true ./env/deps'    Note  You might be asked for sudo password after running the command   This will finish installing the required dependencies and system packages.",
            "title": "Step Three &ndash; finish installing the required packages"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#step-four-configure-the-host-zookeeper-instance",
            "text": "Replacing  /etc/zookeeper/conf/zoo.cfg  with the file  docker/zoo.cfg  is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).  cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg",
            "title": "Step Four &ndash; configure the host Zookeeper instance"
        },
        {
            "location": "/native_setup/ubuntu_x86_build/#next-steps",
            "text": "After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:   Running a local network topology  \u2013 Generate a sample topology and run SCION locally  Connecting to SCIONLab with a static public IP address  \u2013 Connect to the already running SCION topology  Connecting to SCIONLab without a static public IP address  \u2013 Connect to the already running SCION topology through an OpenVPN tunnel",
            "title": "Next steps"
        },
        {
            "location": "/native_setup/rpi_ubuntu/",
            "text": "Building SCION for a Raspberry Pi \u2013 Ubuntu MATE\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThe SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the \nregular x86 build\n, although there are a few additional steps required to make everything work.\n\n\nPrerequisites\n\u00b6\n\n\nIn this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the \ninstallation guide\n.\n\n\n\n\nUpdate packages to latest version\n\n\nIt is recommended to update all packages before starting the installation process of SCION:\n\n\nsudo apt update && sudo apt upgrade\n\n\n\n\nInstall necessary tools\n\u00b6\n\n\nInstall necessary packages\n\u00b6\n\n\nsudo apt install git\n\n\n\n\n\nConfigure Go workspace\n\u00b6\n\n\n\n\nTip\n\n\nYou can skip this step if you have Go workspaces already configured.\n\n\n\n\nIt is necessary to set up your \nGo workspace\n. The following commands will create a default workspace at \n~/go\n and export it as the \n$GOPATH\n environment variable:\n\n\necho\n \n'export GOPATH=\"$HOME/go\"'\n >> ~/.profile\n\nsource\n ~/.profile\nmkdir -p \n\"\n$GOPATH\n/bin\"\n\n\necho\n \n'PATH=$PATH:$GOPATH/bin'\n >> ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nInstall SCION\n\u00b6\n\n\nStep One \u2013 clone the SCION repository\n\u00b6\n\n\nAfter the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands:\n\n\nmkdir -p \n\"\n$GOPATH\n/src/github.com/netsec-ethz\"\n\n\ncd\n \n\"\n$GOPATH\n/src/github.com/netsec-ethz\"\n\ngit clone --recursive -b scionlab git@github.com:netsec-ethz/scion\n\n\n\n\n\n\n\nTroubleshooting\n\n\nIf the machine doesn't have generated SSH keys or the SSH keys are not assigned to the github account, the checkout will fail with the error \nPermission denied (publickey)\n. There are two ways to resolve this problem:\n\n\n\n\nChanging the checkout using ssh to https:\n\ngit config --global url.https://github.com/.insteadOf git@github.com:\n\n\nAssign SSH keys to Github account, detailed instruction can be found on \nGithub help\n\n\n\n\n\n\nThis will clone SCION appropriate directory in the Go workspace. We will create export environment variable \nSP\n that will point to SCION root directory. \n\n\necho\n \n'export SC=\"$GOPATH/src/github.com/netsec-ethz/scion\"'\n >> ~/.profile\n\nsource\n ~/.profile\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Two \u2013 apply necessary patches\n\u00b6\n\n\nOn ARM architecture it is necessary to apply two patches in following way:\n\n\ngit checkout -b arm-modified\nwget https://gist.githubusercontent.com/FR4NK-W/cc6661f420fe5e9805d5b9cdb9c41b1b/raw/7dc3b60b86b4c148c2706e3da82eee8d557bbd45/patches_checksum_bench.patch\nwget https://gist.githubusercontent.com/FR4NK-W/fb7a4b171ab3d5121b6492b9b664fd47/raw/ddeeb8f2337c64f027955e070df6ef34ff26bf9a/patches_dispatcher.patch\n\npatch ./c/lib/scion/checksum_bench.c ./patches_checksum_bench.patch\nrm c/lib/scion/checksum_bench.c.orig\npatch ./c/dispatcher/dispatcher.c ./patches_dispatcher.patch\nrm c/dispatcher/dispatcher.c.orig\n\n\n\n\n\nIn order to make it easier to track, we can commit patched changes:\n\n\ngit commit -am \n\"Modified to compile on ARM systems\"\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\nIf git identity is not configured, commits won't be possible. Configuring users identity on newly installed git can be done in following way:  \n\n\ngit config --global user.name \"John Doe\" && \ngit config --global user.email johndoe@example.com\n\n\n\n\nStep Three \u2013 configure python path variable\n\u00b6\n\n\nSome SCION components like SCIONviz require Python libraries which are located in scion root directory. In order to make them accessible, exporting \nPYTHONPATH\n environment variable is required:\n\n\necho\n \n'export PYTHONPATH=\"$SC/python:$SC\"'\n >> ~/.profile\n\nsource\n ~/.profile\n\n\n\n\n\nStep Four \u2013 finish installing the required packages\n\u00b6\n\n\nIn order to instal dependencies, simply issue the following command while in the root directory of the SCION installation:\n\n\nbash -c \n'yes | GO_INSTALL=true ./env/deps'\n\n\n\n\n\n\n\n\nNote\n\n\nYou might be asked for sudo password after running the command\n\n\n\n\nThis will finish installing the required dependencies and system packages.\n\n\nStep Five \u2013 configure the host Zookeeper instance\n\u00b6\n\n\nReplacing \n/etc/zookeeper/conf/zoo.cfg\n with the file \ndocker/zoo.cfg\n is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).\n\n\ncp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg\n\n\n\n\n\nNext steps\n\u00b6\n\n\nAfter finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:\n\n\n\n\nRunning a local network topology\n \u2013 Generate a sample topology and run SCION locally\n\n\nConnecting to SCIONLab with a static public IP address\n \u2013 Connect to the already running SCION topology\n\n\nConnecting to SCIONLab without a static public IP address\n \u2013 Connect to the already running SCION topology through an OpenVPN tunnel",
            "title": "Ubuntu MATE Raspberry PI"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#building-scion-for-a-raspberry-pi-ubuntu-mate",
            "text": "",
            "title": "Building SCION for a Raspberry Pi &ndash; Ubuntu MATE"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#introduction",
            "text": "The SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the  regular x86 build , although there are a few additional steps required to make everything work.",
            "title": "Introduction"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#prerequisites",
            "text": "In this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the  installation guide .   Update packages to latest version  It is recommended to update all packages before starting the installation process of SCION:  sudo apt update && sudo apt upgrade",
            "title": "Prerequisites"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#install-necessary-tools",
            "text": "",
            "title": "Install necessary tools"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#install-necessary-packages",
            "text": "sudo apt install git",
            "title": "Install necessary packages"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#configure-go-workspace",
            "text": "Tip  You can skip this step if you have Go workspaces already configured.   It is necessary to set up your  Go workspace . The following commands will create a default workspace at  ~/go  and export it as the  $GOPATH  environment variable:  echo   'export GOPATH=\"$HOME/go\"'  >> ~/.profile source  ~/.profile\nmkdir -p  \" $GOPATH /bin\"  echo   'PATH=$PATH:$GOPATH/bin'  >> ~/.profile source  ~/.profile",
            "title": "Configure Go workspace"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#install-scion",
            "text": "",
            "title": "Install SCION"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-one-clone-the-scion-repository",
            "text": "After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands:  mkdir -p  \" $GOPATH /src/github.com/netsec-ethz\"  cd   \" $GOPATH /src/github.com/netsec-ethz\" \ngit clone --recursive -b scionlab git@github.com:netsec-ethz/scion   Troubleshooting  If the machine doesn't have generated SSH keys or the SSH keys are not assigned to the github account, the checkout will fail with the error  Permission denied (publickey) . There are two ways to resolve this problem:   Changing the checkout using ssh to https: git config --global url.https://github.com/.insteadOf git@github.com:  Assign SSH keys to Github account, detailed instruction can be found on  Github help    This will clone SCION appropriate directory in the Go workspace. We will create export environment variable  SP  that will point to SCION root directory.   echo   'export SC=\"$GOPATH/src/github.com/netsec-ethz/scion\"'  >> ~/.profile source  ~/.profile cd   $SC",
            "title": "Step One &ndash; clone the SCION repository"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-two-apply-necessary-patches",
            "text": "On ARM architecture it is necessary to apply two patches in following way:  git checkout -b arm-modified\nwget https://gist.githubusercontent.com/FR4NK-W/cc6661f420fe5e9805d5b9cdb9c41b1b/raw/7dc3b60b86b4c148c2706e3da82eee8d557bbd45/patches_checksum_bench.patch\nwget https://gist.githubusercontent.com/FR4NK-W/fb7a4b171ab3d5121b6492b9b664fd47/raw/ddeeb8f2337c64f027955e070df6ef34ff26bf9a/patches_dispatcher.patch\n\npatch ./c/lib/scion/checksum_bench.c ./patches_checksum_bench.patch\nrm c/lib/scion/checksum_bench.c.orig\npatch ./c/dispatcher/dispatcher.c ./patches_dispatcher.patch\nrm c/dispatcher/dispatcher.c.orig  In order to make it easier to track, we can commit patched changes:  git commit -am  \"Modified to compile on ARM systems\"    Troubleshooting  If git identity is not configured, commits won't be possible. Configuring users identity on newly installed git can be done in following way:    git config --global user.name \"John Doe\" && \ngit config --global user.email johndoe@example.com",
            "title": "Step Two &ndash; apply necessary patches"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-three-configure-python-path-variable",
            "text": "Some SCION components like SCIONviz require Python libraries which are located in scion root directory. In order to make them accessible, exporting  PYTHONPATH  environment variable is required:  echo   'export PYTHONPATH=\"$SC/python:$SC\"'  >> ~/.profile source  ~/.profile",
            "title": "Step Three &ndash; configure python path variable"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-four-finish-installing-the-required-packages",
            "text": "In order to instal dependencies, simply issue the following command while in the root directory of the SCION installation:  bash -c  'yes | GO_INSTALL=true ./env/deps'    Note  You might be asked for sudo password after running the command   This will finish installing the required dependencies and system packages.",
            "title": "Step Four &ndash; finish installing the required packages"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#step-five-configure-the-host-zookeeper-instance",
            "text": "Replacing  /etc/zookeeper/conf/zoo.cfg  with the file  docker/zoo.cfg  is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment).  cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg",
            "title": "Step Five &ndash; configure the host Zookeeper instance"
        },
        {
            "location": "/native_setup/rpi_ubuntu/#next-steps",
            "text": "After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail:   Running a local network topology  \u2013 Generate a sample topology and run SCION locally  Connecting to SCIONLab with a static public IP address  \u2013 Connect to the already running SCION topology  Connecting to SCIONLab without a static public IP address  \u2013 Connect to the already running SCION topology through an OpenVPN tunnel",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/local_top/",
            "text": "Running the SCION infrastructure on a local topology\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis tutorial will guide you through the steps required to generate a local topology and run SCION.\n\n\nPrerequisites\n\u00b6\n\n\nThis tutorial assumes that SCION is already installed on your system. If this is not the case, please follow \nHow to build SCION on Ubuntu 16.04 x86-64\n or \nHow to build SCION on Raspberry PI\n.\n\n\nGenerating topology\n\u00b6\n\n\nBefore continuing with the following steps, you should first navigate to the SCION root directory:\n\n\ncd\n \n$SC\n\n\n\n\n\n\nSCION installation comes with a command to generate the local topology from 'topo' configuration files. Default topology is defined in \ntopology/Default.topo\n and it is depicted in the following figure.\n\n\n\n\nTo generate the default topology, it is sufficient to run\n\n\n./scion.sh topology\n\n\n\n\n\nThis command will generate the topology information in the \ngen\n directory. The structure of the \ngen\n directory will be:\n\n\n ./gen/ISD{X}/AS{Y}/\n     {elem}{X}-{Y}-{Z}/\n         as.yml\n         path_policy.yml\n         supervisord.conf\n         topology.yml\n         certs/\n             ISD{X}-AS{Y}-V0.crt\n             ISD{X}-V0.trc\n         keys/\n             as-sig.key\n\n\n\n\n\n\n\nRunning smaller topology\n\n\nRunning default SCION topology \nrequires significant amount of system resources\n. This might not be possible on IoT devices like Raspberry PI or Virtual machines. For this reason using smaller topology is recommended. To generate smaller topology you can use predefined  definition of tiny topology in following way:\n\n\n./scion.sh topology -c topology/Tiny.topo\n\n\nAfter changing contents of \ngen\n directory it is necessary to \nrestart SCION infrastructure\n\n\n\n\n This command will delete any previous \ngen\n directory. Make sure to back it up before, if necessary! \n\n\nSome notes about the topology definition in \ntopology/Default.topo\n\n\n\n\n\n\ndefaults.subnet\n (optional): override the default subnet of \n127.0.0.0/8\n.\n\n\n\n\n\n\ncore\n (optional): specify if this is a core AS or not (defaults to 'false').\n\n\n\n\n\n\nbeacon_servers\n, \ncertificate_servers\n, \npath_servers\n, (all optional):\n  number of such servers in a specific AS (override the default value 1).\n\n\n\n\n\n\nlinks\n: keys are \nISD_ID-AS_ID\n (format also used for the keys of the JSON\n  file itself) and values can either be \nPARENT\n, \nCHILD\n, \nPEER\n, or\n  \nCORE\n.\n\n\n\n\n\n\nRunning SCION\n\u00b6\n\n\nRunning the SCION infrastructure:\n\n\n./scion.sh run\n\n\n\n\n\nStopping the SCION infrastructure:\n\n\n./scion.sh stop\n\n\n\n\n\nTesting the infrastructure:\n\n\n./scion.sh \ntest\n\n\n\n\n\n\nNext steps\n\u00b6\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation",
            "title": "Running SCION on a local topology"
        },
        {
            "location": "/general_scion_configuration/local_top/#running-the-scion-infrastructure-on-a-local-topology",
            "text": "",
            "title": "Running the SCION infrastructure on a local topology"
        },
        {
            "location": "/general_scion_configuration/local_top/#introduction",
            "text": "This tutorial will guide you through the steps required to generate a local topology and run SCION.",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/local_top/#prerequisites",
            "text": "This tutorial assumes that SCION is already installed on your system. If this is not the case, please follow  How to build SCION on Ubuntu 16.04 x86-64  or  How to build SCION on Raspberry PI .",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/local_top/#generating-topology",
            "text": "Before continuing with the following steps, you should first navigate to the SCION root directory:  cd   $SC   SCION installation comes with a command to generate the local topology from 'topo' configuration files. Default topology is defined in  topology/Default.topo  and it is depicted in the following figure.   To generate the default topology, it is sufficient to run  ./scion.sh topology  This command will generate the topology information in the  gen  directory. The structure of the  gen  directory will be:   ./gen/ISD{X}/AS{Y}/\n     {elem}{X}-{Y}-{Z}/\n         as.yml\n         path_policy.yml\n         supervisord.conf\n         topology.yml\n         certs/\n             ISD{X}-AS{Y}-V0.crt\n             ISD{X}-V0.trc\n         keys/\n             as-sig.key   Running smaller topology  Running default SCION topology  requires significant amount of system resources . This might not be possible on IoT devices like Raspberry PI or Virtual machines. For this reason using smaller topology is recommended. To generate smaller topology you can use predefined  definition of tiny topology in following way:  ./scion.sh topology -c topology/Tiny.topo  After changing contents of  gen  directory it is necessary to  restart SCION infrastructure    This command will delete any previous  gen  directory. Make sure to back it up before, if necessary!   Some notes about the topology definition in  topology/Default.topo    defaults.subnet  (optional): override the default subnet of  127.0.0.0/8 .    core  (optional): specify if this is a core AS or not (defaults to 'false').    beacon_servers ,  certificate_servers ,  path_servers , (all optional):\n  number of such servers in a specific AS (override the default value 1).    links : keys are  ISD_ID-AS_ID  (format also used for the keys of the JSON\n  file itself) and values can either be  PARENT ,  CHILD ,  PEER , or\n   CORE .",
            "title": "Generating topology"
        },
        {
            "location": "/general_scion_configuration/local_top/#running-scion",
            "text": "Running the SCION infrastructure:  ./scion.sh run  Stopping the SCION infrastructure:  ./scion.sh stop  Testing the infrastructure:  ./scion.sh  test",
            "title": "Running SCION"
        },
        {
            "location": "/general_scion_configuration/local_top/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/public_ip/",
            "text": "Connecting to SCIONLab with a static public IP address\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis tutorial will cover steps required for connecting already running SCION infrastructure to SCION lab, doing so you will be running one SCION autonomous system. \n\n\nFor the purpose of this tutorial, we assume that you \nhave\n a static public IP address and that your machine can receive UDP traffic from internet over port 50000. If this is not the case, please follow \nConnecting to SCION Lab over VPN\n\n\nPrerequisites\n\u00b6\n\n\nIn order to follow this tutorial, we will assume that you already installed SCION infrastructure and that you are able to \nrun local topology\n.\n\n\n\n\nHint\n\n\nIf you are running one of the SCION Virtual machine setups, configuration covered in this tutorial is already implemented in the system image. \n\n\n\n\nStep One - downloading SCION Lab configuration\n\u00b6\n\n\nIn order to download necessary configuration you must login to \nSCION Coordination Service\n. In case you don't yet have an account, follow the registration process.\n\n\n\n\nSince current version of \nCoordination Service\n only generates VM configuration scripts, we will use them in following steps to configure running SCION infrastructure.\n\n\n\n\nAfter logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on \nCreate and Download SCIONLab VM Configuration\n as presented in the image below:\n\n\n\n\nNavigate to download directory and extract archive content:\n\n\ncd\n ~/Downloads\ntar -vxzf scion_lab_<user_email>.tar.gz\n\ncd\n <user_email>\n\n\n\n\n\nExtracted content should have following file structure:\n\n\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\n\nFor the purpose of this tutorial we will just need:\n\n\n\n\ndirectory \ngen\n - SCION infrastructure configuration\n\n\n\n\nStep Two - copying SCION Lab configuration\n\u00b6\n\n\nBefore copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.\n\n\nrm -rf \n$SC\n/gen\n\n\n\n\n\nCopy new configuration and navigate to SCION root directory:\n\n\ncp -r gen \n$SC\n/\n\ncd\n \n$SC\n\n\n\n\n\n\nStep Three - Restarting SCION infrastructure\n\u00b6\n\n\nAfter new configuration is copied, you need to restart infrastructure in following way:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\u00b6\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation",
            "title": "Set up an AS and connect to the SCION network"
        },
        {
            "location": "/general_scion_configuration/public_ip/#connecting-to-scionlab-with-a-static-public-ip-address",
            "text": "",
            "title": "Connecting to SCIONLab with a static public IP address"
        },
        {
            "location": "/general_scion_configuration/public_ip/#introduction",
            "text": "This tutorial will cover steps required for connecting already running SCION infrastructure to SCION lab, doing so you will be running one SCION autonomous system.   For the purpose of this tutorial, we assume that you  have  a static public IP address and that your machine can receive UDP traffic from internet over port 50000. If this is not the case, please follow  Connecting to SCION Lab over VPN",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/public_ip/#prerequisites",
            "text": "In order to follow this tutorial, we will assume that you already installed SCION infrastructure and that you are able to  run local topology .   Hint  If you are running one of the SCION Virtual machine setups, configuration covered in this tutorial is already implemented in the system image.",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/public_ip/#step-one-downloading-scion-lab-configuration",
            "text": "In order to download necessary configuration you must login to  SCION Coordination Service . In case you don't yet have an account, follow the registration process.   Since current version of  Coordination Service  only generates VM configuration scripts, we will use them in following steps to configure running SCION infrastructure.   After logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on  Create and Download SCIONLab VM Configuration  as presented in the image below:   Navigate to download directory and extract archive content:  cd  ~/Downloads\ntar -vxzf scion_lab_<user_email>.tar.gz cd  <user_email>  Extracted content should have following file structure:  \u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile  For the purpose of this tutorial we will just need:   directory  gen  - SCION infrastructure configuration",
            "title": "Step One - downloading SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/public_ip/#step-two-copying-scion-lab-configuration",
            "text": "Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.  rm -rf  $SC /gen  Copy new configuration and navigate to SCION root directory:  cp -r gen  $SC / cd   $SC",
            "title": "Step Two - copying SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/public_ip/#step-three-restarting-scion-infrastructure",
            "text": "After new configuration is copied, you need to restart infrastructure in following way:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Step Three - Restarting SCION infrastructure"
        },
        {
            "location": "/general_scion_configuration/public_ip/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/",
            "text": "Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a NAT\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThe machine should be set up as described in the \ntutorial of the host with a public IP address\n. Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made.\n\n\n\n\nHint\n\n\nSometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the \nOpenVPN connection tutorial\n.\n\n\n\n\nSetup\n\u00b6\n\n\nThe first step is to complete the installation of the basic system as explained in the earlier \ntutorial of the host with a public IP address\n.\n\n\nThe second step is to find out the internal IP address of your host, as well as the external IP address outside the NAT.\n\n\nSeveral web sites offer a service that displays the external IP address of a host, for instance \nwhatismyip\n. You can provide the displayed IPv4 address on the SCIONLab web site.\n\n\nThe internal IPv4 address can be found with \nifconfig\n and spotting the address of the main network connection.\n\n\nThe third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the \ntopology.json\n file in your gen folder, for instance at this location: \ngen/ISD1/AS1026/br1-1026-1/\n, adjusting the ISD and AS numbers to your case. In that file, search for the term \nRemote\n, which specifies the IP address and UDP port from which the connecting packets originate.\n\n\n\n\nHint\n\n\nSome networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device).\n\n\n\n\nThe fourth step is needed to re-map the IP address of the SCION infrastructure devices to the internal address of your host.\n\n\nFor this, you can execute the following three commands from your main SCION directory (\ncd $SC\n to get there), replacing \n192.168.1.111\n with the internal IPv4 address of your host:\n\n\nfind ./gen/ -name \n\"*.json\"\n -exec sed -i \n\"s/10.0.2.15/192.168.1.111/g\"\n \n'{}'\n \n\\;\n\nfind ./gen/ -name \n\"*.yml\"\n -exec sed -i \n\"s/10.0.2.15/192.168.1.111/g\"\n \n'{}'\n \n\\;\n\nfind ./gen/ -name \n\"*.conf\"\n -exec sed -i \n\"s/10.0.2.15/192.168.1.111/g\"\n \n'{}'\n \n\\;\n\n\n\n\n\n\nThis completes the installation! You can start the installation with \n./scion.sh start\n and verify the operation by looking at the DEBUG log of the beacon server to ensure that the Path Construction Beacons (PCBs) are arriving and are processed correctly.",
            "title": "Set up an AS and connect to the SCION network behind a NAT"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#connecting-to-scionlab-where-the-network-has-a-static-public-ip-address-but-the-machine-itself-is-behind-a-nat",
            "text": "",
            "title": "Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a NAT"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#introduction",
            "text": "The machine should be set up as described in the  tutorial of the host with a public IP address . Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made.   Hint  Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the  OpenVPN connection tutorial .",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/public_ip_nat/#setup",
            "text": "The first step is to complete the installation of the basic system as explained in the earlier  tutorial of the host with a public IP address .  The second step is to find out the internal IP address of your host, as well as the external IP address outside the NAT.  Several web sites offer a service that displays the external IP address of a host, for instance  whatismyip . You can provide the displayed IPv4 address on the SCIONLab web site.  The internal IPv4 address can be found with  ifconfig  and spotting the address of the main network connection.  The third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the  topology.json  file in your gen folder, for instance at this location:  gen/ISD1/AS1026/br1-1026-1/ , adjusting the ISD and AS numbers to your case. In that file, search for the term  Remote , which specifies the IP address and UDP port from which the connecting packets originate.   Hint  Some networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device).   The fourth step is needed to re-map the IP address of the SCION infrastructure devices to the internal address of your host.  For this, you can execute the following three commands from your main SCION directory ( cd $SC  to get there), replacing  192.168.1.111  with the internal IPv4 address of your host:  find ./gen/ -name  \"*.json\"  -exec sed -i  \"s/10.0.2.15/192.168.1.111/g\"   '{}'   \\; \nfind ./gen/ -name  \"*.yml\"  -exec sed -i  \"s/10.0.2.15/192.168.1.111/g\"   '{}'   \\; \nfind ./gen/ -name  \"*.conf\"  -exec sed -i  \"s/10.0.2.15/192.168.1.111/g\"   '{}'   \\;   This completes the installation! You can start the installation with  ./scion.sh start  and verify the operation by looking at the DEBUG log of the beacon server to ensure that the Path Construction Beacons (PCBs) are arriving and are processed correctly.",
            "title": "Setup"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/",
            "text": "Connecting to SCIONLab via VPN\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis tutorial will cover steps required for connecting already running SCION infrastructure to SCION lab, doing so you will be running one SCION autonomous system. \n\n\nFor the purpose of this tutorial, we assume that you don't have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from internet. If this is not the case, you should consider following \nConnecting to SCION Lab with public IP\n\n\nPrerequisites\n\u00b6\n\n\nIn order to follow this tutorial, we will assume that you already installed SCION infrastructure and that you are able to \nrun local topology\n.\n\n\n\n\nHint\n\n\nIf you are running one of the SCION Virtual machine setups, configuration covered in this tutorial is already implemented in the system image. \n\n\n\n\nStep One - installing OpenVPN\n\u00b6\n\n\nIn order to circumvent problem of not having publicly accessible IP address, we can tunnel SCION traffic to an exit node that has it, using OpenVPN.\n\n\nIn order to install openvpn client, you can simply run:\n\n\nsudo apt install openvpn\n\n\n\n\n\nStep Two - downloading SCION Lab configuration\n\u00b6\n\n\nIn order to download necessary configuration you must login to \nSCION Coordination Service\n. In case you don't yet have an account, follow the registration process.\n\n\n\n\nSince current version of \nCoordination Service\n only generates VM configuration scripts, we will use them in following steps to configure running SCION infrastructure.\n\n\n\n\nAfter logging in, download a VM configuration by clicking on \nCreate and Download SCIONLab VM Configuration\n as presented in the image below:\n\n\n\n\nNavigate to download directory and extract archive content:\n\n\ncd\n ~/Downloads\ntar -vxzf scion_lab_<user_email>.tar.gz\n\ncd\n <user_email>\n\n\n\n\n\nExtracted content should have following file structure:\n\n\n\u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\n\nFor the purpose of this tutorial we will just need:\n\n\n\n\nfile \nclient.conf\n - client OpenVPN configuration\n\n\ndirectory \ngen\n - SCION infrastructure configuration\n\n\n\n\nStep Three - Connecting to OpenVPN server\n\u00b6\n\n\nAdding VPN configuration is done by copying files in openvpn directory:\n\n\nsudo cp client.conf /etc/openvpn\nsudo chmod \n600\n /etc/openvpn/client.conf\n\n\n\n\n\nStarting OpenVPN service, and enabling it to run on startup is done in following way:\n\n\nsystemctl start openvpn@client\nsystemctl \nenable\n openvpn@client\n\n\n\n\n\nAfter this, you should verify that new \ntun\n interface is added. \n\n\nRunning \n\n\nip a\n\n\n\n\n\nshould display newly added interface, in this case \ntun0\n:\n\n\n9\n:\n \ntun0\n:\n \n<\nPOINTOPOINT\n,\nMULTICAST\n,\nNOARP\n,\nUP\n,\nLOWER_UP\n>\n \nmtu\n \n1500\n \nqdisc\n \npfifo_fast\n \nstate\n \nUNKNOWN\n \ngroup\n \ndefault\n \nqlen\n \n100\n\n    \nlink\n/\nnone\n \n    \ninet\n \n10.0\n.\n8.40\n/\n24\n \nbrd\n \n10.0\n.\n8.255\n \nscope\n \nglobal\n \ntun0\n\n       \nvalid_lft\n \nforever\n \npreferred_lft\n \nforever\n\n    \ninet6\n \nfe80\n::\n2337\n:\na0c4\n:\n7\nfa7\n:\n78\nb3\n/\n64\n \nscope\n \nlink\n \nflags\n \n800\n \n       \nvalid_lft\n \nforever\n \npreferred_lft\n \nforever\n\n\n\n\n\n\nIn this case client's OpenVPN IP address is: \n10.0.8.40\n, this address might vary on different setups, please keep a not of yours.\n\n\nStep Four - copying SCION Lab configuration\n\u00b6\n\n\nBefore copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.\n\n\nrm -rf \n$SC\n/gen\n\n\n\n\n\nCopy new configuration and navigate to SCION root directory:\n\n\ncp -r gen \n$SC\n/\n\ncd\n \n$SC\n\n\n\n\n\n\nBecause \ngen\n directory downloaded from Coordination Service is customized for VM IP addresses (\n10.0.2.15\n), we need to replace them with address obtained from OpenVPN on current system. In following commands we will assume that OpenVPN IP address is: \n10.0.8.40\n but you should use the value obtained in previous step:\n\n\nfind ./gen/ -name \n\"*.json\"\n -exec sed -i \n\"s/10.0.2.15/10.0.8.40/g\"\n \n'{}'\n \n\\;\n\nfind ./gen/ -name \n\"*.yml\"\n -exec sed -i \n\"s/10.0.2.15/10.0.8.40/g\"\n \n'{}'\n \n\\;\n\nfind ./gen/ -name \n\"*.conf\"\n -exec sed -i \n\"s/10.0.2.15/10.0.8.40/g\"\n \n'{}'\n \n\\;\n\n\n\n\n\n\nStep Five - Restarting SCION infrastructure\n\u00b6\n\n\nAfter OpenVPN connection is established and new configuration is copied, you need to restart infrastructure in following way:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\u00b6\n\n\nAfter running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial \nVerifying SCION Installation",
            "title": "Set up an AS and connect to the SCION network via VPN"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#connecting-to-scionlab-via-vpn",
            "text": "",
            "title": "Connecting to SCIONLab via VPN"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#introduction",
            "text": "This tutorial will cover steps required for connecting already running SCION infrastructure to SCION lab, doing so you will be running one SCION autonomous system.   For the purpose of this tutorial, we assume that you don't have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from internet. If this is not the case, you should consider following  Connecting to SCION Lab with public IP",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#prerequisites",
            "text": "In order to follow this tutorial, we will assume that you already installed SCION infrastructure and that you are able to  run local topology .   Hint  If you are running one of the SCION Virtual machine setups, configuration covered in this tutorial is already implemented in the system image.",
            "title": "Prerequisites"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-one-installing-openvpn",
            "text": "In order to circumvent problem of not having publicly accessible IP address, we can tunnel SCION traffic to an exit node that has it, using OpenVPN.  In order to install openvpn client, you can simply run:  sudo apt install openvpn",
            "title": "Step One - installing OpenVPN"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-two-downloading-scion-lab-configuration",
            "text": "In order to download necessary configuration you must login to  SCION Coordination Service . In case you don't yet have an account, follow the registration process.   Since current version of  Coordination Service  only generates VM configuration scripts, we will use them in following steps to configure running SCION infrastructure.   After logging in, download a VM configuration by clicking on  Create and Download SCIONLab VM Configuration  as presented in the image below:   Navigate to download directory and extract archive content:  cd  ~/Downloads\ntar -vxzf scion_lab_<user_email>.tar.gz cd  <user_email>  Extracted content should have following file structure:  \u251c\u2500\u2500 client.conf\n\u251c\u2500\u2500 gen\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dispatcher.zlog.conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisord.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ISD1\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 scion.service\n\u251c\u2500\u2500 scion-viz.service\n\u2514\u2500\u2500 Vagrantfile  For the purpose of this tutorial we will just need:   file  client.conf  - client OpenVPN configuration  directory  gen  - SCION infrastructure configuration",
            "title": "Step Two - downloading SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-three-connecting-to-openvpn-server",
            "text": "Adding VPN configuration is done by copying files in openvpn directory:  sudo cp client.conf /etc/openvpn\nsudo chmod  600  /etc/openvpn/client.conf  Starting OpenVPN service, and enabling it to run on startup is done in following way:  systemctl start openvpn@client\nsystemctl  enable  openvpn@client  After this, you should verify that new  tun  interface is added.   Running   ip a  should display newly added interface, in this case  tun0 :  9 :   tun0 :   < POINTOPOINT , MULTICAST , NOARP , UP , LOWER_UP >   mtu   1500   qdisc   pfifo_fast   state   UNKNOWN   group   default   qlen   100 \n     link / none  \n     inet   10.0 . 8.40 / 24   brd   10.0 . 8.255   scope   global   tun0 \n        valid_lft   forever   preferred_lft   forever \n     inet6   fe80 :: 2337 : a0c4 : 7 fa7 : 78 b3 / 64   scope   link   flags   800  \n        valid_lft   forever   preferred_lft   forever   In this case client's OpenVPN IP address is:  10.0.8.40 , this address might vary on different setups, please keep a not of yours.",
            "title": "Step Three - Connecting to OpenVPN server"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-four-copying-scion-lab-configuration",
            "text": "Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously.  rm -rf  $SC /gen  Copy new configuration and navigate to SCION root directory:  cp -r gen  $SC / cd   $SC   Because  gen  directory downloaded from Coordination Service is customized for VM IP addresses ( 10.0.2.15 ), we need to replace them with address obtained from OpenVPN on current system. In following commands we will assume that OpenVPN IP address is:  10.0.8.40  but you should use the value obtained in previous step:  find ./gen/ -name  \"*.json\"  -exec sed -i  \"s/10.0.2.15/10.0.8.40/g\"   '{}'   \\; \nfind ./gen/ -name  \"*.yml\"  -exec sed -i  \"s/10.0.2.15/10.0.8.40/g\"   '{}'   \\; \nfind ./gen/ -name  \"*.conf\"  -exec sed -i  \"s/10.0.2.15/10.0.8.40/g\"   '{}'   \\;",
            "title": "Step Four - copying SCION Lab configuration"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#step-five-restarting-scion-infrastructure",
            "text": "After OpenVPN connection is established and new configuration is copied, you need to restart infrastructure in following way:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Step Five - Restarting SCION infrastructure"
        },
        {
            "location": "/general_scion_configuration/vpn_setup/#next-steps",
            "text": "After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial  Verifying SCION Installation",
            "title": "Next steps"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/",
            "text": "Configuring SCION endhost topology\n\u00b6\n\n\nTBA",
            "title": "Set up SCION endhost and connect to local AS"
        },
        {
            "location": "/general_scion_configuration/setup_endhost/#configuring-scion-endhost-topology",
            "text": "TBA",
            "title": "Configuring SCION endhost topology"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/",
            "text": "Read sensor readings over SCION network\n\u00b6\n\n\nThe \nsensorapp application\n contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response containing the readings.\n\n\nsensorfetcher\n\u00b6\n\n\nTo install sensorfetcher:\n\n\ngo get github.com/perrig/scionlab/sensorapp/sensorfetcher\n\n\n\n\n\nThe \nsensorfetcher\n application sends a 0-length SCION UDP packet to the \nsensorserver\n application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try.\n\n\nTo run the \nsensorfetcher\n application, you will need to express your local host's address as a SCION address (in the format \nISD-AS,[IPv4]:port\n) and specify the address of a sensor server, for instance \n1-6,[192.33.93.173]:42003\n. The local ISD and AS number can be seen for instance from files in the logs directory: \nbr1-1006-1.log\n indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles \nISD1\n, which contains a subdirectory \nAS1006\n. The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port.\n\n\nAn example server is at \n1-6,[192.33.93.173]:42003\n, its readings can be fetched as follows (need to replace client address with actual client address, with an arbitrary free port):\n\n\nsensorfetcher -s \n1\n-6,\n[\n192\n.33.93.173\n]\n:42003 -c \n1\n-1006,\n[\n10\n.0.2.15\n]\n:42001\n\n\n\n\n\nsensorserver\n\u00b6\n\n\nTo install sensorserver:\n\n\ngo get github.com/perrig/scionlab/sensorapp/sensorserver\n\n\n\n\n\nWe use sensors from Tinkerforge, and the \nsensorreader.py\n Python application fetches the sensor values and writes them to \nstdout\n. The \nsensorserver\n application collects the readings, and serves them as a string to client requests. To start, we use the following command:\n\n\npython3 \n${\nGOPATH\n}\n/src/github.com/perrig/scionlab/sensorapp/sensorserver/sensorreader.py \n|\n sensorserver -s \n1\n-6,\n[\n192\n.33.93.173\n]\n:42003 \n&\n\n\n\n\n\n\nIf you do not have any sensors information you can report, then you can use a simple time application that reports the current time on your system:\n\n\npython3 \n${\nGOPATH\n}\n/src/github.com/perrig/scionlab/sensorapp/sensorserver/timereader.py \n|\n sensorserver -s \n1\n-6,\n[\n192\n.33.93.173\n]\n:42003 \n&",
            "title": "Read a temperature sensor over the SCION network"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/#read-sensor-readings-over-scion-network",
            "text": "The  sensorapp application  contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response containing the readings.",
            "title": "Read sensor readings over SCION network"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/#sensorfetcher",
            "text": "To install sensorfetcher:  go get github.com/perrig/scionlab/sensorapp/sensorfetcher  The  sensorfetcher  application sends a 0-length SCION UDP packet to the  sensorserver  application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try.  To run the  sensorfetcher  application, you will need to express your local host's address as a SCION address (in the format  ISD-AS,[IPv4]:port ) and specify the address of a sensor server, for instance  1-6,[192.33.93.173]:42003 . The local ISD and AS number can be seen for instance from files in the logs directory:  br1-1006-1.log  indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles  ISD1 , which contains a subdirectory  AS1006 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port.  An example server is at  1-6,[192.33.93.173]:42003 , its readings can be fetched as follows (need to replace client address with actual client address, with an arbitrary free port):  sensorfetcher -s  1 -6, [ 192 .33.93.173 ] :42003 -c  1 -1006, [ 10 .0.2.15 ] :42001",
            "title": "sensorfetcher"
        },
        {
            "location": "/sample_projects/fetch_sensor_readings/#sensorserver",
            "text": "To install sensorserver:  go get github.com/perrig/scionlab/sensorapp/sensorserver  We use sensors from Tinkerforge, and the  sensorreader.py  Python application fetches the sensor values and writes them to  stdout . The  sensorserver  application collects the readings, and serves them as a string to client requests. To start, we use the following command:  python3  ${ GOPATH } /src/github.com/perrig/scionlab/sensorapp/sensorserver/sensorreader.py  |  sensorserver -s  1 -6, [ 192 .33.93.173 ] :42003  &   If you do not have any sensors information you can report, then you can use a simple time application that reports the current time on your system:  python3  ${ GOPATH } /src/github.com/perrig/scionlab/sensorapp/sensorserver/timereader.py  |  sensorserver -s  1 -6, [ 192 .33.93.173 ] :42003  &",
            "title": "sensorserver"
        },
        {
            "location": "/sample_projects/access_camera/",
            "text": "Access camera images over SCION network\n\u00b6\n\n\nThe \ncamerapp application\n contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the \nREADME.md\n.\n\n\nimagefetcher\n\u00b6\n\n\nTo install imagefetcher:\n\n\ngo get github.com/perrig/scionlab/camerapp/imagefetcher\n\n\n\n\n\nTo use the image fetcher, you will need to pass your local host's address as a SCION address (in the format \nISD-AS,[IPv4]:port\n) and specify the address of an image server, for instance \n1-1011,[192.33.93.166]:42002\n. The local ISD and AS number can be seen for instance from files in the logs directory: \nbr1-1006-1.log\n indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles \nISD1\n, which contains a subdirectory \nAS1006\n. The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port. A sample image server that can be contacted by the client is set up at \n1-1011,[192.33.93.166]:42002\n.\n\n\nThe client address is passed with \n-c\n and the server address with \n-s\n:\n\n\nimagefetcher -s \n1\n-1011,\n[\n192\n.33.93.166\n]\n:42002 -c \n1\n-1006,\n[\n10\n.0.2.15\n]\n:42001\n\n\n\n\n\nThe fetched image is then saved in the local directory.\n\n\nimageserver\n\u00b6\n\n\nTo install imageserver:\n\n\ngo get github.com/perrig/scionlab/camerapp/imageserver\n\n\n\n\n\nThe \nimageserver\n application keeps looking for \n.jpg\n files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used.\n\n\nIncluded is a simple \npaparazzi.py\n application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows:\n\n\npython3 \n${\nGOPATH\n}\n/src/github.com/perrig/scionlab/camerapp/imageserver/paparazzi.py \n&\n\nimageserver -s \n1\n-1011,\n[\n192\n.33.93.166\n]\n:42002 \n&",
            "title": "Access a video camera over the SCION network"
        },
        {
            "location": "/sample_projects/access_camera/#access-camera-images-over-scion-network",
            "text": "The  camerapp application  contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the  README.md .",
            "title": "Access camera images over SCION network"
        },
        {
            "location": "/sample_projects/access_camera/#imagefetcher",
            "text": "To install imagefetcher:  go get github.com/perrig/scionlab/camerapp/imagefetcher  To use the image fetcher, you will need to pass your local host's address as a SCION address (in the format  ISD-AS,[IPv4]:port ) and specify the address of an image server, for instance  1-1011,[192.33.93.166]:42002 . The local ISD and AS number can be seen for instance from files in the logs directory:  br1-1006-1.log  indicates that we are in AS 1006 in ISD 1. Another way is to look at the gen directory, which in this case contains a subdirectory calles  ISD1 , which contains a subdirectory  AS1006 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port. A sample image server that can be contacted by the client is set up at  1-1011,[192.33.93.166]:42002 .  The client address is passed with  -c  and the server address with  -s :  imagefetcher -s  1 -1011, [ 192 .33.93.166 ] :42002 -c  1 -1006, [ 10 .0.2.15 ] :42001  The fetched image is then saved in the local directory.",
            "title": "imagefetcher"
        },
        {
            "location": "/sample_projects/access_camera/#imageserver",
            "text": "To install imageserver:  go get github.com/perrig/scionlab/camerapp/imageserver  The  imageserver  application keeps looking for  .jpg  files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used.  Included is a simple  paparazzi.py  application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows:  python3  ${ GOPATH } /src/github.com/perrig/scionlab/camerapp/imageserver/paparazzi.py  & \nimageserver -s  1 -1011, [ 192 .33.93.166 ] :42002  &",
            "title": "imageserver"
        },
        {
            "location": "/sample_projects/bwtester/",
            "text": "The bwtester application\n\u00b6\n\n\nThe \nbandwidth testing application \nbwtester\n enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester's \nREADME.md\n.\n\n\nbwtestclient\n\u00b6\n\n\nTo install bwtestclient:\n\n\ngo get github.com/perrig/scionlab/bwtester/bwtestclient\n\n\n\n\n\nYou can test the application as follows, replacing the client address with your own address after the \n-c\n option (you can select any available port number for the client):\n\n\nbwtestclient -s \n1\n-6,\n[\n192\n.33.93.173\n]\n:30100 -c \n1\n-1006,\n[\n10\n.0.2.15\n]\n:30102\n\n\n\n\n\nA sample server is installed at \n1-6,[192.33.93.173]:30100\n.\n\n\nThe application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), and the total number of packets that will be sent. For instance, \n5,100,10\n specifies that 10 packets of size 100 bytes will be sent over 5 seconds. The parameters for the test in the client-to-server direction are specified with \n-cs\n, and the server-to-client direction with \n-sc\n. So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command:\n\n\nbwtestclient -s \n1\n-6,\n[\n192\n.33.93.173\n]\n:30100 -c \n1\n-1006,\n[\n10\n.0.2.15\n]\n:30102 -cs \n10\n,1000,1250 -sc \n10\n,1000,12500\n\n\n\n\n\nbwtestserver\n\u00b6\n\n\nTo install bwtestserver:\n\n\ngo get github.com/perrig/scionlab/bwtester/bwtestserver\n\n\n\n\n\nThe server is started as follows, where the address needs to be adjusted as for other applications:\n\n\nbwtestserver -s \n1\n-6,\n[\n192\n.33.93.173\n]\n:30100 \n&",
            "title": "Bandwidth tester application"
        },
        {
            "location": "/sample_projects/bwtester/#the-bwtester-application",
            "text": "The  bandwidth testing application  bwtester  enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester's  README.md .",
            "title": "The bwtester application"
        },
        {
            "location": "/sample_projects/bwtester/#bwtestclient",
            "text": "To install bwtestclient:  go get github.com/perrig/scionlab/bwtester/bwtestclient  You can test the application as follows, replacing the client address with your own address after the  -c  option (you can select any available port number for the client):  bwtestclient -s  1 -6, [ 192 .33.93.173 ] :30100 -c  1 -1006, [ 10 .0.2.15 ] :30102  A sample server is installed at  1-6,[192.33.93.173]:30100 .  The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), and the total number of packets that will be sent. For instance,  5,100,10  specifies that 10 packets of size 100 bytes will be sent over 5 seconds. The parameters for the test in the client-to-server direction are specified with  -cs , and the server-to-client direction with  -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command:  bwtestclient -s  1 -6, [ 192 .33.93.173 ] :30100 -c  1 -1006, [ 10 .0.2.15 ] :30102 -cs  10 ,1000,1250 -sc  10 ,1000,12500",
            "title": "bwtestclient"
        },
        {
            "location": "/sample_projects/bwtester/#bwtestserver",
            "text": "To install bwtestserver:  go get github.com/perrig/scionlab/bwtester/bwtestserver  The server is started as follows, where the address needs to be adjusted as for other applications:  bwtestserver -s  1 -6, [ 192 .33.93.173 ] :30100  &",
            "title": "bwtestserver"
        },
        {
            "location": "/as_visualization/running_asviz/",
            "text": "Setup and Run AS Visualizations\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nSCION-viz is a web-based visualization tool of the SCION topology. Connecting to a running infrastructure instance, it reads necessary information about the network topology.\n\n\n1. Setup Local\n\u00b6\n\n\nIf you are using the ScionLab VM distribution you should skip this step. However, if you are installing the AS Visualization locally, you will need to clone a copy of the source.\n\n\ncd\n \n$GOHOME\n/src/github.com/netsec-ethz/scion/sub\ngit clone git@github.com:netsec-ethz/scion-viz\n\ncd\n scion-viz/python/web\npip3 install --user --require-hashes -r requirements.txt\npython3 ./manage.py migrate\n\n\n\n\n\n2. Source Update\n\u00b6\n\n\nThis step applies to all uses Local and ScionLab VM. Update the source for the \nscion\n and \nscion-viz\n repositories.\n\n\n./scion.sh stop\n./scion.sh clean\n\ncd\n \n$GOHOME\n/src/github.com/netsec-ethz/scion\ngit pull\n./scion.sh run\n\ncd\n sub/scion-viz\ngit pull\n\n\n\n\n\n3. Running\n\u00b6\n\n\ncd\n \n$GOHOME\n/src/github.com/netsec-ethz/scion/sub/scion-viz/python/web\npython3 ./manage.py runserver \n10\n.0.2.15:8000\n\n\n\n\n\n4. Using\n\u00b6\n\n\nThe AS Visualization can be used from the \nbrowser\n or from the \ncommand line\n.",
            "title": "Running AS Visualizations"
        },
        {
            "location": "/as_visualization/running_asviz/#setup-and-run-as-visualizations",
            "text": "",
            "title": "Setup and Run AS Visualizations"
        },
        {
            "location": "/as_visualization/running_asviz/#introduction",
            "text": "SCION-viz is a web-based visualization tool of the SCION topology. Connecting to a running infrastructure instance, it reads necessary information about the network topology.",
            "title": "Introduction"
        },
        {
            "location": "/as_visualization/running_asviz/#1-setup-local",
            "text": "If you are using the ScionLab VM distribution you should skip this step. However, if you are installing the AS Visualization locally, you will need to clone a copy of the source.  cd   $GOHOME /src/github.com/netsec-ethz/scion/sub\ngit clone git@github.com:netsec-ethz/scion-viz cd  scion-viz/python/web\npip3 install --user --require-hashes -r requirements.txt\npython3 ./manage.py migrate",
            "title": "1. Setup Local"
        },
        {
            "location": "/as_visualization/running_asviz/#2-source-update",
            "text": "This step applies to all uses Local and ScionLab VM. Update the source for the  scion  and  scion-viz  repositories.  ./scion.sh stop\n./scion.sh clean cd   $GOHOME /src/github.com/netsec-ethz/scion\ngit pull\n./scion.sh run cd  sub/scion-viz\ngit pull",
            "title": "2. Source Update"
        },
        {
            "location": "/as_visualization/running_asviz/#3-running",
            "text": "cd   $GOHOME /src/github.com/netsec-ethz/scion/sub/scion-viz/python/web\npython3 ./manage.py runserver  10 .0.2.15:8000",
            "title": "3. Running"
        },
        {
            "location": "/as_visualization/running_asviz/#4-using",
            "text": "The AS Visualization can be used from the  browser  or from the  command line .",
            "title": "4. Using"
        },
        {
            "location": "/as_visualization/browser_asviz/",
            "text": "Browser AS Visualizations\n\u00b6\n\n\nStarting the Visualization\n\u00b6\n\n\nAfter \nupdating the latest source code and starting the server\n, point your browser to \nhttp://127.0.0.1:8000\n to launch the AS Visualization.\nThen, enter the \"Source AS\" ISD-AS pair of the AS you wish to view data for.\nPress \"Request Data\" to get updated data.\n\n\nViewing the SCION Daemon\n\u00b6\n\n\nThe \"Data\" pull-down menu option \"sciond socket\" will bind to a socket to communicate with the SCION Daemon. Alternately, you can override the default IP address of the Daemon, buy entering the address you wish to bind to in the \"SCIOND IP Address\" text box.\n\n\nSCIOND Paths\n\u00b6\n\n\nEnter the \"Destination AS\" ISD-AS pair and the maximum number of paths to retrieve in \"Max Paths\" and press \"Update Paths\" to view all announced paths to the destination from the source.\nThe announced paths will be displayed in a combined topology in the window.\nTo view the details of a specific path expand the path's data by clicking on the path number in the window on right side.\n\n\n\nSCION AS Topology\n\u00b6\n\n\nThe composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router.\n\n\n\n\nTip\n\n\nThe big circle can be clicked on as well to view details of the Source AS!\n\n\n\n\n\n\nViewing the SCION Local AS\n\u00b6\n\n\nThe \"Data\" pull-down menu option \"local gen dir\" will display data located in the locally generated directory and may be a very limited view of the SCION network.\n\n\nLocal AS Topology\n\u00b6\n\n\n\n\nLocal ISD Trust Root Configuration\n\u00b6\n\n\n\n\nLocal AS Certificate\n\u00b6",
            "title": "Browser AS Visualization"
        },
        {
            "location": "/as_visualization/browser_asviz/#browser-as-visualizations",
            "text": "",
            "title": "Browser AS Visualizations"
        },
        {
            "location": "/as_visualization/browser_asviz/#starting-the-visualization",
            "text": "After  updating the latest source code and starting the server , point your browser to  http://127.0.0.1:8000  to launch the AS Visualization.\nThen, enter the \"Source AS\" ISD-AS pair of the AS you wish to view data for.\nPress \"Request Data\" to get updated data.",
            "title": "Starting the Visualization"
        },
        {
            "location": "/as_visualization/browser_asviz/#viewing-the-scion-daemon",
            "text": "The \"Data\" pull-down menu option \"sciond socket\" will bind to a socket to communicate with the SCION Daemon. Alternately, you can override the default IP address of the Daemon, buy entering the address you wish to bind to in the \"SCIOND IP Address\" text box.",
            "title": "Viewing the SCION Daemon"
        },
        {
            "location": "/as_visualization/browser_asviz/#sciond-paths",
            "text": "Enter the \"Destination AS\" ISD-AS pair and the maximum number of paths to retrieve in \"Max Paths\" and press \"Update Paths\" to view all announced paths to the destination from the source.\nThe announced paths will be displayed in a combined topology in the window.\nTo view the details of a specific path expand the path's data by clicking on the path number in the window on right side.",
            "title": "SCIOND Paths"
        },
        {
            "location": "/as_visualization/browser_asviz/#scion-as-topology",
            "text": "The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router.   Tip  The big circle can be clicked on as well to view details of the Source AS!",
            "title": "SCION AS Topology"
        },
        {
            "location": "/as_visualization/browser_asviz/#viewing-the-scion-local-as",
            "text": "The \"Data\" pull-down menu option \"local gen dir\" will display data located in the locally generated directory and may be a very limited view of the SCION network.",
            "title": "Viewing the SCION Local AS"
        },
        {
            "location": "/as_visualization/browser_asviz/#local-as-topology",
            "text": "",
            "title": "Local AS Topology"
        },
        {
            "location": "/as_visualization/browser_asviz/#local-isd-trust-root-configuration",
            "text": "",
            "title": "Local ISD Trust Root Configuration"
        },
        {
            "location": "/as_visualization/browser_asviz/#local-as-certificate",
            "text": "",
            "title": "Local AS Certificate"
        },
        {
            "location": "/as_visualization/command_asviz/",
            "text": "Command-line AS Visualization\n\u00b6\n\n\ncd\n ~/go/src/github.com/netsec-ethz/scion/\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py\nusage: as_viewer.py \n[\n-h\n]\n \n[\n--addr ADDR\n]\n \n[\n-t\n]\n \n[\n-p\n]\n \n[\n-trc\n]\n \n[\n-crt\n]\n \n[\n-c\n]\n \n[\n-pp\n]\n\n                    src_isdas \n[\ndst_isdas\n]\n\nas_viewer.py: error: the following arguments are required: src_isdas\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py -h\nusage: as_viewer.py \n[\n-h\n]\n \n[\n--addr ADDR\n]\n \n[\n-t\n]\n \n[\n-p\n]\n \n[\n-trc\n]\n \n[\n-crt\n]\n \n[\n-c\n]\n \n[\n-pp\n]\n\n                    src_isdas \n[\ndst_isdas\n]\n\n\nSCION AS Path Viewer requires \nsource\n and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this \nhelp\n message and \nexit\n\n  --addr ADDR  ip address to \nbind\n to \nif\n not localhost\n  -t           display \nsource\n AS topology\n  -p           display announced paths to destination\n  -trc         display \nsource\n TRC\n  -crt         display \nsource\n certificate chain\n  -c           display \nsource\n AS configuration\n  -pp          display \nsource\n path policy\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 -t\n\nSCION AS Viewer\n\n(\nsrc\n)\n \n1\n-1045 \n=======================\n> None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- AS TOPOLOGY: \n1\n-1045\nis_core_as: False\nmtu: \n1472\n\n----------------- PATH SERVER:\nAddress: \n10\n.0.2.15\nName: ps-1\nPort: \n31044\n\nTTL: \n0\n\n----------------- CERTIFICATE SERVER:\nAddress: \n10\n.0.2.15\nName: cs-1\nPort: \n31043\n\nTTL: \n0\n\n----------------- BEACON SERVER:\nAddress: \n10\n.0.2.15\nName: bs-1\nPort: \n31041\n\nTTL: \n0\n\n----------------- SIBRA SERVER:\nAddress: \n10\n.0.2.15\nName: sb-1\nPort: \n31045\n\nTTL: \n0\n\n----------------- BORDER ROUTER:\nAddress: \n10\n.0.2.15\nName: br-1\nPort: \n31042\n\nInterface ID: \n1\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 \n2\n-24 -p\n\nSCION AS Viewer\n\n(\nsrc\n)\n \n1\n-1045 \n=======================\n> \n2\n-24 \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- PATH \n1\n\nMTU: \n1472\n\nIPV4: \n10\n.0.2.15\nPort: \n31042\n\nInterfaces Len: \n16\n\n\n2\n-24 \n(\n1\n)\n\n\n2\n-22 \n(\n4\n)\n\n\n2\n-22 \n(\n1\n)\n\n\n2\n-21 \n(\n2\n)\n\n\n2\n-21 \n(\n1\n)\n\n\n1\n-1 \n(\n4\n)\n\n\n1\n-1 \n(\n3\n)\n\n\n1\n-3 \n(\n1\n)\n\n\n1\n-3 \n(\n2\n)\n\n\n1\n-2 \n(\n1\n)\n\n\n1\n-2 \n(\n4\n)\n\n\n1\n-6 \n(\n1\n)\n\n\n1\n-6 \n(\n2\n)\n\n\n1\n-7 \n(\n1\n)\n\n\n1\n-7 \n(\n39\n)\n\n\n1\n-1045 \n(\n1\n)\n\n----------------- PATH \n2\n\nMTU: \n1472\n\nIPV4: \n10\n.0.2.15\nPort: \n31042\n\nInterfaces Len: \n16\n\n\n2\n-24 \n(\n1\n)\n\n\n2\n-22 \n(\n4\n)\n\n\n2\n-22 \n(\n3\n)\n\n\n4\n-41 \n(\n2\n)\n\n\n4\n-41 \n(\n1\n)\n\n\n1\n-1 \n(\n6\n)\n\n\n1\n-1 \n(\n3\n)\n\n\n1\n-3 \n(\n1\n)\n\n\n1\n-3 \n(\n2\n)\n\n\n1\n-2 \n(\n1\n)\n\n\n1\n-2 \n(\n4\n)\n\n\n1\n-6 \n(\n1\n)\n\n\n1\n-6 \n(\n2\n)\n\n\n1\n-7 \n(\n1\n)\n\n\n1\n-7 \n(\n39\n)\n\n\n1\n-1045 \n(\n1\n)\n\n----------------- PATH \n3\n\nMTU: \n1472\n\nIPV4: \n10\n.0.2.15\nPort: \n31042\n\nInterfaces Len: \n18\n\n\n2\n-24 \n(\n1\n)\n\n\n2\n-22 \n(\n4\n)\n\n\n2\n-22 \n(\n2\n)\n\n\n2\n-23 \n(\n2\n)\n\n\n2\n-23 \n(\n3\n)\n\n\n3\n-31 \n(\n3\n)\n\n\n3\n-31 \n(\n1\n)\n\n\n1\n-1 \n(\n5\n)\n\n\n1\n-1 \n(\n3\n)\n\n\n1\n-3 \n(\n1\n)\n\n\n1\n-3 \n(\n2\n)\n\n\n1\n-2 \n(\n1\n)\n\n\n1\n-2 \n(\n4\n)\n\n\n1\n-6 \n(\n1\n)\n\n\n1\n-6 \n(\n2\n)\n\n\n1\n-7 \n(\n1\n)\n\n\n1\n-7 \n(\n39\n)\n\n\n1\n-1045 \n(\n1\n)\n\n----------------- PATH \n4\n\nMTU: \n1472\n\nIPV4: \n10\n.0.2.15\nPort: \n31042\n\nInterfaces Len: \n18\n\n\n2\n-24 \n(\n1\n)\n\n\n2\n-22 \n(\n4\n)\n\n\n2\n-22 \n(\n2\n)\n\n\n2\n-23 \n(\n2\n)\n\n\n2\n-23 \n(\n1\n)\n\n\n2\n-21 \n(\n3\n)\n\n\n2\n-21 \n(\n1\n)\n\n\n1\n-1 \n(\n4\n)\n\n\n1\n-1 \n(\n3\n)\n\n\n1\n-3 \n(\n1\n)\n\n\n1\n-3 \n(\n2\n)\n\n\n1\n-2 \n(\n1\n)\n\n\n1\n-2 \n(\n4\n)\n\n\n1\n-6 \n(\n1\n)\n\n\n1\n-6 \n(\n2\n)\n\n\n1\n-7 \n(\n1\n)\n\n\n1\n-7 \n(\n39\n)\n\n\n1\n-1045 \n(\n1\n)\n\n----------------- PATH \n5\n\nMTU: \n1472\n\nIPV4: \n10\n.0.2.15\nPort: \n31042\n\nInterfaces Len: \n20\n\n\n2\n-24 \n(\n1\n)\n\n\n2\n-22 \n(\n4\n)\n\n\n2\n-22 \n(\n1\n)\n\n\n2\n-21 \n(\n2\n)\n\n\n2\n-21 \n(\n3\n)\n\n\n2\n-23 \n(\n1\n)\n\n\n2\n-23 \n(\n3\n)\n\n\n3\n-31 \n(\n3\n)\n\n\n3\n-31 \n(\n1\n)\n\n\n1\n-1 \n(\n5\n)\n\n\n1\n-1 \n(\n3\n)\n\n\n1\n-3 \n(\n1\n)\n\n\n1\n-3 \n(\n2\n)\n\n\n1\n-2 \n(\n1\n)\n\n\n1\n-2 \n(\n4\n)\n\n\n1\n-6 \n(\n1\n)\n\n\n1\n-6 \n(\n2\n)\n\n\n1\n-7 \n(\n1\n)\n\n\n1\n-7 \n(\n39\n)\n\n\n1\n-1045 \n(\n1\n)\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 -h\nusage: as_viewer.py \n[\n-h\n]\n \n[\n--addr ADDR\n]\n \n[\n-t\n]\n \n[\n-p\n]\n \n[\n-trc\n]\n \n[\n-crt\n]\n \n[\n-c\n]\n \n[\n-pp\n]\n\n                    src_isdas \n[\ndst_isdas\n]\n\n\nSCION AS Path Viewer requires \nsource\n and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this \nhelp\n message and \nexit\n\n  --addr ADDR  ip address to \nbind\n to \nif\n not localhost\n  -t           display \nsource\n AS topology\n  -p           display announced paths to destination\n  -trc         display \nsource\n TRC\n  -crt         display \nsource\n certificate chain\n  -c           display \nsource\n AS configuration\n  -pp          display \nsource\n path policy\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 -pp\n\nSCION AS Viewer\n\n(\nsrc\n)\n \n1\n-1045 \n=======================\n> None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/path_policy.yml\n---\nBestSetSize: \n5\n\nCandidatesSetSize: \n20\n\nHistoryLimit: \n20\n\nPropertyRanges:\n  AvailableBandwidth: \n0\n-100\n  DelayTime: \n0\n-60\n  GuaranteedBandwidth: \n0\n-100\n  HopsLength: \n1\n-10\n  PeerLinks: \n0\n-100\n  TotalBandwidth: \n0\n-100\nPropertyWeights:\n  AvailableBandwidth: \n0\n\n  DelayTime: \n3\n\n  Disjointness: \n4\n\n  ExpirationTime: \n3\n\n  GuaranteedBandwidth: \n0\n\n  HopsLength: \n5\n\n  LastSeenTime: \n3\n\n  LastSentTime: \n3\n\n  PeerLinks: \n7\n\n  TotalBandwidth: \n0\n\nUnwantedASes: \n0\n-888,0-999\nUpdateAfterNumber: \n10\n\nUpdateAfterTime: \n3600\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 -c\n\nSCION AS Viewer\n\n(\nsrc\n)\n \n1\n-1045 \n=======================\n> None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/as.yml\nCertChainVersion: \n0\n\nMasterASKey: \nVrMpfgsWBxZZuhhSQoIUlg\n==\n\nPropagateTime: \n5\n\nRegisterPath: \ntrue\n\nRegisterTime: \n5\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 -crt\n\nSCION AS Viewer\n\n(\nsrc\n)\n \n1\n-1045 \n=======================\n> None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/certs/ISD1-AS1045-V0.crt\n\n{\n\n    \n\"0\"\n: \n{\n\n        \n\"EncAlgorithm\"\n: \n\"curve25519xsalsa20poly1305\"\n,\n        \n\"Signature\"\n: \n\"VlJptnORObEmVQDvofOcN/2i83w2/j5vk/DKFMY508IC+fkWiyMZ/XQCp4sOWMc8cMiJHObdiI99GWz/wZXGDQ==\"\n,\n        \n\"IssuingTime\"\n: \n1511289459\n,\n        \n\"SubjectSigKey\"\n: \n\"Ushs6XHb/uypmGzcmHLA3Xay4FpsrSbrKJTWU0JeesQ=\"\n,\n        \n\"SignAlgorithm\"\n: \n\"ed25519\"\n,\n        \n\"Subject\"\n: \n\"1-1045\"\n,\n        \n\"TRCVersion\"\n: \n0\n,\n        \n\"ExpirationTime\"\n: \n1542825459\n,\n        \n\"SubjectEncKey\"\n: \n\"4rQyFxRCx+eR7ygPYG96WQV9rKLl7RFY0lzXm1r2wg4=\"\n,\n        \n\"Comment\"\n: \n\"AS Certificate\"\n,\n        \n\"Issuer\"\n: \n\"1-1\"\n,\n        \n\"CanIssue\"\n: false,\n        \n\"Version\"\n: \n0\n\n    \n}\n,\n    \n\"1\"\n: \n{\n\n        \n\"EncAlgorithm\"\n: \n\"curve25519xsalsa20poly1305\"\n,\n        \n\"Signature\"\n: \n\"G4K+h8C8flqOaGR6Upt483vm4agQeoY57XvK2Ljo7uI/7u3yUcd3rlONG/7YfrHGlYSrlcLcpzPFvu9knyMFDQ==\"\n,\n        \n\"IssuingTime\"\n: \n1499177015\n,\n        \n\"SubjectSigKey\"\n: \n\"rRfaiQA8CIPWpRD5pH6rDeadutCTB+Hi+6YRh2zPS1c=\"\n,\n        \n\"SignAlgorithm\"\n: \n\"ed25519\"\n,\n        \n\"Subject\"\n: \n\"1-1\"\n,\n        \n\"TRCVersion\"\n: \n0\n,\n        \n\"ExpirationTime\"\n: \n1530713015\n,\n        \n\"SubjectEncKey\"\n: \n\"448SpoiC4OApC2UxyL8x9yFunPZ9n9Ms/AzQLMXQMmM=\"\n,\n        \n\"Comment\"\n: \n\"Core AS Certificate\"\n,\n        \n\"Issuer\"\n: \n\"1-1\"\n,\n        \n\"CanIssue\"\n: true,\n        \n\"Version\"\n: \n0\n\n    \n}\n\n\n}\n\n\n\n\n\n\npython3 sub/scion-viz/python/as_viewer.py \n1\n-1045 -trc\n\nSCION AS Viewer\n\n(\nsrc\n)\n \n1\n-1045 \n=======================\n> None \n(\ndst\n)\n\n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/certs/ISD1-V0.trc\n\n{\n\n    \n\"QuorumCAs\"\n: \n3\n,\n    \n\"Signatures\"\n: \n{\n\n        \n\"1-1\"\n: \n\"B89Z3cWTzW3j4r02b/zLMuAn1/PiF0meEa9/6/AITiyN3YGRpNNer5aD/uTziMX9IfPcUP9rEXlXKs8PCdVlBg==\"\n\n    \n}\n,\n    \n\"GracePeriod\"\n: \n18000\n,\n    \n\"RootRainsKey\"\n: \n\"dns_srv_addr\"\n,\n    \n\"CreationTime\"\n: \n1499177015\n,\n    \n\"PKILogs\"\n: \n{}\n,\n    \n\"ISDID\"\n: \n1\n,\n    \n\"CoreCAs\"\n: \n{\n\n        \n\"1-1\"\n: \n{\n\n            \n\"OfflineKey\"\n: \n\"AX0kRbqJfdnfNcpC0XMSiQuLCqQJabp8HRi6BiAKPXo=\"\n,\n            \n\"OfflineKeyAlg\"\n: \n\"Ed25519\"\n,\n            \n\"OnlineKey\"\n: \n\"VJvKbgHOsYbHlr6SGGssszGQvAtu+zXCTAJkYOCPr38=\"\n,\n            \n\"OnlineKeyAlg\"\n: \n\"Ed25519\"\n\n        \n}\n\n    \n}\n,\n    \n\"Quarantine\"\n: true,\n    \n\"Description\"\n: \n\"ISD 1\"\n,\n    \n\"QuorumOwnTRC\"\n: \n2\n,\n    \n\"RootCAs\"\n: \n{\n\n        \n\"CA1-1\"\n: \n\"MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrPtywDofkLN4So+AhCDRsn0xeUtAp3zoa4onULpsSbdo5lj8p0nfafKplOJ7uP4txMbn8FtTcyau5W7BbQodXl/Xa6Elu4u9nyb6UgNpzmiUyCp/5TGRicv3MKSLpVZQukuj6weHLL2GGwz58qnygqoRzvsNMugwP46PZHKLmx7hg3IOR10MDDax7dtAMlzvJJWjLeMGytf75U6b5JFK2366oaDroQhhGh2TL228+3rcvMMcB/TVxHBrzGKE+uTI8XnspMGo42lN3ZzaOOvbacXH5s/Cdf3l6j6x1GdE0OHFLB2vRaKFpBN/BdW7HhDHqy/u+9/Vjh6eiOoDODMBQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUchmrQ0w9YIrX1VjicXPcqVrouWswDQYJKoZIhvcNAQELBQADggEBAGCK0U5GFftXaRfaqgY7/dEeW3qk4zXPyCERd5la2KW8I1A4jUJ5yYZJTOovFe9Mi2NgyUG62NxN52mODNSRazZ+HxwmXVZtgUx9PEYMQVvFKoirsBbpxnx7Bnt1h9Fo0QVe1VGk0kYQ1sj/1/J4wperRDgy8bDBFB/JznY7z9S9HxfFNUgkmnMI53u/La4Yl18wB6sFNIqTeNwXNihzNWO1f3N9J9OMTjG0bjUMximNPDhUF7kCwIAXz3+C6besEqqCYq6mvcGchCL9H/zpw8vGJjwXPLbqpx0ewHlyPzEbCZqhy4kmHAodl5XU2ghuwCV/e7mSetuMlvSQPVtBXEY=\"\n,\n        \n\"CA1-3\"\n: \n\"MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoVanBcuF4ypz1U9aCMgVLLbTMI356RlmK1g2njfvfvq1ElEt1WRyWRNPNSMx6xamD5OFedODgRdbpdYvcFK89cK4BbRLSSAZ13RpAmld0RnlRAxDvUKqUcfeqz5uiuQ5lVJ+zyyKJoSea/quooAyehGVEb0qo0g1EyffWGf/E4awkDXT+w6y14cGO9r4vrPiD+re5Ufs+ht5z/AwQ9xkK6Md5uaHoHRMd0GUkxy74ef9w5AoiysB+1/ZLoFKZyl1N+q+jUwx9C79zqicYDpBQWB3gFd19sq69ZlIyX76p6od2GSV8fvlsSD+MEdChfvPy1GFsoFE7zOBLYCXXXxkqwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU91ybA6o68Yd/bd4wRe92F08xq7MwDQYJKoZIhvcNAQELBQADggEBADByHaGbqrI3Z9cO11xzBPzJwyS2AkFOFZ+bWPtGUwvdxoO/kFw3JTIjxD1GPM/5HQB86tjOBLKCCgwCQG/i/ZlwNU61v9aleFbJjFa5HnfuKxHxe5jtnspXjx6TBLV6KZUE82nNMnQYczlrUURmJ4gJ+9U4tLQVkmAERhq8HbCnO5wNeKkgPfKT1L3lRZP17Rh6WNQsOlUksJG6m/e8xR/BkZ0yHQuZPDUlcl7c94pL84CW1qJ7PcH3Mbi+AK/MnSDE4qjz1xCyoXvlklAOe6QrzYYLV9uvBpNJAldfr4vKHHdmWACWj03y+1pbHUB9edXZhv+skmQfpWBh4wxC/dQ=\"\n,\n        \n\"CA1-2\"\n: \n\"MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArS4eanUAEhbTtFi2zxo1YJYFG0IU/A7CD0WKyQL3TMK5HmAJY0rOth5MniTcx7OHCo4zcoMCTGXwtcfTHNnNyL3DKWoPpmjE0W8NbQpycgbcg8Wf/wBPXQ9eUKIlU7OUbIgWCOoxldr98A97N6sqxoo1u5EeNSUORYMiaEsbsgmKMxKj+jqwwJejTYL9sQLwktcXyW/sT27wBoiFeLWMpKEPp81qziub0dN42fSMgh0ZSBE68uAcwVAM3i6uT+4s+/5KoGehZ6KVjNT07TddSEcmc84Bb83oiKEThhc9xWyUOLVoIhQV/4PT6PA8fmpc1a6YfFRPSMj/Kzpl9clc9QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUVRLUZoMbGkH6PXwIFgv578NwXi8wDQYJKoZIhvcNAQELBQADggEBAJ4oYQOIR4RLsHUGGYI9IOaki0Pvfg9DvD61wTBfkypsIc4wYI0TVeggzloxSG9DVSMuV3UYXYF5xCV24oY4CTzIazZXKsg200g/vICDdxO4hpQDgihzdUkGRRCT+zR2zi5lnWS1TZ59F0fdaGH8jEySjU8YdGv7NPKshtTFN2tx02ZoyJBa0S239L46eT7dJeJeAo3MSvNJDrwP+IE3gjL+nOLjMUreZzz94Ueqzgg7dlpFeyKJFvQvv2tUQ+SUQCUJkWZIlaOKEdMExxSKmEyI+grbLPqXtl9yVAr5WzjQQCNqRFEf/XucKLXFWV5sC+BaoWPJCcmpwbhidHAhmZo=\"\n\n    \n}\n,\n    \n\"Version\"\n: \n0\n,\n    \n\"QuorumEEPKI\"\n: \n2\n\n\n}",
            "title": "Command-line AS Visualization"
        },
        {
            "location": "/as_visualization/command_asviz/#command-line-as-visualization",
            "text": "cd  ~/go/src/github.com/netsec-ethz/scion/  python3 sub/scion-viz/python/as_viewer.py\nusage: as_viewer.py  [ -h ]   [ --addr ADDR ]   [ -t ]   [ -p ]   [ -trc ]   [ -crt ]   [ -c ]   [ -pp ] \n                    src_isdas  [ dst_isdas ] \nas_viewer.py: error: the following arguments are required: src_isdas  python3 sub/scion-viz/python/as_viewer.py -h\nusage: as_viewer.py  [ -h ]   [ --addr ADDR ]   [ -t ]   [ -p ]   [ -trc ]   [ -crt ]   [ -c ]   [ -pp ] \n                    src_isdas  [ dst_isdas ] \n\nSCION AS Path Viewer requires  source  and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this  help  message and  exit \n  --addr ADDR  ip address to  bind  to  if  not localhost\n  -t           display  source  AS topology\n  -p           display announced paths to destination\n  -trc         display  source  TRC\n  -crt         display  source  certificate chain\n  -c           display  source  AS configuration\n  -pp          display  source  path policy  python3 sub/scion-viz/python/as_viewer.py  1 -1045 -t\n\nSCION AS Viewer ( src )   1 -1045  ======================= > None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- AS TOPOLOGY:  1 -1045\nis_core_as: False\nmtu:  1472 \n----------------- PATH SERVER:\nAddress:  10 .0.2.15\nName: ps-1\nPort:  31044 \nTTL:  0 \n----------------- CERTIFICATE SERVER:\nAddress:  10 .0.2.15\nName: cs-1\nPort:  31043 \nTTL:  0 \n----------------- BEACON SERVER:\nAddress:  10 .0.2.15\nName: bs-1\nPort:  31041 \nTTL:  0 \n----------------- SIBRA SERVER:\nAddress:  10 .0.2.15\nName: sb-1\nPort:  31045 \nTTL:  0 \n----------------- BORDER ROUTER:\nAddress:  10 .0.2.15\nName: br-1\nPort:  31042 \nInterface ID:  1   python3 sub/scion-viz/python/as_viewer.py  1 -1045  2 -24 -p\n\nSCION AS Viewer ( src )   1 -1045  ======================= >  2 -24  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n----------------- PATH  1 \nMTU:  1472 \nIPV4:  10 .0.2.15\nPort:  31042 \nInterfaces Len:  16  2 -24  ( 1 )  2 -22  ( 4 )  2 -22  ( 1 )  2 -21  ( 2 )  2 -21  ( 1 )  1 -1  ( 4 )  1 -1  ( 3 )  1 -3  ( 1 )  1 -3  ( 2 )  1 -2  ( 1 )  1 -2  ( 4 )  1 -6  ( 1 )  1 -6  ( 2 )  1 -7  ( 1 )  1 -7  ( 39 )  1 -1045  ( 1 ) \n----------------- PATH  2 \nMTU:  1472 \nIPV4:  10 .0.2.15\nPort:  31042 \nInterfaces Len:  16  2 -24  ( 1 )  2 -22  ( 4 )  2 -22  ( 3 )  4 -41  ( 2 )  4 -41  ( 1 )  1 -1  ( 6 )  1 -1  ( 3 )  1 -3  ( 1 )  1 -3  ( 2 )  1 -2  ( 1 )  1 -2  ( 4 )  1 -6  ( 1 )  1 -6  ( 2 )  1 -7  ( 1 )  1 -7  ( 39 )  1 -1045  ( 1 ) \n----------------- PATH  3 \nMTU:  1472 \nIPV4:  10 .0.2.15\nPort:  31042 \nInterfaces Len:  18  2 -24  ( 1 )  2 -22  ( 4 )  2 -22  ( 2 )  2 -23  ( 2 )  2 -23  ( 3 )  3 -31  ( 3 )  3 -31  ( 1 )  1 -1  ( 5 )  1 -1  ( 3 )  1 -3  ( 1 )  1 -3  ( 2 )  1 -2  ( 1 )  1 -2  ( 4 )  1 -6  ( 1 )  1 -6  ( 2 )  1 -7  ( 1 )  1 -7  ( 39 )  1 -1045  ( 1 ) \n----------------- PATH  4 \nMTU:  1472 \nIPV4:  10 .0.2.15\nPort:  31042 \nInterfaces Len:  18  2 -24  ( 1 )  2 -22  ( 4 )  2 -22  ( 2 )  2 -23  ( 2 )  2 -23  ( 1 )  2 -21  ( 3 )  2 -21  ( 1 )  1 -1  ( 4 )  1 -1  ( 3 )  1 -3  ( 1 )  1 -3  ( 2 )  1 -2  ( 1 )  1 -2  ( 4 )  1 -6  ( 1 )  1 -6  ( 2 )  1 -7  ( 1 )  1 -7  ( 39 )  1 -1045  ( 1 ) \n----------------- PATH  5 \nMTU:  1472 \nIPV4:  10 .0.2.15\nPort:  31042 \nInterfaces Len:  20  2 -24  ( 1 )  2 -22  ( 4 )  2 -22  ( 1 )  2 -21  ( 2 )  2 -21  ( 3 )  2 -23  ( 1 )  2 -23  ( 3 )  3 -31  ( 3 )  3 -31  ( 1 )  1 -1  ( 5 )  1 -1  ( 3 )  1 -3  ( 1 )  1 -3  ( 2 )  1 -2  ( 1 )  1 -2  ( 4 )  1 -6  ( 1 )  1 -6  ( 2 )  1 -7  ( 1 )  1 -7  ( 39 )  1 -1045  ( 1 )   python3 sub/scion-viz/python/as_viewer.py  1 -1045 -h\nusage: as_viewer.py  [ -h ]   [ --addr ADDR ]   [ -t ]   [ -p ]   [ -trc ]   [ -crt ]   [ -c ]   [ -pp ] \n                    src_isdas  [ dst_isdas ] \n\nSCION AS Path Viewer requires  source  and destination ISD-ASes to analyze.\n\npositional arguments:\n  src_isdas    ISD-AS source.\n  dst_isdas    ISD-AS destination.\n\noptional arguments:\n  -h, --help   show this  help  message and  exit \n  --addr ADDR  ip address to  bind  to  if  not localhost\n  -t           display  source  AS topology\n  -p           display announced paths to destination\n  -trc         display  source  TRC\n  -crt         display  source  certificate chain\n  -c           display  source  AS configuration\n  -pp          display  source  path policy  python3 sub/scion-viz/python/as_viewer.py  1 -1045 -pp\n\nSCION AS Viewer ( src )   1 -1045  ======================= > None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/path_policy.yml\n---\nBestSetSize:  5 \nCandidatesSetSize:  20 \nHistoryLimit:  20 \nPropertyRanges:\n  AvailableBandwidth:  0 -100\n  DelayTime:  0 -60\n  GuaranteedBandwidth:  0 -100\n  HopsLength:  1 -10\n  PeerLinks:  0 -100\n  TotalBandwidth:  0 -100\nPropertyWeights:\n  AvailableBandwidth:  0 \n  DelayTime:  3 \n  Disjointness:  4 \n  ExpirationTime:  3 \n  GuaranteedBandwidth:  0 \n  HopsLength:  5 \n  LastSeenTime:  3 \n  LastSentTime:  3 \n  PeerLinks:  7 \n  TotalBandwidth:  0 \nUnwantedASes:  0 -888,0-999\nUpdateAfterNumber:  10 \nUpdateAfterTime:  3600   python3 sub/scion-viz/python/as_viewer.py  1 -1045 -c\n\nSCION AS Viewer ( src )   1 -1045  ======================= > None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/as.yml\nCertChainVersion:  0 \nMasterASKey:  VrMpfgsWBxZZuhhSQoIUlg == \nPropagateTime:  5 \nRegisterPath:  true \nRegisterTime:  5   python3 sub/scion-viz/python/as_viewer.py  1 -1045 -crt\n\nSCION AS Viewer ( src )   1 -1045  ======================= > None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/certs/ISD1-AS1045-V0.crt { \n     \"0\" :  { \n         \"EncAlgorithm\" :  \"curve25519xsalsa20poly1305\" ,\n         \"Signature\" :  \"VlJptnORObEmVQDvofOcN/2i83w2/j5vk/DKFMY508IC+fkWiyMZ/XQCp4sOWMc8cMiJHObdiI99GWz/wZXGDQ==\" ,\n         \"IssuingTime\" :  1511289459 ,\n         \"SubjectSigKey\" :  \"Ushs6XHb/uypmGzcmHLA3Xay4FpsrSbrKJTWU0JeesQ=\" ,\n         \"SignAlgorithm\" :  \"ed25519\" ,\n         \"Subject\" :  \"1-1045\" ,\n         \"TRCVersion\" :  0 ,\n         \"ExpirationTime\" :  1542825459 ,\n         \"SubjectEncKey\" :  \"4rQyFxRCx+eR7ygPYG96WQV9rKLl7RFY0lzXm1r2wg4=\" ,\n         \"Comment\" :  \"AS Certificate\" ,\n         \"Issuer\" :  \"1-1\" ,\n         \"CanIssue\" : false,\n         \"Version\" :  0 \n     } ,\n     \"1\" :  { \n         \"EncAlgorithm\" :  \"curve25519xsalsa20poly1305\" ,\n         \"Signature\" :  \"G4K+h8C8flqOaGR6Upt483vm4agQeoY57XvK2Ljo7uI/7u3yUcd3rlONG/7YfrHGlYSrlcLcpzPFvu9knyMFDQ==\" ,\n         \"IssuingTime\" :  1499177015 ,\n         \"SubjectSigKey\" :  \"rRfaiQA8CIPWpRD5pH6rDeadutCTB+Hi+6YRh2zPS1c=\" ,\n         \"SignAlgorithm\" :  \"ed25519\" ,\n         \"Subject\" :  \"1-1\" ,\n         \"TRCVersion\" :  0 ,\n         \"ExpirationTime\" :  1530713015 ,\n         \"SubjectEncKey\" :  \"448SpoiC4OApC2UxyL8x9yFunPZ9n9Ms/AzQLMXQMmM=\" ,\n         \"Comment\" :  \"Core AS Certificate\" ,\n         \"Issuer\" :  \"1-1\" ,\n         \"CanIssue\" : true,\n         \"Version\" :  0 \n     }  }   python3 sub/scion-viz/python/as_viewer.py  1 -1045 -trc\n\nSCION AS Viewer ( src )   1 -1045  ======================= > None  ( dst ) \n/run/shm/sciond/sd1-1045.sock\nStarting sciond at /run/shm/sciond/sd1-1045.sock\n/home/ubuntu/go/src/github.com/netsec-ethz/scion/gen/ISD1/AS1045/endhost/certs/ISD1-V0.trc { \n     \"QuorumCAs\" :  3 ,\n     \"Signatures\" :  { \n         \"1-1\" :  \"B89Z3cWTzW3j4r02b/zLMuAn1/PiF0meEa9/6/AITiyN3YGRpNNer5aD/uTziMX9IfPcUP9rEXlXKs8PCdVlBg==\" \n     } ,\n     \"GracePeriod\" :  18000 ,\n     \"RootRainsKey\" :  \"dns_srv_addr\" ,\n     \"CreationTime\" :  1499177015 ,\n     \"PKILogs\" :  {} ,\n     \"ISDID\" :  1 ,\n     \"CoreCAs\" :  { \n         \"1-1\" :  { \n             \"OfflineKey\" :  \"AX0kRbqJfdnfNcpC0XMSiQuLCqQJabp8HRi6BiAKPXo=\" ,\n             \"OfflineKeyAlg\" :  \"Ed25519\" ,\n             \"OnlineKey\" :  \"VJvKbgHOsYbHlr6SGGssszGQvAtu+zXCTAJkYOCPr38=\" ,\n             \"OnlineKeyAlg\" :  \"Ed25519\" \n         } \n     } ,\n     \"Quarantine\" : true,\n     \"Description\" :  \"ISD 1\" ,\n     \"QuorumOwnTRC\" :  2 ,\n     \"RootCAs\" :  { \n         \"CA1-1\" :  \"MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrPtywDofkLN4So+AhCDRsn0xeUtAp3zoa4onULpsSbdo5lj8p0nfafKplOJ7uP4txMbn8FtTcyau5W7BbQodXl/Xa6Elu4u9nyb6UgNpzmiUyCp/5TGRicv3MKSLpVZQukuj6weHLL2GGwz58qnygqoRzvsNMugwP46PZHKLmx7hg3IOR10MDDax7dtAMlzvJJWjLeMGytf75U6b5JFK2366oaDroQhhGh2TL228+3rcvMMcB/TVxHBrzGKE+uTI8XnspMGo42lN3ZzaOOvbacXH5s/Cdf3l6j6x1GdE0OHFLB2vRaKFpBN/BdW7HhDHqy/u+9/Vjh6eiOoDODMBQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUchmrQ0w9YIrX1VjicXPcqVrouWswDQYJKoZIhvcNAQELBQADggEBAGCK0U5GFftXaRfaqgY7/dEeW3qk4zXPyCERd5la2KW8I1A4jUJ5yYZJTOovFe9Mi2NgyUG62NxN52mODNSRazZ+HxwmXVZtgUx9PEYMQVvFKoirsBbpxnx7Bnt1h9Fo0QVe1VGk0kYQ1sj/1/J4wperRDgy8bDBFB/JznY7z9S9HxfFNUgkmnMI53u/La4Yl18wB6sFNIqTeNwXNihzNWO1f3N9J9OMTjG0bjUMximNPDhUF7kCwIAXz3+C6besEqqCYq6mvcGchCL9H/zpw8vGJjwXPLbqpx0ewHlyPzEbCZqhy4kmHAodl5XU2ghuwCV/e7mSetuMlvSQPVtBXEY=\" ,\n         \"CA1-3\" :  \"MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoVanBcuF4ypz1U9aCMgVLLbTMI356RlmK1g2njfvfvq1ElEt1WRyWRNPNSMx6xamD5OFedODgRdbpdYvcFK89cK4BbRLSSAZ13RpAmld0RnlRAxDvUKqUcfeqz5uiuQ5lVJ+zyyKJoSea/quooAyehGVEb0qo0g1EyffWGf/E4awkDXT+w6y14cGO9r4vrPiD+re5Ufs+ht5z/AwQ9xkK6Md5uaHoHRMd0GUkxy74ef9w5AoiysB+1/ZLoFKZyl1N+q+jUwx9C79zqicYDpBQWB3gFd19sq69ZlIyX76p6od2GSV8fvlsSD+MEdChfvPy1GFsoFE7zOBLYCXXXxkqwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU91ybA6o68Yd/bd4wRe92F08xq7MwDQYJKoZIhvcNAQELBQADggEBADByHaGbqrI3Z9cO11xzBPzJwyS2AkFOFZ+bWPtGUwvdxoO/kFw3JTIjxD1GPM/5HQB86tjOBLKCCgwCQG/i/ZlwNU61v9aleFbJjFa5HnfuKxHxe5jtnspXjx6TBLV6KZUE82nNMnQYczlrUURmJ4gJ+9U4tLQVkmAERhq8HbCnO5wNeKkgPfKT1L3lRZP17Rh6WNQsOlUksJG6m/e8xR/BkZ0yHQuZPDUlcl7c94pL84CW1qJ7PcH3Mbi+AK/MnSDE4qjz1xCyoXvlklAOe6QrzYYLV9uvBpNJAldfr4vKHHdmWACWj03y+1pbHUB9edXZhv+skmQfpWBh4wxC/dQ=\" ,\n         \"CA1-2\" :  \"MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArS4eanUAEhbTtFi2zxo1YJYFG0IU/A7CD0WKyQL3TMK5HmAJY0rOth5MniTcx7OHCo4zcoMCTGXwtcfTHNnNyL3DKWoPpmjE0W8NbQpycgbcg8Wf/wBPXQ9eUKIlU7OUbIgWCOoxldr98A97N6sqxoo1u5EeNSUORYMiaEsbsgmKMxKj+jqwwJejTYL9sQLwktcXyW/sT27wBoiFeLWMpKEPp81qziub0dN42fSMgh0ZSBE68uAcwVAM3i6uT+4s+/5KoGehZ6KVjNT07TddSEcmc84Bb83oiKEThhc9xWyUOLVoIhQV/4PT6PA8fmpc1a6YfFRPSMj/Kzpl9clc9QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUVRLUZoMbGkH6PXwIFgv578NwXi8wDQYJKoZIhvcNAQELBQADggEBAJ4oYQOIR4RLsHUGGYI9IOaki0Pvfg9DvD61wTBfkypsIc4wYI0TVeggzloxSG9DVSMuV3UYXYF5xCV24oY4CTzIazZXKsg200g/vICDdxO4hpQDgihzdUkGRRCT+zR2zi5lnWS1TZ59F0fdaGH8jEySjU8YdGv7NPKshtTFN2tx02ZoyJBa0S239L46eT7dJeJeAo3MSvNJDrwP+IE3gjL+nOLjMUreZzz94Ueqzgg7dlpFeyKJFvQvv2tUQ+SUQCUJkWZIlaOKEdMExxSKmEyI+grbLPqXtl9yVAr5WzjQQCNqRFEf/XucKLXFWV5sC+BaoWPJCcmpwbhidHAhmZo=\" \n     } ,\n     \"Version\" :  0 ,\n     \"QuorumEEPKI\" :  2  }",
            "title": "Command-line AS Visualization"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/",
            "text": "Verifying SCION installation\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nAfter running your SCION infrastructure, it is necessary to verify tha it is working correctly.\n\n\nThere are several methods of doing this. Some of them are described in this post.\n\n\nRunning SCION-viz\n\u00b6\n\n\nThe recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool \nSCION-viz\n\n\nInspecting log files\n\u00b6\n\n\nThe SCION log files can be accessed with the following command:\n\n\ntail -f \n$SC\n/logs/bs*.DEBUG\n\n\n\n\n\nWhat to look for?\n\u00b6\n\n\nTBA\n\n\n\n\nTip\n\n\nIf you are running the SCION virtual machine image, you can display the logs by running:\n\n\ncheckbeacons\n\n\nfrom any directory",
            "title": "Verifying the installation"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#verifying-scion-installation",
            "text": "",
            "title": "Verifying SCION installation"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#introduction",
            "text": "After running your SCION infrastructure, it is necessary to verify tha it is working correctly.  There are several methods of doing this. Some of them are described in this post.",
            "title": "Introduction"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#running-scion-viz",
            "text": "The recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool  SCION-viz",
            "title": "Running SCION-viz"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#inspecting-log-files",
            "text": "The SCION log files can be accessed with the following command:  tail -f  $SC /logs/bs*.DEBUG",
            "title": "Inspecting log files"
        },
        {
            "location": "/general_scion_configuration/verifying_scion_installation/#what-to-look-for",
            "text": "TBA   Tip  If you are running the SCION virtual machine image, you can display the logs by running:  checkbeacons  from any directory",
            "title": "What to look for?"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/",
            "text": "Updating gen directory\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nComplete configuration for SCION infrastructure is stored in \ngen\n directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data. \n\n\nContent for this directory can be created in several ways:\n\n\n\n\nUsing topology definition from \ntopology\n directory. \nDescribed in \nRunning SCION on local topology\n\n\nDownloading from \nSCIONLab Coordination Service\n. \nDescribed in \nConfiguring SCION Lab with OpenVPN\n.\n\n\nManually creating topology\n\n\n\n\nRestarting SCION infrastructure\n\u00b6\n\n\nEvery time \ngen\n directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands:\n\n\ncd\n \n$SC\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run\n\n\n\n\n\nNext steps\n\u00b6\n\n\nAfter topology has been updated it is recommended to \nverify that its working correctly",
            "title": "Updating gen directory"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#updating-gen-directory",
            "text": "",
            "title": "Updating gen directory"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#introduction",
            "text": "Complete configuration for SCION infrastructure is stored in  gen  directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data.   Content for this directory can be created in several ways:   Using topology definition from  topology  directory.  Described in  Running SCION on local topology  Downloading from  SCIONLab Coordination Service .  Described in  Configuring SCION Lab with OpenVPN .  Manually creating topology",
            "title": "Introduction"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#restarting-scion-infrastructure",
            "text": "Every time  gen  directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands:  cd   $SC \n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Restarting SCION infrastructure"
        },
        {
            "location": "/scion_tricks/changing_gen_dir/#next-steps",
            "text": "After topology has been updated it is recommended to  verify that its working correctly",
            "title": "Next steps"
        },
        {
            "location": "/scion_tricks/updating_scion/",
            "text": "Updating SCION to newest version\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nAs SCION is hosted on git, updating to latest version is simple as \npull\n-ing changes.\n\n\nGetting the latest version\n\u00b6\n\n\nTo download newest version first navigate to SCION root directory:\n\n\ncd\n \n$SC\n\n\n\n\n\n\nand pull newest changes from \nscionlab\n branch:\n\n\ngit pull origin scionlab\n\n\n\n\n\nIf git reports that new modifications are downloaded, it is necessary to restart scion infrastructure:\n\n\n./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Updating SCION"
        },
        {
            "location": "/scion_tricks/updating_scion/#updating-scion-to-newest-version",
            "text": "",
            "title": "Updating SCION to newest version"
        },
        {
            "location": "/scion_tricks/updating_scion/#introduction",
            "text": "As SCION is hosted on git, updating to latest version is simple as  pull -ing changes.",
            "title": "Introduction"
        },
        {
            "location": "/scion_tricks/updating_scion/#getting-the-latest-version",
            "text": "To download newest version first navigate to SCION root directory:  cd   $SC   and pull newest changes from  scionlab  branch:  git pull origin scionlab  If git reports that new modifications are downloaded, it is necessary to restart scion infrastructure:  ./scion.sh stop\n~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown\n./scion.sh run",
            "title": "Getting the latest version"
        },
        {
            "location": "/scion_tricks/wireshark/",
            "text": "Adding Wireshark and Tshark SCION protocol dissector\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nIn this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging\nof SCION protocol. You can read more on what protocol dissector does on \nWireshark docs\n\n\nPrerequisites\n\u00b6\n\n\nIn order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system.\n\n\n\n\nTip\n\n\nRunning Wireshark is recommended on machines with graphical interface. \n\n\n\n\nInstall Wireshark\n\u00b6\n\n\nIn order to install Wireshark, follow installation guide on \nWireshark website\n for your platform. \nAlternatively on Ubuntu system you can run following commands:\n\n\nsudo add-apt-repository ppa:wireshark-dev/stable\nsudo apt-get update\nsudo apt-get install wireshark\n\n\n\n\n\nInstall Tshark\n\u00b6\n\n\nIn case you want to install Tshark on Ubuntu simply run:\n\n\nsudo apt install tshark\n\n\n\n\n\nStep One - Finding plugin directory\n\u00b6\n\n\nWe need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.\n\n\nWireshark\n\u00b6\n\n\nFrom \nHelp\n menu select \nAbout Wireshark\n and in newly opened window select \nFolders\n tab. \nThere are paths to global and local plugin directory.\n\n\nIn this tutorial we will use global plugin directory which is usually:\n\n\n/usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6\n\n\n\n\n\nPlugins from global plugin directory are available to all users, while local is only for currently running user.\n\n\nTshark\n\u00b6\n\n\nIn order to find the directory where Tshark is loading plugins from we can run following command:\n\n\ntshark -G plugins\n\n\n\n\n\nOutput will look something like this:\n\n\nopcua.so    1.1.0   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so\nirda.so 0.0.6   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so\nmate.so 1.0.0a  dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so\n...\n\n\n\n\n\nExamining output we can conclude that plugins are being loaded from \n\n\n/usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/\n\n\n\n\n\nSo we will use that for our plugin directory.\n\n\nStep Two - Adding plugin\n\u00b6\n\n\nWireshark/Tshark plugin is located in SCION project at \ntools/wireshark/scion.lua\n.\n\n\nIt is necessary to download \nscion.lua\n file and place it in plugin directory acquired in previous step.\n\n\nIn Ubuntu system this can be done with following command:\n\n\nsudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua",
            "title": "Adding Wireshark dissector"
        },
        {
            "location": "/scion_tricks/wireshark/#adding-wireshark-and-tshark-scion-protocol-dissector",
            "text": "",
            "title": "Adding Wireshark and Tshark SCION protocol dissector"
        },
        {
            "location": "/scion_tricks/wireshark/#introduction",
            "text": "In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging\nof SCION protocol. You can read more on what protocol dissector does on  Wireshark docs",
            "title": "Introduction"
        },
        {
            "location": "/scion_tricks/wireshark/#prerequisites",
            "text": "In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system.   Tip  Running Wireshark is recommended on machines with graphical interface.",
            "title": "Prerequisites"
        },
        {
            "location": "/scion_tricks/wireshark/#install-wireshark",
            "text": "In order to install Wireshark, follow installation guide on  Wireshark website  for your platform. \nAlternatively on Ubuntu system you can run following commands:  sudo add-apt-repository ppa:wireshark-dev/stable\nsudo apt-get update\nsudo apt-get install wireshark",
            "title": "Install Wireshark"
        },
        {
            "location": "/scion_tricks/wireshark/#install-tshark",
            "text": "In case you want to install Tshark on Ubuntu simply run:  sudo apt install tshark",
            "title": "Install Tshark"
        },
        {
            "location": "/scion_tricks/wireshark/#step-one-finding-plugin-directory",
            "text": "We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.",
            "title": "Step One - Finding plugin directory"
        },
        {
            "location": "/scion_tricks/wireshark/#wireshark",
            "text": "From  Help  menu select  About Wireshark  and in newly opened window select  Folders  tab. \nThere are paths to global and local plugin directory.  In this tutorial we will use global plugin directory which is usually:  /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6  Plugins from global plugin directory are available to all users, while local is only for currently running user.",
            "title": "Wireshark"
        },
        {
            "location": "/scion_tricks/wireshark/#tshark",
            "text": "In order to find the directory where Tshark is loading plugins from we can run following command:  tshark -G plugins  Output will look something like this:  opcua.so    1.1.0   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so\nirda.so 0.0.6   dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so\nmate.so 1.0.0a  dissector   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so\n...  Examining output we can conclude that plugins are being loaded from   /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/  So we will use that for our plugin directory.",
            "title": "Tshark"
        },
        {
            "location": "/scion_tricks/wireshark/#step-two-adding-plugin",
            "text": "Wireshark/Tshark plugin is located in SCION project at  tools/wireshark/scion.lua .  It is necessary to download  scion.lua  file and place it in plugin directory acquired in previous step.  In Ubuntu system this can be done with following command:  sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua",
            "title": "Step Two - Adding plugin"
        },
        {
            "location": "/scionlab/scionlab/",
            "text": "SCIONLab\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThis tutorial introduces you to SCIONLab, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request \nhere\n in particular.\n\n\nSetting up the PCEngines device\n\u00b6\n\n\nYou received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface).\nYou can then check on the scion-coordinator on you \nuser page\n that you device status is online.\n\n\n\n\nHint\n\n\nIn case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface.\n\n\nThe SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it.\n\n\n\n\nMake user of the device\n\u00b6\n\n\nThe SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the \nSCION book\n.\nIn addition, SCION boxes also run ithe SCIONviz server which allows you to visualize the paths you AS knows about. You can connect to SCIONviz by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use SCIONviz, please see the \nSCIONviz tutorial\n (but make sure to use the address mentioned here).\n\n\nSetup an endhost and connect it via the SCION box\n\u00b6\n\n\nSetup an endhost and configure it as described in \nConfiguring SCION endhost topology\n.\nThen connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address.\n\n\nNext steps\n\u00b6\n\n\nCheck out the \nSCION code base\n and start contributing.",
            "title": "SCION box first steps"
        },
        {
            "location": "/scionlab/scionlab/#scionlab",
            "text": "",
            "title": "SCIONLab"
        },
        {
            "location": "/scionlab/scionlab/#introduction",
            "text": "This tutorial introduces you to SCIONLab, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request  here  in particular.",
            "title": "Introduction"
        },
        {
            "location": "/scionlab/scionlab/#setting-up-the-pcengines-device",
            "text": "You received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface).\nYou can then check on the scion-coordinator on you  user page  that you device status is online.   Hint  In case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface.  The SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it.",
            "title": "Setting up the PCEngines device"
        },
        {
            "location": "/scionlab/scionlab/#make-user-of-the-device",
            "text": "The SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the  SCION book .\nIn addition, SCION boxes also run ithe SCIONviz server which allows you to visualize the paths you AS knows about. You can connect to SCIONviz by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use SCIONviz, please see the  SCIONviz tutorial  (but make sure to use the address mentioned here).",
            "title": "Make user of the device"
        },
        {
            "location": "/scionlab/scionlab/#setup-an-endhost-and-connect-it-via-the-scion-box",
            "text": "Setup an endhost and configure it as described in  Configuring SCION endhost topology .\nThen connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address.",
            "title": "Setup an endhost and connect it via the SCION box"
        },
        {
            "location": "/scionlab/scionlab/#next-steps",
            "text": "Check out the  SCION code base  and start contributing.",
            "title": "Next steps"
        }
    ]
}